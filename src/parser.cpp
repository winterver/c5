/* This file is automatically generated by Lemon from input grammar
** source file "src\parser.y". */
/*
** 2000-05-29
**
** The author disclaims copyright to this source code.  In place of
** a legal notice, here is a blessing:
**
**    May you do good and not evil.
**    May you find forgiveness for yourself and forgive others.
**    May you share freely, never taking more than you give.
**
*************************************************************************
** Driver template for the LEMON parser generator.
**
** The "lemon" program processes an LALR(1) input grammar file, then uses
** this template to construct a parser.  The "lemon" program inserts text
** at each "%%" line.  Also, any "P-a-r-s-e" identifer prefix (without the
** interstitial "-" characters) contained in this template is changed into
** the value of the %name directive from the grammar.  Otherwise, the content
** of this template is copied straight through into the generate parser
** source file.
**
** The following is the concatenation of all %include directives from the
** input grammar file:
*/
/************ Begin %include sections from the grammar ************************/
#include <stdio.h>
#include <string.h>
#include <vector>
#include "symtab.hpp"
#include "semantics.hpp"

#define ZERO(s) memset(&s, 0, sizeof(s))
void yyerror(const char* s);

// states of the parser
int localoffset = 0;
int globaloffset = 0;

struct decl_specif_t {
	int type; 
};

struct init_decl_t {
	int depth;
	const char* name;
};

struct func_decl_t {
	int depth;
	const char* name;
	int nparams;
	param_t* params;
	bool variadic;
};

// helper function
template<class T>
T* extract(std::vector<T>* vec)
{
	auto res = new T[vec->size()];
	std::copy(vec->begin(), vec->end(), res);
	return res;
}

int get_size(int type, int depth)
{
	if (depth)
		return 8;
	switch(type)
	{
	case TYPE_CHAR: return 1;
	case TYPE_SHORT: return 2;
	case TYPE_INT: return 4;
	case TYPE_LONG: return 8;
	case TYPE_VOID: return 0;
	}
	yyerror("illegal type");
	return 0;
}

#line 84 "src\\parser.c"
/**************** End of %include directives **********************************/
/* These constants specify the various numeric values for terminal symbols.
***************** Begin token definitions *************************************/
#ifndef NUM
#define NUM                             1
#define DEC                             2
#define ID                              3
#define STR                             4
#define ASGN_OP                         5
#define LT_OP                           6
#define GT_OP                           7
#define ADD_OP                          8
#define SUB_OP                          9
#define MUL_OP                         10
#define DIV_OP                         11
#define MOD_OP                         12
#define AND_OP                         13
#define OR_OP                          14
#define XOR_OP                         15
#define NOT_OP                         16
#define LOGAND                         17
#define LOGOR                          18
#define LOGNOT                         19
#define DOT_OP                         20
#define PTR_OP                         21
#define INC_OP                         22
#define DEC_OP                         23
#define SHL_OP                         24
#define SHR_OP                         25
#define LE_OP                          26
#define GE_OP                          27
#define EQ_OP                          28
#define NE_OP                          29
#define MULASGN                        30
#define DIVASGN                        31
#define MODASGN                        32
#define ADDASGN                        33
#define SUBASGN                        34
#define SHLASGN                        35
#define SHRASGN                        36
#define ANDASGN                        37
#define XORASGN                        38
#define ORASGN                         39
#define SIZEOF                         40
#define ELLIPSIS                       41
#define TYPEDEF                        42
#define STATIC                         43
#define CONST                          44
#define VOID                           45
#define CHAR                           46
#define SHORT                          47
#define INT                            48
#define LONG                           49
#define FLOAT                          50
#define DOUBLE                         51
#define TYPE                           52
#define IF                             53
#define ELSE                           54
#define FOR                            55
#define WHILE                          56
#define DO                             57
#define CONTINUE                       58
#define BREAK                          59
#define RETURN                         60
#define GOTO                           61
#define LP                             62
#define RP                             63
#define LS                             64
#define RS                             65
#define LB                             66
#define RB                             67
#define COM                            68
#define SEM                            69
#define COL                            70
#define QUE                            71
#endif
/**************** End token definitions ***************************************/

/* The next sections is a series of control #defines.
** various aspects of the generated parser.
**    YYCODETYPE         is the data type used to store the integer codes
**                       that represent terminal and non-terminal symbols.
**                       "unsigned char" is used if there are fewer than
**                       256 symbols.  Larger types otherwise.
**    YYNOCODE           is a number of type YYCODETYPE that is not used for
**                       any terminal or nonterminal symbol.
**    YYFALLBACK         If defined, this indicates that one or more tokens
**                       (also known as: "terminal symbols") have fall-back
**                       values which should be used if the original symbol
**                       would not parse.  This permits keywords to sometimes
**                       be used as identifiers, for example.
**    YYACTIONTYPE       is the data type used for "action codes" - numbers
**                       that indicate what to do in response to the next
**                       token.
**    ParseTOKENTYPE     is the data type used for minor type for terminal
**                       symbols.  Background: A "minor type" is a semantic
**                       value associated with a terminal or non-terminal
**                       symbols.  For example, for an "ID" terminal symbol,
**                       the minor type might be the name of the identifier.
**                       Each non-terminal can have a different minor type.
**                       Terminal symbols all have the same minor type, though.
**                       This macros defines the minor type for terminal
**                       symbols.
**    YYMINORTYPE        is the data type used for all minor types.
**                       This is typically a union of many types, one of
**                       which is ParseTOKENTYPE.  The entry in the union
**                       for terminal symbols is called "yy0".
**    YYSTACKDEPTH       is the maximum depth of the parser's stack.  If
**                       zero the stack is dynamically sized using realloc()
**    ParseARG_SDECL     A static variable declaration for the %extra_argument
**    ParseARG_PDECL     A parameter declaration for the %extra_argument
**    ParseARG_PARAM     Code to pass %extra_argument as a subroutine parameter
**    ParseARG_STORE     Code to store %extra_argument into yypParser
**    ParseARG_FETCH     Code to extract %extra_argument from yypParser
**    ParseCTX_*         As ParseARG_ except for %extra_context
**    YYERRORSYMBOL      is the code number of the error symbol.  If not
**                       defined, then do no error processing.
**    YYNSTATE           the combined number of states.
**    YYNRULE            the number of rules in the grammar
**    YYNTOKEN           Number of terminal symbols
**    YY_MAX_SHIFT       Maximum value for shift actions
**    YY_MIN_SHIFTREDUCE Minimum value for shift-reduce actions
**    YY_MAX_SHIFTREDUCE Maximum value for shift-reduce actions
**    YY_ERROR_ACTION    The yy_action[] code for syntax error
**    YY_ACCEPT_ACTION   The yy_action[] code for accept
**    YY_NO_ACTION       The yy_action[] code for no-op
**    YY_MIN_REDUCE      Minimum value for reduce actions
**    YY_MAX_REDUCE      Maximum value for reduce actions
*/
#ifndef INTERFACE
# define INTERFACE 1
#endif
/************* Begin control #defines *****************************************/
#define YYCODETYPE unsigned char
#define YYNOCODE 119
#define YYACTIONTYPE unsigned short int
#define ParseTOKENTYPE  token_value_t 
typedef union {
  int yyinit;
  ParseTOKENTYPE yy0;
  std::vector<param_t>* yy49;
  init_decl_t yy51;
  std::vector<init_decl_t>* yy53;
  int yy60;
  decl_specif_t yy67;
  expr_t* yy91;
  param_t yy99;
  func_decl_t yy133;
} YYMINORTYPE;
#ifndef YYSTACKDEPTH
#define YYSTACKDEPTH 100
#endif
#define ParseARG_SDECL
#define ParseARG_PDECL
#define ParseARG_PARAM
#define ParseARG_FETCH
#define ParseARG_STORE
#define ParseCTX_SDECL
#define ParseCTX_PDECL
#define ParseCTX_PARAM
#define ParseCTX_FETCH
#define ParseCTX_STORE
#define YYNSTATE             123
#define YYNRULE              133
#define YYNRULE_WITH_ACTION  29
#define YYNTOKEN             72
#define YY_MAX_SHIFT         122
#define YY_MIN_SHIFTREDUCE   224
#define YY_MAX_SHIFTREDUCE   356
#define YY_ERROR_ACTION      357
#define YY_ACCEPT_ACTION     358
#define YY_NO_ACTION         359
#define YY_MIN_REDUCE        360
#define YY_MAX_REDUCE        492
/************* End control #defines *******************************************/
#define YY_NLOOKAHEAD ((int)(sizeof(yy_lookahead)/sizeof(yy_lookahead[0])))

/* Define the yytestcase() macro to be a no-op if is not already defined
** otherwise.
**
** Applications can choose to define yytestcase() in the %include section
** to a macro that can assist in verifying code coverage.  For production
** code the yytestcase() macro should be turned off.  But it is useful
** for testing.
*/
#ifndef yytestcase
# define yytestcase(X)
#endif


/* Next are the tables used to determine what action to take based on the
** current state and lookahead token.  These tables are used to implement
** functions that take a state number and lookahead value and return an
** action integer.
**
** Suppose the action integer is N.  Then the action is determined as
** follows
**
**   0 <= N <= YY_MAX_SHIFT             Shift N.  That is, push the lookahead
**                                      token onto the stack and goto state N.
**
**   N between YY_MIN_SHIFTREDUCE       Shift to an arbitrary state then
**     and YY_MAX_SHIFTREDUCE           reduce by rule N-YY_MIN_SHIFTREDUCE.
**
**   N == YY_ERROR_ACTION               A syntax error has occurred.
**
**   N == YY_ACCEPT_ACTION              The parser accepts its input.
**
**   N == YY_NO_ACTION                  No such action.  Denotes unused
**                                      slots in the yy_action[] table.
**
**   N between YY_MIN_REDUCE            Reduce by rule N-YY_MIN_REDUCE
**     and YY_MAX_REDUCE
**
** The action table is constructed as a single large table named yy_action[].
** Given state S and lookahead X, the action is computed as either:
**
**    (A)   N = yy_action[ yy_shift_ofst[S] + X ]
**    (B)   N = yy_default[S]
**
** The (A) formula is preferred.  The B formula is used instead if
** yy_lookahead[yy_shift_ofst[S]+X] is not equal to X.
**
** The formulas above are for computing the action when the lookahead is
** a terminal symbol.  If the lookahead is a non-terminal (as occurs after
** a reduce action) then the yy_reduce_ofst[] array is used in place of
** the yy_shift_ofst[] array.
**
** The following are the tables generated in this section:
**
**  yy_action[]        A single table containing all actions.
**  yy_lookahead[]     A table containing the lookahead for each entry in
**                     yy_action.  Used to detect hash collisions.
**  yy_shift_ofst[]    For each state, the offset into yy_action for
**                     shifting terminals.
**  yy_reduce_ofst[]   For each state, the offset into yy_action for
**                     shifting non-terminals after a reduce.
**  yy_default[]       Default action for each state.
**
*********** Begin parsing tables **********************************************/
#define YY_ACTTAB_COUNT (1551)
static const YYACTIONTYPE yy_action[] = {
 /*     0 */    29,  225,  226,  110,  227,  242,   48,  366,  271,  272,
 /*    10 */   270,  388,   65,  269,   46,   45,  273,  242,   70,  274,
 /*    20 */   376,   70,   57,   56,   73,   53,   73,   65,   73,   95,
 /*    30 */    94,   69,   87,  120,  119,  117,  115,   85,  442,  490,
 /*    40 */    55,   64,  377,  122,  368,  235,  236,  237,  238,  239,
 /*    50 */   490,  490,   63,  109,  380,  103,  107,    7,  100,   99,
 /*    60 */    18,  102,   14,   54,  366,   70,    1,  332,   70,  338,
 /*    70 */     4,  403,   53,   80,   70,   30,   27,   70,  228,   80,
 /*    80 */    62,   53,   73,   30,   73,   95,   94,   69,   87,  120,
 /*    90 */   119,  117,  115,   85,   80,   30,    2,   31,    2,    2,
 /*   100 */     2,    2,    2,    2,    2,    2,    2,  225,  226,  110,
 /*   110 */   227,   61,  366,    1,  271,  272,  270,  459,  382,  269,
 /*   120 */    30,  352,  273,  256,   70,  274,   30,   70,   57,   56,
 /*   130 */    73,   53,   73,   58,   73,   95,   94,   69,   87,  120,
 /*   140 */   119,  117,  113,   64,  377,  383,   55,   52,   51,   50,
 /*   150 */    32,  235,  236,  237,  238,  239,  350,   30,  339,  109,
 /*   160 */   349,  103,  107,    7,  100,   99,   18,  102,   14,   54,
 /*   170 */   366,   70,    1,  333,   70,  338,    6,  401,   53,   80,
 /*   180 */    70,   30,  101,   70,  104,   80,   62,   53,   73,   30,
 /*   190 */    73,   95,   94,   69,   87,  120,  119,  117,  115,   85,
 /*   200 */    80,   12,  471,   24,  471,  471,  471,  471,  471,  471,
 /*   210 */   471,   70,  471,  348,   70,    8,   21,   73,   53,   73,
 /*   220 */    30,   73,   95,   94,   69,   87,  120,  119,  114,   80,
 /*   230 */    70,   42,   41,   70,   10,   80,   62,   53,   73,   30,
 /*   240 */    73,   95,   94,   69,   87,  120,  119,  117,  115,   85,
 /*   250 */    80,   40,   39,  343,  482,  482,  482,  482,  482,  482,
 /*   260 */   482,  105,   80,   70,   38,   37,   70,   11,   80,   62,
 /*   270 */    53,   73,   22,   73,   95,   94,   69,   87,  120,  119,
 /*   280 */   117,  115,   85,   80,   44,   43,    9,  483,  483,  483,
 /*   290 */   483,  483,  483,  483,  250,   80,   70,   59,  229,   70,
 /*   300 */   249,   80,   62,   53,   73,   60,   73,   95,   94,   69,
 /*   310 */    87,  120,  119,  117,  115,   85,   80,   23,   33,   49,
 /*   320 */   480,  480,  480,  480,  480,  480,  480,   80,   70,   34,
 /*   330 */    35,   70,  258,   80,   62,   53,   73,   28,   73,   95,
 /*   340 */    94,   69,   87,  120,  119,  117,  115,   85,   80,   36,
 /*   350 */   268,   27,  481,  481,  481,  481,  481,  481,  481,   80,
 /*   360 */    70,  359,  359,   70,  359,   80,   62,   53,   73,  359,
 /*   370 */    73,   95,   94,   69,   87,  120,  119,  117,  115,   85,
 /*   380 */    80,  359,  359,  359,  106,  106,  106,  106,  106,  106,
 /*   390 */   106,   80,   70,  359,  359,   70,  359,   80,   62,   53,
 /*   400 */    73,  359,   73,   95,   94,   69,   87,  120,  119,  117,
 /*   410 */   115,   85,   80,  359,  359,  359,  478,  478,  478,  478,
 /*   420 */   478,  478,  478,   80,   70,  359,  359,   70,  359,   80,
 /*   430 */    62,   53,   73,  359,   73,   95,   94,   69,   87,  120,
 /*   440 */   119,  117,  115,   85,   80,  359,  359,  359,  477,  477,
 /*   450 */   477,  477,  477,  477,  477,   80,   70,  359,  359,   70,
 /*   460 */   359,   80,   62,   53,   73,  359,   73,   95,   94,   69,
 /*   470 */    87,  120,  119,  117,  115,   85,   80,  359,  359,  359,
 /*   480 */   108,  108,  108,  108,  108,  108,  108,   80,   70,  359,
 /*   490 */   359,   70,  359,   80,   62,   53,   73,  359,   73,   95,
 /*   500 */    94,   69,   87,  120,  119,  117,  115,   85,   80,  359,
 /*   510 */   359,  359,  467,  467,  467,  467,  467,  467,  467,  225,
 /*   520 */   226,  110,  227,  359,  359,  359,  271,  272,  270,  359,
 /*   530 */   359,  269,  359,  359,  273,  359,   70,  274,  359,   70,
 /*   540 */    57,   56,   73,   53,   73,  359,   73,   95,   94,   69,
 /*   550 */    87,  120,  116,   70,  359,  359,   70,  359,   55,   73,
 /*   560 */    53,   73,  359,   73,   95,   94,   69,   87,  118,  359,
 /*   570 */   359,  109,  359,  103,  107,    7,  100,   99,   18,  102,
 /*   580 */    14,   54,  366,   70,    1,  359,   70,  338,  389,  400,
 /*   590 */    53,   80,   70,  359,  359,   70,  359,   80,   62,   53,
 /*   600 */    73,  359,   73,   95,   94,   69,   87,  120,  119,  117,
 /*   610 */   115,   85,   80,  359,   15,   70,  359,  359,   70,   16,
 /*   620 */   359,   73,   53,   73,  359,   73,   95,   94,   69,   86,
 /*   630 */   359,   66,  366,  235,  236,  237,  238,  239,  359,  359,
 /*   640 */   359,   97,   70,  359,  359,   70,  359,   97,   62,   53,
 /*   650 */    73,  121,   73,   95,   94,   69,   87,  120,  119,  117,
 /*   660 */   115,   85,   97,   70,   66,  366,   70,  359,  359,   71,
 /*   670 */    53,   71,  359,   71,   97,   70,  359,  359,   70,  359,
 /*   680 */    97,   62,   53,   73,  112,   73,   95,   94,   69,   87,
 /*   690 */   120,  119,  117,  115,   85,   97,  225,  226,  224,  227,
 /*   700 */   359,  359,  359,  271,  272,  270,  359,  359,  269,  359,
 /*   710 */   359,  273,  359,  359,  274,  359,   70,   57,   56,   70,
 /*   720 */   309,  359,   73,   53,   73,  359,   73,   95,   94,   67,
 /*   730 */    64,  377,   82,  367,   98,   55,  359,  387,  359,  359,
 /*   740 */   235,  236,  237,  238,  239,  310,  311,  312,  313,  314,
 /*   750 */   315,  316,  317,  318,  319,  359,  359,   14,  359,  225,
 /*   760 */   226,  224,  227,  390,  338,  359,  271,  272,  270,  359,
 /*   770 */   359,  269,  359,  359,  273,  359,   70,  274,  359,   70,
 /*   780 */    57,   56,   73,   53,   73,  359,   73,   95,   94,   68,
 /*   790 */   359,   64,  377,  122,  367,   98,  359,  359,   55,  359,
 /*   800 */   259,  260,  359,  235,  236,  237,  238,  239,  235,  236,
 /*   810 */   237,  238,  239,  359,  359,  359,  359,  359,   80,   70,
 /*   820 */    14,  359,   70,  359,   80,   62,   53,   73,  359,   73,
 /*   830 */    95,   94,   69,   87,  120,  119,  117,  115,   85,   80,
 /*   840 */    20,  359,   26,   80,   70,  359,   17,   70,  359,   80,
 /*   850 */    62,   53,   73,  359,   73,   95,   94,   69,   87,  120,
 /*   860 */   119,  117,  115,   85,   80,  359,   70,  359,  359,   70,
 /*   870 */   359,   19,   73,   53,   73,  359,   73,   95,   88,  359,
 /*   880 */   359,   74,   70,  359,  359,   70,  359,   74,   62,   53,
 /*   890 */    73,  359,   73,   95,   94,   69,   87,  120,  119,  117,
 /*   900 */   115,   85,   74,   75,   70,  359,  359,   70,  359,   75,
 /*   910 */    62,   53,   73,  359,   73,   95,   94,   69,   87,  120,
 /*   920 */   119,  117,  115,   85,   75,  359,   76,   70,  359,  359,
 /*   930 */    70,  359,   76,   62,   53,   73,  359,   73,   95,   94,
 /*   940 */    69,   87,  120,  119,  117,  115,   85,   76,   70,  359,
 /*   950 */   359,   70,   83,   83,   62,   53,   73,  359,   73,   95,
 /*   960 */    94,   69,   87,  120,  119,  117,  115,   85,   83,  359,
 /*   970 */    77,   70,  359,  359,   70,  359,   77,   62,   53,   73,
 /*   980 */   359,   73,   95,   94,   69,   87,  120,  119,  117,  115,
 /*   990 */    85,   77,   78,   70,  359,  359,   70,  359,   78,   62,
 /*  1000 */    53,   73,  359,   73,   95,   94,   69,   87,  120,  119,
 /*  1010 */   117,  115,   85,   78,  359,   79,   70,  359,  359,   70,
 /*  1020 */   359,   79,   62,   53,   73,  359,   73,   95,   94,   69,
 /*  1030 */    87,  120,  119,  117,  115,   85,   79,   84,   70,  359,
 /*  1040 */   359,   70,  359,   84,   62,   53,   73,  359,   73,   95,
 /*  1050 */    94,   69,   87,  120,  119,  117,  115,   85,   84,   97,
 /*  1060 */    70,  359,  359,   70,  359,   97,   62,   53,   73,  359,
 /*  1070 */    73,   95,   94,   69,   87,  120,  119,  117,  115,   85,
 /*  1080 */    97,   96,   70,  359,  359,   70,  359,   96,   62,   53,
 /*  1090 */    73,  359,   73,   95,   94,   69,   87,  120,  119,  117,
 /*  1100 */   115,   85,   96,   70,  359,  359,   70,  359,  370,   62,
 /*  1110 */    53,   73,  359,   73,   95,   94,   69,   87,  120,  119,
 /*  1120 */   117,  115,   85,  370,  359,   70,  370,  359,   70,  359,
 /*  1130 */   398,   62,   53,   73,  359,   73,   95,   94,   69,   87,
 /*  1140 */   120,  119,  117,  115,   85,  398,  359,   70,  359,  359,
 /*  1150 */    70,  359,  444,   62,   53,   73,  359,   73,   95,   94,
 /*  1160 */    69,   87,  120,  119,  117,  115,   85,  444,  359,   70,
 /*  1170 */   359,  359,   70,  359,  457,   62,   53,   73,  359,   73,
 /*  1180 */    95,   94,   69,   87,  120,  119,  117,  115,   85,  457,
 /*  1190 */   225,  226,  224,  227,   48,  366,  359,  271,  272,  270,
 /*  1200 */   359,  359,  269,  359,  359,  273,  358,   47,  274,  359,
 /*  1210 */   359,   57,   56,  225,  226,  224,  227,  359,  359,  359,
 /*  1220 */   271,  272,  270,  359,  359,  269,  359,   47,  273,   55,
 /*  1230 */   359,  274,  359,  359,   57,   56,  359,  359,   47,   47,
 /*  1240 */    63,  359,  359,  359,  235,  236,  237,  238,  239,  359,
 /*  1250 */   359,   14,   55,   70,  359,  359,   70,  359,  338,   73,
 /*  1260 */    53,   73,  248,   73,   95,   89,  359,  359,  359,  359,
 /*  1270 */   359,  359,  359,  359,   14,    3,  225,  226,  224,  227,
 /*  1280 */   359,  359,  359,  271,  272,  270,  359,  359,  269,  359,
 /*  1290 */   359,  273,  359,  359,  274,  359,  359,   57,   56,  225,
 /*  1300 */   226,  224,  227,  359,  359,  359,  271,  272,  270,  359,
 /*  1310 */   359,  269,  359,  359,  273,   55,  359,  274,  359,   70,
 /*  1320 */    57,   56,   70,  359,  359,   73,   53,   73,  359,   73,
 /*  1330 */    95,   90,  359,  359,   61,  366,  359,   14,   55,  359,
 /*  1340 */    70,  381,   81,   70,  351,  359,   73,   53,   73,  111,
 /*  1350 */    73,   95,   91,  235,  236,  237,  238,  239,  359,  359,
 /*  1360 */    14,    5,  225,  226,  224,  227,  359,  359,  359,  271,
 /*  1370 */   272,  270,  359,  359,  269,  359,  359,  273,  359,  359,
 /*  1380 */   274,  359,   70,   57,   56,   70,  359,  359,   73,   53,
 /*  1390 */    73,  359,   73,   92,  359,  359,  359,  359,  359,   70,
 /*  1400 */   359,   55,   70,  359,  359,   73,   53,   73,  359,   73,
 /*  1410 */    93,   70,  359,  359,   70,  359,  359,   72,   53,   72,
 /*  1420 */   359,   72,  359,   14,  257,  225,  226,  224,  227,  359,
 /*  1430 */   359,  359,  271,  272,  270,  359,  359,  269,  359,  359,
 /*  1440 */   273,  359,  359,  274,  359,  359,   57,   56,  225,  226,
 /*  1450 */   224,  227,  359,  359,  359,  271,  272,  270,  359,  359,
 /*  1460 */   269,  359,  359,  273,   55,  359,  274,  359,   70,   57,
 /*  1470 */    56,   70,  359,  359,  412,   53,  412,   70,  359,  359,
 /*  1480 */    70,  359,  359,  416,   53,  416,   14,   55,  359,  225,
 /*  1490 */   226,  224,  227,  359,  359,  359,  271,  272,  270,  359,
 /*  1500 */   359,  269,  359,  359,  273,  359,  359,  274,  359,   13,
 /*  1510 */    57,   56,   70,  359,  359,   70,  359,  359,  415,   53,
 /*  1520 */   415,  359,  359,  359,   70,  359,  359,   70,   55,  359,
 /*  1530 */   414,   53,  414,   70,  359,  359,   70,  359,  359,  402,
 /*  1540 */    53,  402,  359,  359,  359,  359,  359,  359,  359,  359,
 /*  1550 */    25,
};
static const YYCODETYPE yy_lookahead[] = {
 /*     0 */   104,    1,    2,    3,    4,    3,   72,   73,    8,    9,
 /*    10 */    10,  109,   10,   13,    8,    9,   16,    3,   83,   19,
 /*    20 */    75,   86,   22,   23,   89,   90,   91,   10,   93,   94,
 /*    30 */    95,   96,   97,   98,   99,  100,  101,  102,  103,  105,
 /*    40 */    40,   74,   75,   76,   77,   45,   46,   47,   48,   49,
 /*    50 */   116,  117,  118,   53,   74,   55,   56,   57,   58,   59,
 /*    60 */    60,   61,   62,   72,   73,   83,   66,   67,   86,   69,
 /*    70 */    63,   89,   90,   82,   83,   68,    5,   86,   63,   88,
 /*    80 */    89,   90,   91,   68,   93,   94,   95,   96,   97,   98,
 /*    90 */    99,  100,  101,  102,  103,   68,  105,   70,  107,  108,
 /*   100 */   109,  110,  111,  112,  113,  114,  115,    1,    2,    3,
 /*   110 */     4,   72,   73,   66,    8,    9,   10,   74,   79,   13,
 /*   120 */    68,   69,   16,   65,   83,   19,   68,   86,   22,   23,
 /*   130 */    89,   90,   91,   62,   93,   94,   95,   96,   97,   98,
 /*   140 */    99,  100,  101,   74,   75,   76,   40,   10,   11,   12,
 /*   150 */    18,   45,   46,   47,   48,   49,   69,   68,   69,   53,
 /*   160 */    69,   55,   56,   57,   58,   59,   60,   61,   62,   72,
 /*   170 */    73,   83,   66,   67,   86,   69,   63,   89,   90,   82,
 /*   180 */    83,   68,    3,   86,   63,   88,   89,   90,   91,   68,
 /*   190 */    93,   94,   95,   96,   97,   98,   99,  100,  101,  102,
 /*   200 */   103,   62,  105,   71,  107,  108,  109,  110,  111,  112,
 /*   210 */   113,   83,  115,   69,   86,   63,   62,   89,   90,   91,
 /*   220 */    68,   93,   94,   95,   96,   97,   98,   99,  100,   82,
 /*   230 */    83,    6,    7,   86,   63,   88,   89,   90,   91,   68,
 /*   240 */    93,   94,   95,   96,   97,   98,   99,  100,  101,  102,
 /*   250 */   103,   26,   27,   69,  107,  108,  109,  110,  111,  112,
 /*   260 */   113,   56,   82,   83,   28,   29,   86,   70,   88,   89,
 /*   270 */    90,   91,   62,   93,   94,   95,   96,   97,   98,   99,
 /*   280 */   100,  101,  102,  103,   24,   25,   54,  107,  108,  109,
 /*   290 */   110,  111,  112,  113,   63,   82,   83,   68,   69,   86,
 /*   300 */    63,   88,   89,   90,   91,   68,   93,   94,   95,   96,
 /*   310 */    97,   98,   99,  100,  101,  102,  103,   62,   17,   63,
 /*   320 */   107,  108,  109,  110,  111,  112,  113,   82,   83,   15,
 /*   330 */    14,   86,   63,   88,   89,   90,   91,   68,   93,   94,
 /*   340 */    95,   96,   97,   98,   99,  100,  101,  102,  103,   13,
 /*   350 */    63,    5,  107,  108,  109,  110,  111,  112,  113,   82,
 /*   360 */    83,  119,  119,   86,  119,   88,   89,   90,   91,  119,
 /*   370 */    93,   94,   95,   96,   97,   98,   99,  100,  101,  102,
 /*   380 */   103,  119,  119,  119,  107,  108,  109,  110,  111,  112,
 /*   390 */   113,   82,   83,  119,  119,   86,  119,   88,   89,   90,
 /*   400 */    91,  119,   93,   94,   95,   96,   97,   98,   99,  100,
 /*   410 */   101,  102,  103,  119,  119,  119,  107,  108,  109,  110,
 /*   420 */   111,  112,  113,   82,   83,  119,  119,   86,  119,   88,
 /*   430 */    89,   90,   91,  119,   93,   94,   95,   96,   97,   98,
 /*   440 */    99,  100,  101,  102,  103,  119,  119,  119,  107,  108,
 /*   450 */   109,  110,  111,  112,  113,   82,   83,  119,  119,   86,
 /*   460 */   119,   88,   89,   90,   91,  119,   93,   94,   95,   96,
 /*   470 */    97,   98,   99,  100,  101,  102,  103,  119,  119,  119,
 /*   480 */   107,  108,  109,  110,  111,  112,  113,   82,   83,  119,
 /*   490 */   119,   86,  119,   88,   89,   90,   91,  119,   93,   94,
 /*   500 */    95,   96,   97,   98,   99,  100,  101,  102,  103,  119,
 /*   510 */   119,  119,  107,  108,  109,  110,  111,  112,  113,    1,
 /*   520 */     2,    3,    4,  119,  119,  119,    8,    9,   10,  119,
 /*   530 */   119,   13,  119,  119,   16,  119,   83,   19,  119,   86,
 /*   540 */    22,   23,   89,   90,   91,  119,   93,   94,   95,   96,
 /*   550 */    97,   98,   99,   83,  119,  119,   86,  119,   40,   89,
 /*   560 */    90,   91,  119,   93,   94,   95,   96,   97,   98,  119,
 /*   570 */   119,   53,  119,   55,   56,   57,   58,   59,   60,   61,
 /*   580 */    62,   72,   73,   83,   66,  119,   86,   69,    0,   89,
 /*   590 */    90,   82,   83,  119,  119,   86,  119,   88,   89,   90,
 /*   600 */    91,  119,   93,   94,   95,   96,   97,   98,   99,  100,
 /*   610 */   101,  102,  103,  119,  105,   83,  119,  119,   86,  110,
 /*   620 */   119,   89,   90,   91,  119,   93,   94,   95,   96,   97,
 /*   630 */   119,   72,   73,   45,   46,   47,   48,   49,  119,  119,
 /*   640 */   119,   82,   83,  119,  119,   86,  119,   88,   89,   90,
 /*   650 */    91,   92,   93,   94,   95,   96,   97,   98,   99,  100,
 /*   660 */   101,  102,  103,   83,   72,   73,   86,  119,  119,   89,
 /*   670 */    90,   91,  119,   93,   82,   83,  119,  119,   86,  119,
 /*   680 */    88,   89,   90,   91,   92,   93,   94,   95,   96,   97,
 /*   690 */    98,   99,  100,  101,  102,  103,    1,    2,    3,    4,
 /*   700 */   119,  119,  119,    8,    9,   10,  119,  119,   13,  119,
 /*   710 */   119,   16,  119,  119,   19,  119,   83,   22,   23,   86,
 /*   720 */     5,  119,   89,   90,   91,  119,   93,   94,   95,   96,
 /*   730 */    74,   75,   76,   77,   78,   40,  119,   81,  119,  119,
 /*   740 */    45,   46,   47,   48,   49,   30,   31,   32,   33,   34,
 /*   750 */    35,   36,   37,   38,   39,  119,  119,   62,  119,    1,
 /*   760 */     2,    3,    4,    0,   69,  119,    8,    9,   10,  119,
 /*   770 */   119,   13,  119,  119,   16,  119,   83,   19,  119,   86,
 /*   780 */    22,   23,   89,   90,   91,  119,   93,   94,   95,   96,
 /*   790 */   119,   74,   75,   76,   77,   78,  119,  119,   40,  119,
 /*   800 */    22,   23,  119,   45,   46,   47,   48,   49,   45,   46,
 /*   810 */    47,   48,   49,  119,  119,  119,  119,  119,   82,   83,
 /*   820 */    62,  119,   86,  119,   88,   89,   90,   91,  119,   93,
 /*   830 */    94,   95,   96,   97,   98,   99,  100,  101,  102,  103,
 /*   840 */    62,  119,   64,   82,   83,  119,  110,   86,  119,   88,
 /*   850 */    89,   90,   91,  119,   93,   94,   95,   96,   97,   98,
 /*   860 */    99,  100,  101,  102,  103,  119,   83,  119,  119,   86,
 /*   870 */   119,  110,   89,   90,   91,  119,   93,   94,   95,  119,
 /*   880 */   119,   82,   83,  119,  119,   86,  119,   88,   89,   90,
 /*   890 */    91,  119,   93,   94,   95,   96,   97,   98,   99,  100,
 /*   900 */   101,  102,  103,   82,   83,  119,  119,   86,  119,   88,
 /*   910 */    89,   90,   91,  119,   93,   94,   95,   96,   97,   98,
 /*   920 */    99,  100,  101,  102,  103,  119,   82,   83,  119,  119,
 /*   930 */    86,  119,   88,   89,   90,   91,  119,   93,   94,   95,
 /*   940 */    96,   97,   98,   99,  100,  101,  102,  103,   83,  119,
 /*   950 */   119,   86,   87,   88,   89,   90,   91,  119,   93,   94,
 /*   960 */    95,   96,   97,   98,   99,  100,  101,  102,  103,  119,
 /*   970 */    82,   83,  119,  119,   86,  119,   88,   89,   90,   91,
 /*   980 */   119,   93,   94,   95,   96,   97,   98,   99,  100,  101,
 /*   990 */   102,  103,   82,   83,  119,  119,   86,  119,   88,   89,
 /*  1000 */    90,   91,  119,   93,   94,   95,   96,   97,   98,   99,
 /*  1010 */   100,  101,  102,  103,  119,   82,   83,  119,  119,   86,
 /*  1020 */   119,   88,   89,   90,   91,  119,   93,   94,   95,   96,
 /*  1030 */    97,   98,   99,  100,  101,  102,  103,   82,   83,  119,
 /*  1040 */   119,   86,  119,   88,   89,   90,   91,  119,   93,   94,
 /*  1050 */    95,   96,   97,   98,   99,  100,  101,  102,  103,   82,
 /*  1060 */    83,  119,  119,   86,  119,   88,   89,   90,   91,  119,
 /*  1070 */    93,   94,   95,   96,   97,   98,   99,  100,  101,  102,
 /*  1080 */   103,   82,   83,  119,  119,   86,  119,   88,   89,   90,
 /*  1090 */    91,  119,   93,   94,   95,   96,   97,   98,   99,  100,
 /*  1100 */   101,  102,  103,   83,  119,  119,   86,  119,   88,   89,
 /*  1110 */    90,   91,  119,   93,   94,   95,   96,   97,   98,   99,
 /*  1120 */   100,  101,  102,  103,  119,   83,  106,  119,   86,  119,
 /*  1130 */    88,   89,   90,   91,  119,   93,   94,   95,   96,   97,
 /*  1140 */    98,   99,  100,  101,  102,  103,  119,   83,  119,  119,
 /*  1150 */    86,  119,   88,   89,   90,   91,  119,   93,   94,   95,
 /*  1160 */    96,   97,   98,   99,  100,  101,  102,  103,  119,   83,
 /*  1170 */   119,  119,   86,  119,   88,   89,   90,   91,  119,   93,
 /*  1180 */    94,   95,   96,   97,   98,   99,  100,  101,  102,  103,
 /*  1190 */     1,    2,    3,    4,   72,   73,  119,    8,    9,   10,
 /*  1200 */   119,  119,   13,  119,  119,   16,   84,   85,   19,  119,
 /*  1210 */   119,   22,   23,    1,    2,    3,    4,  119,  119,  119,
 /*  1220 */     8,    9,   10,  119,  119,   13,  119,  105,   16,   40,
 /*  1230 */   119,   19,  119,  119,   22,   23,  119,  119,  116,  117,
 /*  1240 */   118,  119,  119,  119,   45,   46,   47,   48,   49,  119,
 /*  1250 */   119,   62,   40,   83,  119,  119,   86,  119,   69,   89,
 /*  1260 */    90,   91,   63,   93,   94,   95,  119,  119,  119,  119,
 /*  1270 */   119,  119,  119,  119,   62,   63,    1,    2,    3,    4,
 /*  1280 */   119,  119,  119,    8,    9,   10,  119,  119,   13,  119,
 /*  1290 */   119,   16,  119,  119,   19,  119,  119,   22,   23,    1,
 /*  1300 */     2,    3,    4,  119,  119,  119,    8,    9,   10,  119,
 /*  1310 */   119,   13,  119,  119,   16,   40,  119,   19,  119,   83,
 /*  1320 */    22,   23,   86,  119,  119,   89,   90,   91,  119,   93,
 /*  1330 */    94,   95,  119,  119,   72,   73,  119,   62,   40,  119,
 /*  1340 */    83,   79,   80,   86,   69,  119,   89,   90,   91,   41,
 /*  1350 */    93,   94,   95,   45,   46,   47,   48,   49,  119,  119,
 /*  1360 */    62,   63,    1,    2,    3,    4,  119,  119,  119,    8,
 /*  1370 */     9,   10,  119,  119,   13,  119,  119,   16,  119,  119,
 /*  1380 */    19,  119,   83,   22,   23,   86,  119,  119,   89,   90,
 /*  1390 */    91,  119,   93,   94,  119,  119,  119,  119,  119,   83,
 /*  1400 */   119,   40,   86,  119,  119,   89,   90,   91,  119,   93,
 /*  1410 */    94,   83,  119,  119,   86,  119,  119,   89,   90,   91,
 /*  1420 */   119,   93,  119,   62,   63,    1,    2,    3,    4,  119,
 /*  1430 */   119,  119,    8,    9,   10,  119,  119,   13,  119,  119,
 /*  1440 */    16,  119,  119,   19,  119,  119,   22,   23,    1,    2,
 /*  1450 */     3,    4,  119,  119,  119,    8,    9,   10,  119,  119,
 /*  1460 */    13,  119,  119,   16,   40,  119,   19,  119,   83,   22,
 /*  1470 */    23,   86,  119,  119,   89,   90,   91,   83,  119,  119,
 /*  1480 */    86,  119,  119,   89,   90,   91,   62,   40,  119,    1,
 /*  1490 */     2,    3,    4,  119,  119,  119,    8,    9,   10,  119,
 /*  1500 */   119,   13,  119,  119,   16,  119,  119,   19,  119,   62,
 /*  1510 */    22,   23,   83,  119,  119,   86,  119,  119,   89,   90,
 /*  1520 */    91,  119,  119,  119,   83,  119,  119,   86,   40,  119,
 /*  1530 */    89,   90,   91,   83,  119,  119,   86,  119,  119,   89,
 /*  1540 */    90,   91,  119,  119,  119,  119,  119,  119,  119,  119,
 /*  1550 */    62,  119,  119,  119,  119,  119,  119,  119,  119,  119,
 /*  1560 */   119,  119,   72,   72,   72,   72,   72,   72,   72,   72,
 /*  1570 */    72,   72,   72,   72,   72,   72,   72,   72,   72,   72,
 /*  1580 */    72,   72,   72,   72,   72,   72,   72,   72,   72,   72,
 /*  1590 */    72,   72,   72,   72,   72,   72,   72,   72,   72,   72,
 /*  1600 */    72,   72,   72,   72,   72,   72,   72,   72,   72,   72,
 /*  1610 */    72,   72,   72,   72,   72,   72,   72,   72,   72,   72,
 /*  1620 */    72,   72,   72,
};
#define YY_SHIFT_COUNT    (122)
#define YY_SHIFT_MIN      (0)
#define YY_SHIFT_MAX      (1488)
static const unsigned short int yy_shift_ofst[] = {
 /*     0 */   588,    0,  106,  518,  518,  518,  518,  518,  518,  518,
 /*    10 */   518,  518,  695,  758,  758, 1189, 1189, 1212, 1275, 1298,
 /*    20 */  1361, 1424, 1424, 1424, 1424, 1424, 1424, 1424, 1424, 1424,
 /*    30 */  1424, 1424, 1424, 1424, 1424, 1424, 1424, 1424, 1424, 1424,
 /*    40 */  1424, 1424, 1424, 1424, 1424, 1424, 1424,  763,    2, 1424,
 /*    50 */  1424, 1424, 1424, 1424,    2, 1447, 1488, 1488, 1199,    2,
 /*    60 */  1308,    2,  715,   47,   14,   17,   17,  225,  225,  225,
 /*    70 */   778,  137,  137,  137,    7,   52,  113,  121,  152,  171,
 /*    80 */    89,  237,   71,  269,   27,  132,  236,  236,  260,  260,
 /*    90 */   260,  260,    6,    6,  260,    6,   58,   15,  229,   87,
 /*   100 */    91,  144,  179,  139,  184,  154,  205,  210,  232,  255,
 /*   110 */   197,  231,  256,  301,  314,  301,  316,  314,  336,  316,
 /*   120 */   336,  287,  346,
};
#define YY_REDUCE_COUNT (66)
#define YY_REDUCE_MIN   (-104)
#define YY_REDUCE_MAX   (1450)
static const short yy_reduce_ofst[] = {
 /*     0 */  1122,   -9,   97,  147,  180,  213,  245,  277,  309,  341,
 /*    10 */   373,  405,  509,  559,  592,  736,  761,  799,  821,  844,
 /*    20 */   865,  888,  910,  933,  955,  977,  999, 1020, 1042, 1064,
 /*    30 */  1086,  -65,   41,  128,  453,  470,  532,  633,  693,  783,
 /*    40 */  1170, 1236, 1257, 1299, 1316,  580, 1328,  -66,  656, 1385,
 /*    50 */  1394, 1429, 1441, 1450,  717,  -18,   88,  500, 1262,  -33,
 /*    60 */    39,   69, -104,  -98,  -55,  -20,   43,
};
static const YYACTIONTYPE yy_default[] = {
 /*     0 */   357,  357,  357,  357,  357,  357,  357,  357,  357,  357,
 /*    10 */   357,  357,  357,  357,  357,  357,  357,  357,  357,  357,
 /*    20 */   357,  357,  357,  357,  357,  357,  357,  357,  357,  357,
 /*    30 */   357,  357,  357,  357,  357,  357,  357,  357,  357,  357,
 /*    40 */   357,  357,  357,  357,  357,  357,  357,  357,  357,  357,
 /*    50 */   357,  357,  357,  357,  357,  357,  357,  357,  357,  357,
 /*    60 */   357,  357,  411,  357,  357,  379,  458,  430,  429,  428,
 /*    70 */   399,  419,  418,  417,  357,  357,  357,  357,  357,  357,
 /*    80 */   357,  357,  369,  357,  357,  441,  432,  431,  427,  426,
 /*    90 */   425,  424,  422,  421,  423,  420,  357,  357,  357,  357,
 /*   100 */   357,  357,  357,  357,  357,  357,  357,  357,  476,  357,
 /*   110 */   360,  357,  357,  440,  438,  439,  436,  437,  434,  435,
 /*   120 */   433,  357,  369,
};
/********** End of lemon-generated parsing tables *****************************/

/* The next table maps tokens (terminal symbols) into fallback tokens.
** If a construct like the following:
**
**      %fallback ID X Y Z.
**
** appears in the grammar, then ID becomes a fallback token for X, Y,
** and Z.  Whenever one of the tokens X, Y, or Z is input to the parser
** but it does not parse, the type of the token is changed to ID and
** the parse is retried before an error is thrown.
**
** This feature can be used, for example, to cause some keywords in a language
** to revert to identifiers if they keyword does not apply in the context where
** it appears.
*/
#ifdef YYFALLBACK
static const YYCODETYPE yyFallback[] = {
};
#endif /* YYFALLBACK */

/* The following structure represents a single element of the
** parser's stack.  Information stored includes:
**
**   +  The state number for the parser at this level of the stack.
**
**   +  The value of the token stored at this level of the stack.
**      (In other words, the "major" token.)
**
**   +  The semantic value stored at this level of the stack.  This is
**      the information used by the action routines in the grammar.
**      It is sometimes called the "minor" token.
**
** After the "shift" half of a SHIFTREDUCE action, the stateno field
** actually contains the reduce action for the second half of the
** SHIFTREDUCE.
*/
struct yyStackEntry {
  YYACTIONTYPE stateno;  /* The state-number, or reduce action in SHIFTREDUCE */
  YYCODETYPE major;      /* The major token value.  This is the code
                         ** number for the token at this stack level */
  YYMINORTYPE minor;     /* The user-supplied minor token value.  This
                         ** is the value of the token  */
};
typedef struct yyStackEntry yyStackEntry;

/* The state of the parser is completely contained in an instance of
** the following structure */
struct yyParser {
  yyStackEntry *yytos;          /* Pointer to top element of the stack */
#ifdef YYTRACKMAXSTACKDEPTH
  int yyhwm;                    /* High-water mark of the stack */
#endif
#ifndef YYNOERRORRECOVERY
  int yyerrcnt;                 /* Shifts left before out of the error */
#endif
  ParseARG_SDECL                /* A place to hold %extra_argument */
  ParseCTX_SDECL                /* A place to hold %extra_context */
#if YYSTACKDEPTH<=0
  int yystksz;                  /* Current side of the stack */
  yyStackEntry *yystack;        /* The parser's stack */
  yyStackEntry yystk0;          /* First stack entry */
#else
  yyStackEntry yystack[YYSTACKDEPTH];  /* The parser's stack */
  yyStackEntry *yystackEnd;            /* Last entry in the stack */
#endif
};
typedef struct yyParser yyParser;

#include <assert.h>
#ifndef NDEBUG
#include <stdio.h>
static FILE *yyTraceFILE = 0;
static char *yyTracePrompt = 0;
#endif /* NDEBUG */

#ifndef NDEBUG
/*
** Turn parser tracing on by giving a stream to which to write the trace
** and a prompt to preface each trace message.  Tracing is turned off
** by making either argument NULL
**
** Inputs:
** <ul>
** <li> A FILE* to which trace output should be written.
**      If NULL, then tracing is turned off.
** <li> A prefix string written at the beginning of every
**      line of trace output.  If NULL, then tracing is
**      turned off.
** </ul>
**
** Outputs:
** None.
*/
void ParseTrace(FILE *TraceFILE, char *zTracePrompt){
  yyTraceFILE = TraceFILE;
  yyTracePrompt = zTracePrompt;
  if( yyTraceFILE==0 ) yyTracePrompt = 0;
  else if( yyTracePrompt==0 ) yyTraceFILE = 0;
}
#endif /* NDEBUG */

#if defined(YYCOVERAGE) || !defined(NDEBUG)
/* For tracing shifts, the names of all terminals and nonterminals
** are required.  The following table supplies these names */
static const char *const yyTokenName[] = {
  /*    0 */ "$",
  /*    1 */ "NUM",
  /*    2 */ "DEC",
  /*    3 */ "ID",
  /*    4 */ "STR",
  /*    5 */ "ASGN_OP",
  /*    6 */ "LT_OP",
  /*    7 */ "GT_OP",
  /*    8 */ "ADD_OP",
  /*    9 */ "SUB_OP",
  /*   10 */ "MUL_OP",
  /*   11 */ "DIV_OP",
  /*   12 */ "MOD_OP",
  /*   13 */ "AND_OP",
  /*   14 */ "OR_OP",
  /*   15 */ "XOR_OP",
  /*   16 */ "NOT_OP",
  /*   17 */ "LOGAND",
  /*   18 */ "LOGOR",
  /*   19 */ "LOGNOT",
  /*   20 */ "DOT_OP",
  /*   21 */ "PTR_OP",
  /*   22 */ "INC_OP",
  /*   23 */ "DEC_OP",
  /*   24 */ "SHL_OP",
  /*   25 */ "SHR_OP",
  /*   26 */ "LE_OP",
  /*   27 */ "GE_OP",
  /*   28 */ "EQ_OP",
  /*   29 */ "NE_OP",
  /*   30 */ "MULASGN",
  /*   31 */ "DIVASGN",
  /*   32 */ "MODASGN",
  /*   33 */ "ADDASGN",
  /*   34 */ "SUBASGN",
  /*   35 */ "SHLASGN",
  /*   36 */ "SHRASGN",
  /*   37 */ "ANDASGN",
  /*   38 */ "XORASGN",
  /*   39 */ "ORASGN",
  /*   40 */ "SIZEOF",
  /*   41 */ "ELLIPSIS",
  /*   42 */ "TYPEDEF",
  /*   43 */ "STATIC",
  /*   44 */ "CONST",
  /*   45 */ "VOID",
  /*   46 */ "CHAR",
  /*   47 */ "SHORT",
  /*   48 */ "INT",
  /*   49 */ "LONG",
  /*   50 */ "FLOAT",
  /*   51 */ "DOUBLE",
  /*   52 */ "TYPE",
  /*   53 */ "IF",
  /*   54 */ "ELSE",
  /*   55 */ "FOR",
  /*   56 */ "WHILE",
  /*   57 */ "DO",
  /*   58 */ "CONTINUE",
  /*   59 */ "BREAK",
  /*   60 */ "RETURN",
  /*   61 */ "GOTO",
  /*   62 */ "LP",
  /*   63 */ "RP",
  /*   64 */ "LS",
  /*   65 */ "RS",
  /*   66 */ "LB",
  /*   67 */ "RB",
  /*   68 */ "COM",
  /*   69 */ "SEM",
  /*   70 */ "COL",
  /*   71 */ "QUE",
  /*   72 */ "declaration_specifiers",
  /*   73 */ "type_specifier",
  /*   74 */ "pointer",
  /*   75 */ "direct_declarator",
  /*   76 */ "declarator",
  /*   77 */ "init_declarator",
  /*   78 */ "init_declarator_list",
  /*   79 */ "parameter_declaration",
  /*   80 */ "parameter_list",
  /*   81 */ "function_declarator",
  /*   82 */ "expression",
  /*   83 */ "primary_expression",
  /*   84 */ "start",
  /*   85 */ "translation_unit",
  /*   86 */ "postfix_expression",
  /*   87 */ "argument_expression_list",
  /*   88 */ "assignment_expression",
  /*   89 */ "unary_expression",
  /*   90 */ "unary_operator",
  /*   91 */ "cast_expression",
  /*   92 */ "type_name",
  /*   93 */ "multiplicative_expression",
  /*   94 */ "additive_expression",
  /*   95 */ "shift_expression",
  /*   96 */ "relational_expression",
  /*   97 */ "equality_expression",
  /*   98 */ "and_expression",
  /*   99 */ "exclusive_or_expression",
  /*  100 */ "inclusive_or_expression",
  /*  101 */ "logical_and_expression",
  /*  102 */ "logical_or_expression",
  /*  103 */ "conditional_expression",
  /*  104 */ "assignment_operator",
  /*  105 */ "variable_declaration",
  /*  106 */ "initializer",
  /*  107 */ "statement",
  /*  108 */ "labeled_statement",
  /*  109 */ "compound_statement",
  /*  110 */ "expression_statement",
  /*  111 */ "selection_statement",
  /*  112 */ "iteration_statement",
  /*  113 */ "jump_statement",
  /*  114 */ "block_item_list",
  /*  115 */ "block_item",
  /*  116 */ "external_declaration",
  /*  117 */ "function_definition",
  /*  118 */ "function_signature",
};
#endif /* defined(YYCOVERAGE) || !defined(NDEBUG) */

#ifndef NDEBUG
/* For tracing reduce actions, the names of all rules are required.
*/
static const char *const yyRuleName[] = {
 /*   0 */ "primary_expression ::= ID",
 /*   1 */ "primary_expression ::= NUM",
 /*   2 */ "primary_expression ::= DEC",
 /*   3 */ "primary_expression ::= STR",
 /*   4 */ "primary_expression ::= LP expression RP",
 /*   5 */ "variable_declaration ::= declaration_specifiers init_declarator_list SEM",
 /*   6 */ "declaration_specifiers ::= type_specifier",
 /*   7 */ "init_declarator_list ::= init_declarator",
 /*   8 */ "init_declarator_list ::= init_declarator_list COM init_declarator",
 /*   9 */ "init_declarator ::= declarator",
 /*  10 */ "init_declarator ::= declarator ASGN_OP initializer",
 /*  11 */ "type_specifier ::= VOID",
 /*  12 */ "type_specifier ::= CHAR",
 /*  13 */ "type_specifier ::= SHORT",
 /*  14 */ "type_specifier ::= INT",
 /*  15 */ "type_specifier ::= LONG",
 /*  16 */ "declarator ::= pointer direct_declarator",
 /*  17 */ "declarator ::= direct_declarator",
 /*  18 */ "direct_declarator ::= ID",
 /*  19 */ "pointer ::= MUL_OP",
 /*  20 */ "pointer ::= MUL_OP pointer",
 /*  21 */ "parameter_list ::= parameter_declaration",
 /*  22 */ "parameter_list ::= parameter_list COM parameter_declaration",
 /*  23 */ "parameter_declaration ::= declaration_specifiers declarator",
 /*  24 */ "function_declarator ::= declarator LP RP",
 /*  25 */ "function_declarator ::= declarator LP parameter_list RP",
 /*  26 */ "function_declarator ::= declarator LP parameter_list COM ELLIPSIS RP",
 /*  27 */ "function_signature ::= declaration_specifiers function_declarator",
 /*  28 */ "function_definition ::= function_signature compound_statement",
 /*  29 */ "start ::=",
 /*  30 */ "start ::= translation_unit",
 /*  31 */ "postfix_expression ::= primary_expression",
 /*  32 */ "postfix_expression ::= postfix_expression LS expression RS",
 /*  33 */ "postfix_expression ::= postfix_expression LP RP",
 /*  34 */ "postfix_expression ::= postfix_expression LP argument_expression_list RP",
 /*  35 */ "postfix_expression ::= postfix_expression INC_OP",
 /*  36 */ "postfix_expression ::= postfix_expression DEC_OP",
 /*  37 */ "argument_expression_list ::= assignment_expression",
 /*  38 */ "argument_expression_list ::= argument_expression_list COM assignment_expression",
 /*  39 */ "unary_expression ::= postfix_expression",
 /*  40 */ "unary_expression ::= INC_OP unary_expression",
 /*  41 */ "unary_expression ::= DEC_OP unary_expression",
 /*  42 */ "unary_expression ::= unary_operator cast_expression",
 /*  43 */ "unary_expression ::= SIZEOF unary_expression",
 /*  44 */ "unary_expression ::= SIZEOF LP type_name RP",
 /*  45 */ "unary_operator ::= AND_OP",
 /*  46 */ "unary_operator ::= MUL_OP",
 /*  47 */ "unary_operator ::= ADD_OP",
 /*  48 */ "unary_operator ::= SUB_OP",
 /*  49 */ "unary_operator ::= NOT_OP",
 /*  50 */ "unary_operator ::= LOGNOT",
 /*  51 */ "cast_expression ::= unary_expression",
 /*  52 */ "cast_expression ::= LP type_name RP cast_expression",
 /*  53 */ "multiplicative_expression ::= cast_expression",
 /*  54 */ "multiplicative_expression ::= multiplicative_expression MUL_OP cast_expression",
 /*  55 */ "multiplicative_expression ::= multiplicative_expression DIV_OP cast_expression",
 /*  56 */ "multiplicative_expression ::= multiplicative_expression MOD_OP cast_expression",
 /*  57 */ "additive_expression ::= multiplicative_expression",
 /*  58 */ "additive_expression ::= additive_expression ADD_OP multiplicative_expression",
 /*  59 */ "additive_expression ::= additive_expression SUB_OP multiplicative_expression",
 /*  60 */ "shift_expression ::= additive_expression",
 /*  61 */ "shift_expression ::= shift_expression SHL_OP additive_expression",
 /*  62 */ "shift_expression ::= shift_expression SHR_OP additive_expression",
 /*  63 */ "relational_expression ::= shift_expression",
 /*  64 */ "relational_expression ::= relational_expression LT_OP shift_expression",
 /*  65 */ "relational_expression ::= relational_expression GT_OP shift_expression",
 /*  66 */ "relational_expression ::= relational_expression LE_OP shift_expression",
 /*  67 */ "relational_expression ::= relational_expression GE_OP shift_expression",
 /*  68 */ "equality_expression ::= relational_expression",
 /*  69 */ "equality_expression ::= equality_expression EQ_OP relational_expression",
 /*  70 */ "equality_expression ::= equality_expression NE_OP relational_expression",
 /*  71 */ "and_expression ::= equality_expression",
 /*  72 */ "and_expression ::= and_expression AND_OP equality_expression",
 /*  73 */ "exclusive_or_expression ::= and_expression",
 /*  74 */ "exclusive_or_expression ::= exclusive_or_expression OR_OP and_expression",
 /*  75 */ "inclusive_or_expression ::= exclusive_or_expression",
 /*  76 */ "inclusive_or_expression ::= inclusive_or_expression XOR_OP exclusive_or_expression",
 /*  77 */ "logical_and_expression ::= inclusive_or_expression",
 /*  78 */ "logical_and_expression ::= logical_and_expression LOGAND inclusive_or_expression",
 /*  79 */ "logical_or_expression ::= logical_and_expression",
 /*  80 */ "logical_or_expression ::= logical_or_expression LOGOR logical_and_expression",
 /*  81 */ "conditional_expression ::= logical_or_expression",
 /*  82 */ "conditional_expression ::= logical_or_expression QUE expression COL conditional_expression",
 /*  83 */ "assignment_expression ::= conditional_expression",
 /*  84 */ "assignment_expression ::= unary_expression assignment_operator assignment_expression",
 /*  85 */ "assignment_operator ::= ASGN_OP",
 /*  86 */ "assignment_operator ::= MULASGN",
 /*  87 */ "assignment_operator ::= DIVASGN",
 /*  88 */ "assignment_operator ::= MODASGN",
 /*  89 */ "assignment_operator ::= ADDASGN",
 /*  90 */ "assignment_operator ::= SUBASGN",
 /*  91 */ "assignment_operator ::= SHLASGN",
 /*  92 */ "assignment_operator ::= SHRASGN",
 /*  93 */ "assignment_operator ::= ANDASGN",
 /*  94 */ "assignment_operator ::= XORASGN",
 /*  95 */ "assignment_operator ::= ORASGN",
 /*  96 */ "expression ::= assignment_expression",
 /*  97 */ "expression ::= expression COM assignment_expression",
 /*  98 */ "type_name ::= declaration_specifiers",
 /*  99 */ "type_name ::= declaration_specifiers pointer",
 /* 100 */ "initializer ::= assignment_expression",
 /* 101 */ "statement ::= labeled_statement",
 /* 102 */ "statement ::= compound_statement",
 /* 103 */ "statement ::= expression_statement",
 /* 104 */ "statement ::= selection_statement",
 /* 105 */ "statement ::= iteration_statement",
 /* 106 */ "statement ::= jump_statement",
 /* 107 */ "labeled_statement ::= ID COL statement",
 /* 108 */ "compound_statement ::= LB RB",
 /* 109 */ "compound_statement ::= LB block_item_list RB",
 /* 110 */ "block_item_list ::= block_item",
 /* 111 */ "block_item_list ::= block_item_list block_item",
 /* 112 */ "block_item ::= variable_declaration",
 /* 113 */ "block_item ::= statement",
 /* 114 */ "expression_statement ::= SEM",
 /* 115 */ "expression_statement ::= expression SEM",
 /* 116 */ "selection_statement ::= IF LP expression RP statement",
 /* 117 */ "selection_statement ::= IF LP expression RP statement ELSE statement",
 /* 118 */ "iteration_statement ::= WHILE LP expression RP statement",
 /* 119 */ "iteration_statement ::= DO statement WHILE LP expression RP SEM",
 /* 120 */ "iteration_statement ::= FOR LP expression_statement expression_statement RP statement",
 /* 121 */ "iteration_statement ::= FOR LP expression_statement expression_statement expression RP statement",
 /* 122 */ "iteration_statement ::= FOR LP variable_declaration expression_statement RP statement",
 /* 123 */ "iteration_statement ::= FOR LP variable_declaration expression_statement expression RP statement",
 /* 124 */ "jump_statement ::= GOTO ID SEM",
 /* 125 */ "jump_statement ::= CONTINUE SEM",
 /* 126 */ "jump_statement ::= BREAK SEM",
 /* 127 */ "jump_statement ::= RETURN SEM",
 /* 128 */ "jump_statement ::= RETURN expression SEM",
 /* 129 */ "translation_unit ::= external_declaration",
 /* 130 */ "translation_unit ::= translation_unit external_declaration",
 /* 131 */ "external_declaration ::= variable_declaration",
 /* 132 */ "external_declaration ::= function_definition",
};
#endif /* NDEBUG */


#if YYSTACKDEPTH<=0
/*
** Try to increase the size of the parser stack.  Return the number
** of errors.  Return 0 on success.
*/
static int yyGrowStack(yyParser *p){
  int newSize;
  int idx;
  yyStackEntry *pNew;

  newSize = p->yystksz*2 + 100;
  idx = p->yytos ? (int)(p->yytos - p->yystack) : 0;
  if( p->yystack==&p->yystk0 ){
    pNew = malloc(newSize*sizeof(pNew[0]));
    if( pNew ) pNew[0] = p->yystk0;
  }else{
    pNew = realloc(p->yystack, newSize*sizeof(pNew[0]));
  }
  if( pNew ){
    p->yystack = pNew;
    p->yytos = &p->yystack[idx];
#ifndef NDEBUG
    if( yyTraceFILE ){
      fprintf(yyTraceFILE,"%sStack grows from %d to %d entries.\n",
              yyTracePrompt, p->yystksz, newSize);
    }
#endif
    p->yystksz = newSize;
  }
  return pNew==0;
}
#endif

/* Datatype of the argument to the memory allocated passed as the
** second argument to ParseAlloc() below.  This can be changed by
** putting an appropriate #define in the %include section of the input
** grammar.
*/
#ifndef YYMALLOCARGTYPE
# define YYMALLOCARGTYPE size_t
#endif

/* Initialize a new parser that has already been allocated.
*/
void ParseInit(void *yypRawParser ParseCTX_PDECL){
  yyParser *yypParser = (yyParser*)yypRawParser;
  ParseCTX_STORE
#ifdef YYTRACKMAXSTACKDEPTH
  yypParser->yyhwm = 0;
#endif
#if YYSTACKDEPTH<=0
  yypParser->yytos = NULL;
  yypParser->yystack = NULL;
  yypParser->yystksz = 0;
  if( yyGrowStack(yypParser) ){
    yypParser->yystack = &yypParser->yystk0;
    yypParser->yystksz = 1;
  }
#endif
#ifndef YYNOERRORRECOVERY
  yypParser->yyerrcnt = -1;
#endif
  yypParser->yytos = yypParser->yystack;
  yypParser->yystack[0].stateno = 0;
  yypParser->yystack[0].major = 0;
#if YYSTACKDEPTH>0
  yypParser->yystackEnd = &yypParser->yystack[YYSTACKDEPTH-1];
#endif
}

#ifndef Parse_ENGINEALWAYSONSTACK
/*
** This function allocates a new parser.
** The only argument is a pointer to a function which works like
** malloc.
**
** Inputs:
** A pointer to the function used to allocate memory.
**
** Outputs:
** A pointer to a parser.  This pointer is used in subsequent calls
** to Parse and ParseFree.
*/
void *ParseAlloc(void *(*mallocProc)(YYMALLOCARGTYPE) ParseCTX_PDECL){
  yyParser *yypParser;
  yypParser = (yyParser*)(*mallocProc)( (YYMALLOCARGTYPE)sizeof(yyParser) );
  if( yypParser ){
    ParseCTX_STORE
    ParseInit(yypParser ParseCTX_PARAM);
  }
  return (void*)yypParser;
}
#endif /* Parse_ENGINEALWAYSONSTACK */


/* The following function deletes the "minor type" or semantic value
** associated with a symbol.  The symbol can be either a terminal
** or nonterminal. "yymajor" is the symbol code, and "yypminor" is
** a pointer to the value to be deleted.  The code used to do the
** deletions is derived from the %destructor and/or %token_destructor
** directives of the input grammar.
*/
static void yy_destructor(
  yyParser *yypParser,    /* The parser */
  YYCODETYPE yymajor,     /* Type code for object to destroy */
  YYMINORTYPE *yypminor   /* The object to be destroyed */
){
  ParseARG_FETCH
  ParseCTX_FETCH
  switch( yymajor ){
    /* Here is inserted the actions which take place when a
    ** terminal or non-terminal is destroyed.  This can happen
    ** when the symbol is popped from the stack during a
    ** reduce or during error processing or when a parser is
    ** being destroyed before it is finished parsing.
    **
    ** Note: during a reduce, the only symbols destroyed are those
    ** which appear on the RHS of the rule, but which are *not* used
    ** inside the C code.
    */
/********* Begin destructor definitions ***************************************/
    case 78: /* init_declarator_list */
{
#line 90 "src\\parser.y"
 delete (yypminor->yy53); 
#line 1187 "src\\parser.c"
}
      break;
    case 80: /* parameter_list */
{
#line 91 "src\\parser.y"
 delete (yypminor->yy49); 
#line 1194 "src\\parser.c"
}
      break;
/********* End destructor definitions *****************************************/
    default:  break;   /* If no destructor action specified: do nothing */
  }
}

/*
** Pop the parser's stack once.
**
** If there is a destructor routine associated with the token which
** is popped from the stack, then call it.
*/
static void yy_pop_parser_stack(yyParser *pParser){
  yyStackEntry *yytos;
  assert( pParser->yytos!=0 );
  assert( pParser->yytos > pParser->yystack );
  yytos = pParser->yytos--;
#ifndef NDEBUG
  if( yyTraceFILE ){
    fprintf(yyTraceFILE,"%sPopping %s\n",
      yyTracePrompt,
      yyTokenName[yytos->major]);
  }
#endif
  yy_destructor(pParser, yytos->major, &yytos->minor);
}

/*
** Clear all secondary memory allocations from the parser
*/
void ParseFinalize(void *p){
  yyParser *pParser = (yyParser*)p;
  while( pParser->yytos>pParser->yystack ) yy_pop_parser_stack(pParser);
#if YYSTACKDEPTH<=0
  if( pParser->yystack!=&pParser->yystk0 ) free(pParser->yystack);
#endif
}

#ifndef Parse_ENGINEALWAYSONSTACK
/*
** Deallocate and destroy a parser.  Destructors are called for
** all stack elements before shutting the parser down.
**
** If the YYPARSEFREENEVERNULL macro exists (for example because it
** is defined in a %include section of the input grammar) then it is
** assumed that the input pointer is never NULL.
*/
void ParseFree(
  void *p,                    /* The parser to be deleted */
  void (*freeProc)(void*)     /* Function used to reclaim memory */
){
#ifndef YYPARSEFREENEVERNULL
  if( p==0 ) return;
#endif
  ParseFinalize(p);
  (*freeProc)(p);
}
#endif /* Parse_ENGINEALWAYSONSTACK */

/*
** Return the peak depth of the stack for a parser.
*/
#ifdef YYTRACKMAXSTACKDEPTH
int ParseStackPeak(void *p){
  yyParser *pParser = (yyParser*)p;
  return pParser->yyhwm;
}
#endif

/* This array of booleans keeps track of the parser statement
** coverage.  The element yycoverage[X][Y] is set when the parser
** is in state X and has a lookahead token Y.  In a well-tested
** systems, every element of this matrix should end up being set.
*/
#if defined(YYCOVERAGE)
static unsigned char yycoverage[YYNSTATE][YYNTOKEN];
#endif

/*
** Write into out a description of every state/lookahead combination that
**
**   (1)  has not been used by the parser, and
**   (2)  is not a syntax error.
**
** Return the number of missed state/lookahead combinations.
*/
#if defined(YYCOVERAGE)
int ParseCoverage(FILE *out){
  int stateno, iLookAhead, i;
  int nMissed = 0;
  for(stateno=0; stateno<YYNSTATE; stateno++){
    i = yy_shift_ofst[stateno];
    for(iLookAhead=0; iLookAhead<YYNTOKEN; iLookAhead++){
      if( yy_lookahead[i+iLookAhead]!=iLookAhead ) continue;
      if( yycoverage[stateno][iLookAhead]==0 ) nMissed++;
      if( out ){
        fprintf(out,"State %d lookahead %s %s\n", stateno,
                yyTokenName[iLookAhead],
                yycoverage[stateno][iLookAhead] ? "ok" : "missed");
      }
    }
  }
  return nMissed;
}
#endif

/*
** Find the appropriate action for a parser given the terminal
** look-ahead token iLookAhead.
*/
static YYACTIONTYPE yy_find_shift_action(
  YYCODETYPE iLookAhead,    /* The look-ahead token */
  YYACTIONTYPE stateno      /* Current state number */
){
  int i;

  if( stateno>YY_MAX_SHIFT ) return stateno;
  assert( stateno <= YY_SHIFT_COUNT );
#if defined(YYCOVERAGE)
  yycoverage[stateno][iLookAhead] = 1;
#endif
  do{
    i = yy_shift_ofst[stateno];
    assert( i>=0 );
    assert( i<=YY_ACTTAB_COUNT );
    assert( i+YYNTOKEN<=(int)YY_NLOOKAHEAD );
    assert( iLookAhead!=YYNOCODE );
    assert( iLookAhead < YYNTOKEN );
    i += iLookAhead;
    assert( i<(int)YY_NLOOKAHEAD );
    if( yy_lookahead[i]!=iLookAhead ){
#ifdef YYFALLBACK
      YYCODETYPE iFallback;            /* Fallback token */
      assert( iLookAhead<sizeof(yyFallback)/sizeof(yyFallback[0]) );
      iFallback = yyFallback[iLookAhead];
      if( iFallback!=0 ){
#ifndef NDEBUG
        if( yyTraceFILE ){
          fprintf(yyTraceFILE, "%sFALLBACK %s => %s\n",
             yyTracePrompt, yyTokenName[iLookAhead], yyTokenName[iFallback]);
        }
#endif
        assert( yyFallback[iFallback]==0 ); /* Fallback loop must terminate */
        iLookAhead = iFallback;
        continue;
      }
#endif
#ifdef YYWILDCARD
      {
        int j = i - iLookAhead + YYWILDCARD;
        assert( j<(int)(sizeof(yy_lookahead)/sizeof(yy_lookahead[0])) );
        if( yy_lookahead[j]==YYWILDCARD && iLookAhead>0 ){
#ifndef NDEBUG
          if( yyTraceFILE ){
            fprintf(yyTraceFILE, "%sWILDCARD %s => %s\n",
               yyTracePrompt, yyTokenName[iLookAhead],
               yyTokenName[YYWILDCARD]);
          }
#endif /* NDEBUG */
          return yy_action[j];
        }
      }
#endif /* YYWILDCARD */
      return yy_default[stateno];
    }else{
      assert( i>=0 && i<(int)(sizeof(yy_action)/sizeof(yy_action[0])) );
      return yy_action[i];
    }
  }while(1);
}

/*
** Find the appropriate action for a parser given the non-terminal
** look-ahead token iLookAhead.
*/
static YYACTIONTYPE yy_find_reduce_action(
  YYACTIONTYPE stateno,     /* Current state number */
  YYCODETYPE iLookAhead     /* The look-ahead token */
){
  int i;
#ifdef YYERRORSYMBOL
  if( stateno>YY_REDUCE_COUNT ){
    return yy_default[stateno];
  }
#else
  assert( stateno<=YY_REDUCE_COUNT );
#endif
  i = yy_reduce_ofst[stateno];
  assert( iLookAhead!=YYNOCODE );
  i += iLookAhead;
#ifdef YYERRORSYMBOL
  if( i<0 || i>=YY_ACTTAB_COUNT || yy_lookahead[i]!=iLookAhead ){
    return yy_default[stateno];
  }
#else
  assert( i>=0 && i<YY_ACTTAB_COUNT );
  assert( yy_lookahead[i]==iLookAhead );
#endif
  return yy_action[i];
}

/*
** The following routine is called if the stack overflows.
*/
static void yyStackOverflow(yyParser *yypParser){
   ParseARG_FETCH
   ParseCTX_FETCH
#ifndef NDEBUG
   if( yyTraceFILE ){
     fprintf(yyTraceFILE,"%sStack Overflow!\n",yyTracePrompt);
   }
#endif
   while( yypParser->yytos>yypParser->yystack ) yy_pop_parser_stack(yypParser);
   /* Here code is inserted which will execute if the parser
   ** stack every overflows */
/******** Begin %stack_overflow code ******************************************/
/******** End %stack_overflow code ********************************************/
   ParseARG_STORE /* Suppress warning about unused %extra_argument var */
   ParseCTX_STORE
}

/*
** Print tracing information for a SHIFT action
*/
#ifndef NDEBUG
static void yyTraceShift(yyParser *yypParser, int yyNewState, const char *zTag){
  if( yyTraceFILE ){
    if( yyNewState<YYNSTATE ){
      fprintf(yyTraceFILE,"%s%s '%s', go to state %d\n",
         yyTracePrompt, zTag, yyTokenName[yypParser->yytos->major],
         yyNewState);
    }else{
      fprintf(yyTraceFILE,"%s%s '%s', pending reduce %d\n",
         yyTracePrompt, zTag, yyTokenName[yypParser->yytos->major],
         yyNewState - YY_MIN_REDUCE);
    }
  }
}
#else
# define yyTraceShift(X,Y,Z)
#endif

/*
** Perform a shift action.
*/
static void yy_shift(
  yyParser *yypParser,          /* The parser to be shifted */
  YYACTIONTYPE yyNewState,      /* The new state to shift in */
  YYCODETYPE yyMajor,           /* The major token to shift in */
  ParseTOKENTYPE yyMinor        /* The minor token to shift in */
){
  yyStackEntry *yytos;
  yypParser->yytos++;
#ifdef YYTRACKMAXSTACKDEPTH
  if( (int)(yypParser->yytos - yypParser->yystack)>yypParser->yyhwm ){
    yypParser->yyhwm++;
    assert( yypParser->yyhwm == (int)(yypParser->yytos - yypParser->yystack) );
  }
#endif
#if YYSTACKDEPTH>0
  if( yypParser->yytos>yypParser->yystackEnd ){
    yypParser->yytos--;
    yyStackOverflow(yypParser);
    return;
  }
#else
  if( yypParser->yytos>=&yypParser->yystack[yypParser->yystksz] ){
    if( yyGrowStack(yypParser) ){
      yypParser->yytos--;
      yyStackOverflow(yypParser);
      return;
    }
  }
#endif
  if( yyNewState > YY_MAX_SHIFT ){
    yyNewState += YY_MIN_REDUCE - YY_MIN_SHIFTREDUCE;
  }
  yytos = yypParser->yytos;
  yytos->stateno = yyNewState;
  yytos->major = yyMajor;
  yytos->minor.yy0 = yyMinor;
  yyTraceShift(yypParser, yyNewState, "Shift");
}

/* For rule J, yyRuleInfoLhs[J] contains the symbol on the left-hand side
** of that rule */
static const YYCODETYPE yyRuleInfoLhs[] = {
    83,  /* (0) primary_expression ::= ID */
    83,  /* (1) primary_expression ::= NUM */
    83,  /* (2) primary_expression ::= DEC */
    83,  /* (3) primary_expression ::= STR */
    83,  /* (4) primary_expression ::= LP expression RP */
   105,  /* (5) variable_declaration ::= declaration_specifiers init_declarator_list SEM */
    72,  /* (6) declaration_specifiers ::= type_specifier */
    78,  /* (7) init_declarator_list ::= init_declarator */
    78,  /* (8) init_declarator_list ::= init_declarator_list COM init_declarator */
    77,  /* (9) init_declarator ::= declarator */
    77,  /* (10) init_declarator ::= declarator ASGN_OP initializer */
    73,  /* (11) type_specifier ::= VOID */
    73,  /* (12) type_specifier ::= CHAR */
    73,  /* (13) type_specifier ::= SHORT */
    73,  /* (14) type_specifier ::= INT */
    73,  /* (15) type_specifier ::= LONG */
    76,  /* (16) declarator ::= pointer direct_declarator */
    76,  /* (17) declarator ::= direct_declarator */
    75,  /* (18) direct_declarator ::= ID */
    74,  /* (19) pointer ::= MUL_OP */
    74,  /* (20) pointer ::= MUL_OP pointer */
    80,  /* (21) parameter_list ::= parameter_declaration */
    80,  /* (22) parameter_list ::= parameter_list COM parameter_declaration */
    79,  /* (23) parameter_declaration ::= declaration_specifiers declarator */
    81,  /* (24) function_declarator ::= declarator LP RP */
    81,  /* (25) function_declarator ::= declarator LP parameter_list RP */
    81,  /* (26) function_declarator ::= declarator LP parameter_list COM ELLIPSIS RP */
   118,  /* (27) function_signature ::= declaration_specifiers function_declarator */
   117,  /* (28) function_definition ::= function_signature compound_statement */
    84,  /* (29) start ::= */
    84,  /* (30) start ::= translation_unit */
    86,  /* (31) postfix_expression ::= primary_expression */
    86,  /* (32) postfix_expression ::= postfix_expression LS expression RS */
    86,  /* (33) postfix_expression ::= postfix_expression LP RP */
    86,  /* (34) postfix_expression ::= postfix_expression LP argument_expression_list RP */
    86,  /* (35) postfix_expression ::= postfix_expression INC_OP */
    86,  /* (36) postfix_expression ::= postfix_expression DEC_OP */
    87,  /* (37) argument_expression_list ::= assignment_expression */
    87,  /* (38) argument_expression_list ::= argument_expression_list COM assignment_expression */
    89,  /* (39) unary_expression ::= postfix_expression */
    89,  /* (40) unary_expression ::= INC_OP unary_expression */
    89,  /* (41) unary_expression ::= DEC_OP unary_expression */
    89,  /* (42) unary_expression ::= unary_operator cast_expression */
    89,  /* (43) unary_expression ::= SIZEOF unary_expression */
    89,  /* (44) unary_expression ::= SIZEOF LP type_name RP */
    90,  /* (45) unary_operator ::= AND_OP */
    90,  /* (46) unary_operator ::= MUL_OP */
    90,  /* (47) unary_operator ::= ADD_OP */
    90,  /* (48) unary_operator ::= SUB_OP */
    90,  /* (49) unary_operator ::= NOT_OP */
    90,  /* (50) unary_operator ::= LOGNOT */
    91,  /* (51) cast_expression ::= unary_expression */
    91,  /* (52) cast_expression ::= LP type_name RP cast_expression */
    93,  /* (53) multiplicative_expression ::= cast_expression */
    93,  /* (54) multiplicative_expression ::= multiplicative_expression MUL_OP cast_expression */
    93,  /* (55) multiplicative_expression ::= multiplicative_expression DIV_OP cast_expression */
    93,  /* (56) multiplicative_expression ::= multiplicative_expression MOD_OP cast_expression */
    94,  /* (57) additive_expression ::= multiplicative_expression */
    94,  /* (58) additive_expression ::= additive_expression ADD_OP multiplicative_expression */
    94,  /* (59) additive_expression ::= additive_expression SUB_OP multiplicative_expression */
    95,  /* (60) shift_expression ::= additive_expression */
    95,  /* (61) shift_expression ::= shift_expression SHL_OP additive_expression */
    95,  /* (62) shift_expression ::= shift_expression SHR_OP additive_expression */
    96,  /* (63) relational_expression ::= shift_expression */
    96,  /* (64) relational_expression ::= relational_expression LT_OP shift_expression */
    96,  /* (65) relational_expression ::= relational_expression GT_OP shift_expression */
    96,  /* (66) relational_expression ::= relational_expression LE_OP shift_expression */
    96,  /* (67) relational_expression ::= relational_expression GE_OP shift_expression */
    97,  /* (68) equality_expression ::= relational_expression */
    97,  /* (69) equality_expression ::= equality_expression EQ_OP relational_expression */
    97,  /* (70) equality_expression ::= equality_expression NE_OP relational_expression */
    98,  /* (71) and_expression ::= equality_expression */
    98,  /* (72) and_expression ::= and_expression AND_OP equality_expression */
    99,  /* (73) exclusive_or_expression ::= and_expression */
    99,  /* (74) exclusive_or_expression ::= exclusive_or_expression OR_OP and_expression */
   100,  /* (75) inclusive_or_expression ::= exclusive_or_expression */
   100,  /* (76) inclusive_or_expression ::= inclusive_or_expression XOR_OP exclusive_or_expression */
   101,  /* (77) logical_and_expression ::= inclusive_or_expression */
   101,  /* (78) logical_and_expression ::= logical_and_expression LOGAND inclusive_or_expression */
   102,  /* (79) logical_or_expression ::= logical_and_expression */
   102,  /* (80) logical_or_expression ::= logical_or_expression LOGOR logical_and_expression */
   103,  /* (81) conditional_expression ::= logical_or_expression */
   103,  /* (82) conditional_expression ::= logical_or_expression QUE expression COL conditional_expression */
    88,  /* (83) assignment_expression ::= conditional_expression */
    88,  /* (84) assignment_expression ::= unary_expression assignment_operator assignment_expression */
   104,  /* (85) assignment_operator ::= ASGN_OP */
   104,  /* (86) assignment_operator ::= MULASGN */
   104,  /* (87) assignment_operator ::= DIVASGN */
   104,  /* (88) assignment_operator ::= MODASGN */
   104,  /* (89) assignment_operator ::= ADDASGN */
   104,  /* (90) assignment_operator ::= SUBASGN */
   104,  /* (91) assignment_operator ::= SHLASGN */
   104,  /* (92) assignment_operator ::= SHRASGN */
   104,  /* (93) assignment_operator ::= ANDASGN */
   104,  /* (94) assignment_operator ::= XORASGN */
   104,  /* (95) assignment_operator ::= ORASGN */
    82,  /* (96) expression ::= assignment_expression */
    82,  /* (97) expression ::= expression COM assignment_expression */
    92,  /* (98) type_name ::= declaration_specifiers */
    92,  /* (99) type_name ::= declaration_specifiers pointer */
   106,  /* (100) initializer ::= assignment_expression */
   107,  /* (101) statement ::= labeled_statement */
   107,  /* (102) statement ::= compound_statement */
   107,  /* (103) statement ::= expression_statement */
   107,  /* (104) statement ::= selection_statement */
   107,  /* (105) statement ::= iteration_statement */
   107,  /* (106) statement ::= jump_statement */
   108,  /* (107) labeled_statement ::= ID COL statement */
   109,  /* (108) compound_statement ::= LB RB */
   109,  /* (109) compound_statement ::= LB block_item_list RB */
   114,  /* (110) block_item_list ::= block_item */
   114,  /* (111) block_item_list ::= block_item_list block_item */
   115,  /* (112) block_item ::= variable_declaration */
   115,  /* (113) block_item ::= statement */
   110,  /* (114) expression_statement ::= SEM */
   110,  /* (115) expression_statement ::= expression SEM */
   111,  /* (116) selection_statement ::= IF LP expression RP statement */
   111,  /* (117) selection_statement ::= IF LP expression RP statement ELSE statement */
   112,  /* (118) iteration_statement ::= WHILE LP expression RP statement */
   112,  /* (119) iteration_statement ::= DO statement WHILE LP expression RP SEM */
   112,  /* (120) iteration_statement ::= FOR LP expression_statement expression_statement RP statement */
   112,  /* (121) iteration_statement ::= FOR LP expression_statement expression_statement expression RP statement */
   112,  /* (122) iteration_statement ::= FOR LP variable_declaration expression_statement RP statement */
   112,  /* (123) iteration_statement ::= FOR LP variable_declaration expression_statement expression RP statement */
   113,  /* (124) jump_statement ::= GOTO ID SEM */
   113,  /* (125) jump_statement ::= CONTINUE SEM */
   113,  /* (126) jump_statement ::= BREAK SEM */
   113,  /* (127) jump_statement ::= RETURN SEM */
   113,  /* (128) jump_statement ::= RETURN expression SEM */
    85,  /* (129) translation_unit ::= external_declaration */
    85,  /* (130) translation_unit ::= translation_unit external_declaration */
   116,  /* (131) external_declaration ::= variable_declaration */
   116,  /* (132) external_declaration ::= function_definition */
};

/* For rule J, yyRuleInfoNRhs[J] contains the negative of the number
** of symbols on the right-hand side of that rule. */
static const signed char yyRuleInfoNRhs[] = {
   -1,  /* (0) primary_expression ::= ID */
   -1,  /* (1) primary_expression ::= NUM */
   -1,  /* (2) primary_expression ::= DEC */
   -1,  /* (3) primary_expression ::= STR */
   -3,  /* (4) primary_expression ::= LP expression RP */
   -3,  /* (5) variable_declaration ::= declaration_specifiers init_declarator_list SEM */
   -1,  /* (6) declaration_specifiers ::= type_specifier */
   -1,  /* (7) init_declarator_list ::= init_declarator */
   -3,  /* (8) init_declarator_list ::= init_declarator_list COM init_declarator */
   -1,  /* (9) init_declarator ::= declarator */
   -3,  /* (10) init_declarator ::= declarator ASGN_OP initializer */
   -1,  /* (11) type_specifier ::= VOID */
   -1,  /* (12) type_specifier ::= CHAR */
   -1,  /* (13) type_specifier ::= SHORT */
   -1,  /* (14) type_specifier ::= INT */
   -1,  /* (15) type_specifier ::= LONG */
   -2,  /* (16) declarator ::= pointer direct_declarator */
   -1,  /* (17) declarator ::= direct_declarator */
   -1,  /* (18) direct_declarator ::= ID */
   -1,  /* (19) pointer ::= MUL_OP */
   -2,  /* (20) pointer ::= MUL_OP pointer */
   -1,  /* (21) parameter_list ::= parameter_declaration */
   -3,  /* (22) parameter_list ::= parameter_list COM parameter_declaration */
   -2,  /* (23) parameter_declaration ::= declaration_specifiers declarator */
   -3,  /* (24) function_declarator ::= declarator LP RP */
   -4,  /* (25) function_declarator ::= declarator LP parameter_list RP */
   -6,  /* (26) function_declarator ::= declarator LP parameter_list COM ELLIPSIS RP */
   -2,  /* (27) function_signature ::= declaration_specifiers function_declarator */
   -2,  /* (28) function_definition ::= function_signature compound_statement */
    0,  /* (29) start ::= */
   -1,  /* (30) start ::= translation_unit */
   -1,  /* (31) postfix_expression ::= primary_expression */
   -4,  /* (32) postfix_expression ::= postfix_expression LS expression RS */
   -3,  /* (33) postfix_expression ::= postfix_expression LP RP */
   -4,  /* (34) postfix_expression ::= postfix_expression LP argument_expression_list RP */
   -2,  /* (35) postfix_expression ::= postfix_expression INC_OP */
   -2,  /* (36) postfix_expression ::= postfix_expression DEC_OP */
   -1,  /* (37) argument_expression_list ::= assignment_expression */
   -3,  /* (38) argument_expression_list ::= argument_expression_list COM assignment_expression */
   -1,  /* (39) unary_expression ::= postfix_expression */
   -2,  /* (40) unary_expression ::= INC_OP unary_expression */
   -2,  /* (41) unary_expression ::= DEC_OP unary_expression */
   -2,  /* (42) unary_expression ::= unary_operator cast_expression */
   -2,  /* (43) unary_expression ::= SIZEOF unary_expression */
   -4,  /* (44) unary_expression ::= SIZEOF LP type_name RP */
   -1,  /* (45) unary_operator ::= AND_OP */
   -1,  /* (46) unary_operator ::= MUL_OP */
   -1,  /* (47) unary_operator ::= ADD_OP */
   -1,  /* (48) unary_operator ::= SUB_OP */
   -1,  /* (49) unary_operator ::= NOT_OP */
   -1,  /* (50) unary_operator ::= LOGNOT */
   -1,  /* (51) cast_expression ::= unary_expression */
   -4,  /* (52) cast_expression ::= LP type_name RP cast_expression */
   -1,  /* (53) multiplicative_expression ::= cast_expression */
   -3,  /* (54) multiplicative_expression ::= multiplicative_expression MUL_OP cast_expression */
   -3,  /* (55) multiplicative_expression ::= multiplicative_expression DIV_OP cast_expression */
   -3,  /* (56) multiplicative_expression ::= multiplicative_expression MOD_OP cast_expression */
   -1,  /* (57) additive_expression ::= multiplicative_expression */
   -3,  /* (58) additive_expression ::= additive_expression ADD_OP multiplicative_expression */
   -3,  /* (59) additive_expression ::= additive_expression SUB_OP multiplicative_expression */
   -1,  /* (60) shift_expression ::= additive_expression */
   -3,  /* (61) shift_expression ::= shift_expression SHL_OP additive_expression */
   -3,  /* (62) shift_expression ::= shift_expression SHR_OP additive_expression */
   -1,  /* (63) relational_expression ::= shift_expression */
   -3,  /* (64) relational_expression ::= relational_expression LT_OP shift_expression */
   -3,  /* (65) relational_expression ::= relational_expression GT_OP shift_expression */
   -3,  /* (66) relational_expression ::= relational_expression LE_OP shift_expression */
   -3,  /* (67) relational_expression ::= relational_expression GE_OP shift_expression */
   -1,  /* (68) equality_expression ::= relational_expression */
   -3,  /* (69) equality_expression ::= equality_expression EQ_OP relational_expression */
   -3,  /* (70) equality_expression ::= equality_expression NE_OP relational_expression */
   -1,  /* (71) and_expression ::= equality_expression */
   -3,  /* (72) and_expression ::= and_expression AND_OP equality_expression */
   -1,  /* (73) exclusive_or_expression ::= and_expression */
   -3,  /* (74) exclusive_or_expression ::= exclusive_or_expression OR_OP and_expression */
   -1,  /* (75) inclusive_or_expression ::= exclusive_or_expression */
   -3,  /* (76) inclusive_or_expression ::= inclusive_or_expression XOR_OP exclusive_or_expression */
   -1,  /* (77) logical_and_expression ::= inclusive_or_expression */
   -3,  /* (78) logical_and_expression ::= logical_and_expression LOGAND inclusive_or_expression */
   -1,  /* (79) logical_or_expression ::= logical_and_expression */
   -3,  /* (80) logical_or_expression ::= logical_or_expression LOGOR logical_and_expression */
   -1,  /* (81) conditional_expression ::= logical_or_expression */
   -5,  /* (82) conditional_expression ::= logical_or_expression QUE expression COL conditional_expression */
   -1,  /* (83) assignment_expression ::= conditional_expression */
   -3,  /* (84) assignment_expression ::= unary_expression assignment_operator assignment_expression */
   -1,  /* (85) assignment_operator ::= ASGN_OP */
   -1,  /* (86) assignment_operator ::= MULASGN */
   -1,  /* (87) assignment_operator ::= DIVASGN */
   -1,  /* (88) assignment_operator ::= MODASGN */
   -1,  /* (89) assignment_operator ::= ADDASGN */
   -1,  /* (90) assignment_operator ::= SUBASGN */
   -1,  /* (91) assignment_operator ::= SHLASGN */
   -1,  /* (92) assignment_operator ::= SHRASGN */
   -1,  /* (93) assignment_operator ::= ANDASGN */
   -1,  /* (94) assignment_operator ::= XORASGN */
   -1,  /* (95) assignment_operator ::= ORASGN */
   -1,  /* (96) expression ::= assignment_expression */
   -3,  /* (97) expression ::= expression COM assignment_expression */
   -1,  /* (98) type_name ::= declaration_specifiers */
   -2,  /* (99) type_name ::= declaration_specifiers pointer */
   -1,  /* (100) initializer ::= assignment_expression */
   -1,  /* (101) statement ::= labeled_statement */
   -1,  /* (102) statement ::= compound_statement */
   -1,  /* (103) statement ::= expression_statement */
   -1,  /* (104) statement ::= selection_statement */
   -1,  /* (105) statement ::= iteration_statement */
   -1,  /* (106) statement ::= jump_statement */
   -3,  /* (107) labeled_statement ::= ID COL statement */
   -2,  /* (108) compound_statement ::= LB RB */
   -3,  /* (109) compound_statement ::= LB block_item_list RB */
   -1,  /* (110) block_item_list ::= block_item */
   -2,  /* (111) block_item_list ::= block_item_list block_item */
   -1,  /* (112) block_item ::= variable_declaration */
   -1,  /* (113) block_item ::= statement */
   -1,  /* (114) expression_statement ::= SEM */
   -2,  /* (115) expression_statement ::= expression SEM */
   -5,  /* (116) selection_statement ::= IF LP expression RP statement */
   -7,  /* (117) selection_statement ::= IF LP expression RP statement ELSE statement */
   -5,  /* (118) iteration_statement ::= WHILE LP expression RP statement */
   -7,  /* (119) iteration_statement ::= DO statement WHILE LP expression RP SEM */
   -6,  /* (120) iteration_statement ::= FOR LP expression_statement expression_statement RP statement */
   -7,  /* (121) iteration_statement ::= FOR LP expression_statement expression_statement expression RP statement */
   -6,  /* (122) iteration_statement ::= FOR LP variable_declaration expression_statement RP statement */
   -7,  /* (123) iteration_statement ::= FOR LP variable_declaration expression_statement expression RP statement */
   -3,  /* (124) jump_statement ::= GOTO ID SEM */
   -2,  /* (125) jump_statement ::= CONTINUE SEM */
   -2,  /* (126) jump_statement ::= BREAK SEM */
   -2,  /* (127) jump_statement ::= RETURN SEM */
   -3,  /* (128) jump_statement ::= RETURN expression SEM */
   -1,  /* (129) translation_unit ::= external_declaration */
   -2,  /* (130) translation_unit ::= translation_unit external_declaration */
   -1,  /* (131) external_declaration ::= variable_declaration */
   -1,  /* (132) external_declaration ::= function_definition */
};

static void yy_accept(yyParser*);  /* Forward Declaration */

/*
** Perform a reduce action and the shift that must immediately
** follow the reduce.
**
** The yyLookahead and yyLookaheadToken parameters provide reduce actions
** access to the lookahead token (if any).  The yyLookahead will be YYNOCODE
** if the lookahead token has already been consumed.  As this procedure is
** only called from one place, optimizing compilers will in-line it, which
** means that the extra parameters have no performance impact.
*/
static YYACTIONTYPE yy_reduce(
  yyParser *yypParser,         /* The parser */
  unsigned int yyruleno,       /* Number of the rule by which to reduce */
  int yyLookahead,             /* Lookahead token, or YYNOCODE if none */
  ParseTOKENTYPE yyLookaheadToken  /* Value of the lookahead token */
  ParseCTX_PDECL                   /* %extra_context */
){
  int yygoto;                     /* The next state */
  YYACTIONTYPE yyact;             /* The next action */
  yyStackEntry *yymsp;            /* The top of the parser's stack */
  int yysize;                     /* Amount to pop the stack */
  ParseARG_FETCH
  (void)yyLookahead;
  (void)yyLookaheadToken;
  yymsp = yypParser->yytos;

  switch( yyruleno ){
  /* Beginning here are the reduction cases.  A typical example
  ** follows:
  **   case 0:
  **  #line <lineno> <grammarfile>
  **     { ... }           // User supplied code
  **  #line <lineno> <thisfile>
  **     break;
  */
/********** Begin reduce actions **********************************************/
        YYMINORTYPE yylhsminor;
      case 0: /* primary_expression ::= ID */
#line 99 "src\\parser.y"
{
	yylhsminor.yy91 = new expr_t;
	yylhsminor.yy91->category = CATEGORY_VARREF;
	yylhsminor.yy91->left = true;

	auto sym = lookup(yymsp[0].minor.yy0.sval);
	yylhsminor.yy91->type = sym->type;
	yylhsminor.yy91->depth = sym->depth;
	yylhsminor.yy91->varref = sym;
}
#line 1807 "src\\parser.c"
  yymsp[0].minor.yy91 = yylhsminor.yy91;
        break;
      case 1: /* primary_expression ::= NUM */
#line 109 "src\\parser.y"
{
	yylhsminor.yy91 = new expr_t;
	yylhsminor.yy91->category = CATEGORY_LITERAL;
	yylhsminor.yy91->left = false;

	yylhsminor.yy91->type = yymsp[0].minor.yy0.type;
	yylhsminor.yy91->depth = 0;
	yylhsminor.yy91->ival = yymsp[0].minor.yy0.ival;
}
#line 1821 "src\\parser.c"
  yymsp[0].minor.yy91 = yylhsminor.yy91;
        break;
      case 2: /* primary_expression ::= DEC */
#line 118 "src\\parser.y"
{
	yylhsminor.yy91 = new expr_t;
	yylhsminor.yy91->category = CATEGORY_LITERAL;
	yylhsminor.yy91->left = false;

	yylhsminor.yy91->type = yymsp[0].minor.yy0.type;
	yylhsminor.yy91->depth = 0;
	yylhsminor.yy91->fval = yymsp[0].minor.yy0.fval;
}
#line 1835 "src\\parser.c"
  yymsp[0].minor.yy91 = yylhsminor.yy91;
        break;
      case 3: /* primary_expression ::= STR */
#line 127 "src\\parser.y"
{
	yylhsminor.yy91 = new expr_t;
	yylhsminor.yy91->category = CATEGORY_LITERAL;
	yylhsminor.yy91->left = false;

	yylhsminor.yy91->type = TYPE_CHAR;
	yylhsminor.yy91->depth = 1;
	yylhsminor.yy91->sval = yymsp[0].minor.yy0.sval;
}
#line 1849 "src\\parser.c"
  yymsp[0].minor.yy91 = yylhsminor.yy91;
        break;
      case 4: /* primary_expression ::= LP expression RP */
#line 136 "src\\parser.y"
{ /*TODO*/ }
#line 1855 "src\\parser.c"
        break;
      case 5: /* variable_declaration ::= declaration_specifiers init_declarator_list SEM */
#line 224 "src\\parser.y"
{
	for (auto& idl : *yymsp[-1].minor.yy53)
	{
		sym_t* var = insert(idl.name);
		var->type = yymsp[-2].minor.yy67.type;
		var->depth = idl.depth;
		if (var->type == TYPE_VOID && var->depth == 0)
		{
			yyerror("illegal type");
		}
		
		if (var->scope == 0)
		{
			var->category = CATEGORY_GLOBAL;
			var->offset = globaloffset;
			globaloffset += get_size(var->type, var->depth);
		}
		else
		{
			var->category = CATEGORY_LOCAL;
			// stack grows downward
			localoffset -= get_size(var->type, var->depth);
			var->offset = localoffset;
		}
	}
}
#line 1885 "src\\parser.c"
        break;
      case 6: /* declaration_specifiers ::= type_specifier */
#line 251 "src\\parser.y"
{ yylhsminor.yy67 = yymsp[0].minor.yy67; }
#line 1890 "src\\parser.c"
  yymsp[0].minor.yy67 = yylhsminor.yy67;
        break;
      case 7: /* init_declarator_list ::= init_declarator */
#line 253 "src\\parser.y"
{
	yylhsminor.yy53 = new std::vector<init_decl_t>;
	yylhsminor.yy53->push_back(yymsp[0].minor.yy51);
}
#line 1899 "src\\parser.c"
  yymsp[0].minor.yy53 = yylhsminor.yy53;
        break;
      case 8: /* init_declarator_list ::= init_declarator_list COM init_declarator */
#line 257 "src\\parser.y"
{
	yymsp[-2].minor.yy53->push_back(yymsp[0].minor.yy51);
	yylhsminor.yy53 = yymsp[-2].minor.yy53;
}
#line 1908 "src\\parser.c"
  yymsp[-2].minor.yy53 = yylhsminor.yy53;
        break;
      case 9: /* init_declarator ::= declarator */
      case 17: /* declarator ::= direct_declarator */ yytestcase(yyruleno==17);
#line 262 "src\\parser.y"
{ yylhsminor.yy51 = yymsp[0].minor.yy51; }
#line 1915 "src\\parser.c"
  yymsp[0].minor.yy51 = yylhsminor.yy51;
        break;
      case 10: /* init_declarator ::= declarator ASGN_OP initializer */
#line 263 "src\\parser.y"
{
	yyerror("initializer is currently not supported");
}
#line 1923 "src\\parser.c"
        break;
      case 11: /* type_specifier ::= VOID */
#line 267 "src\\parser.y"
{ ZERO(yymsp[0].minor.yy67); yymsp[0].minor.yy67.type = TYPE_VOID; }
#line 1928 "src\\parser.c"
        break;
      case 12: /* type_specifier ::= CHAR */
#line 268 "src\\parser.y"
{ ZERO(yymsp[0].minor.yy67); yymsp[0].minor.yy67.type = TYPE_CHAR; }
#line 1933 "src\\parser.c"
        break;
      case 13: /* type_specifier ::= SHORT */
#line 269 "src\\parser.y"
{ ZERO(yymsp[0].minor.yy67); yymsp[0].minor.yy67.type = TYPE_SHORT; }
#line 1938 "src\\parser.c"
        break;
      case 14: /* type_specifier ::= INT */
#line 270 "src\\parser.y"
{ ZERO(yymsp[0].minor.yy67); yymsp[0].minor.yy67.type = TYPE_INT; }
#line 1943 "src\\parser.c"
        break;
      case 15: /* type_specifier ::= LONG */
#line 271 "src\\parser.y"
{ ZERO(yymsp[0].minor.yy67); yymsp[0].minor.yy67.type = TYPE_LONG; }
#line 1948 "src\\parser.c"
        break;
      case 16: /* declarator ::= pointer direct_declarator */
#line 273 "src\\parser.y"
{ yymsp[0].minor.yy51.depth = yymsp[-1].minor.yy60; yylhsminor.yy51 = yymsp[0].minor.yy51; }
#line 1953 "src\\parser.c"
  yymsp[-1].minor.yy51 = yylhsminor.yy51;
        break;
      case 18: /* direct_declarator ::= ID */
#line 276 "src\\parser.y"
{ ZERO(yylhsminor.yy51); yylhsminor.yy51.name = yymsp[0].minor.yy0.sval; }
#line 1959 "src\\parser.c"
  yymsp[0].minor.yy51 = yylhsminor.yy51;
        break;
      case 19: /* pointer ::= MUL_OP */
#line 278 "src\\parser.y"
{ yymsp[0].minor.yy60 = 1; }
#line 1965 "src\\parser.c"
        break;
      case 20: /* pointer ::= MUL_OP pointer */
#line 279 "src\\parser.y"
{ yymsp[-1].minor.yy60 = yymsp[0].minor.yy60 + 1; }
#line 1970 "src\\parser.c"
        break;
      case 21: /* parameter_list ::= parameter_declaration */
#line 281 "src\\parser.y"
{
	yylhsminor.yy49 = new std::vector<param_t>;
	yylhsminor.yy49->push_back(yymsp[0].minor.yy99);
}
#line 1978 "src\\parser.c"
  yymsp[0].minor.yy49 = yylhsminor.yy49;
        break;
      case 22: /* parameter_list ::= parameter_list COM parameter_declaration */
#line 285 "src\\parser.y"
{
	yymsp[-2].minor.yy49->push_back(yymsp[0].minor.yy99);
	yylhsminor.yy49 = yymsp[-2].minor.yy49;
}
#line 1987 "src\\parser.c"
  yymsp[-2].minor.yy49 = yylhsminor.yy49;
        break;
      case 23: /* parameter_declaration ::= declaration_specifiers declarator */
#line 290 "src\\parser.y"
{ 
	ZERO(yylhsminor.yy99);
	yylhsminor.yy99.type = yymsp[-1].minor.yy67.type; 
	yylhsminor.yy99.depth = yymsp[0].minor.yy51.depth;
	yylhsminor.yy99.name = yymsp[0].minor.yy51.name;
}
#line 1998 "src\\parser.c"
  yymsp[-1].minor.yy99 = yylhsminor.yy99;
        break;
      case 24: /* function_declarator ::= declarator LP RP */
#line 345 "src\\parser.y"
{
	ZERO(yylhsminor.yy133);
	yylhsminor.yy133.depth = yymsp[-2].minor.yy51.depth;
	yylhsminor.yy133.name = yymsp[-2].minor.yy51.name;
}
#line 2008 "src\\parser.c"
  yymsp[-2].minor.yy133 = yylhsminor.yy133;
        break;
      case 25: /* function_declarator ::= declarator LP parameter_list RP */
#line 351 "src\\parser.y"
{
	ZERO(yylhsminor.yy133);
	yylhsminor.yy133.depth = yymsp[-3].minor.yy51.depth;
	yylhsminor.yy133.name = yymsp[-3].minor.yy51.name;
	yylhsminor.yy133.nparams = yymsp[-1].minor.yy49->size();
	yylhsminor.yy133.params = extract(yymsp[-1].minor.yy49);
}
#line 2020 "src\\parser.c"
  yymsp[-3].minor.yy133 = yylhsminor.yy133;
        break;
      case 26: /* function_declarator ::= declarator LP parameter_list COM ELLIPSIS RP */
#line 358 "src\\parser.y"
{
	ZERO(yylhsminor.yy133);
	yylhsminor.yy133.depth = yymsp[-5].minor.yy51.depth;
	yylhsminor.yy133.name = yymsp[-5].minor.yy51.name;
	yylhsminor.yy133.nparams = yymsp[-3].minor.yy49->size();
	yylhsminor.yy133.params = extract(yymsp[-3].minor.yy49);
	yylhsminor.yy133.variadic = true;
}
#line 2033 "src\\parser.c"
  yymsp[-5].minor.yy133 = yylhsminor.yy133;
        break;
      case 27: /* function_signature ::= declaration_specifiers function_declarator */
#line 367 "src\\parser.y"
{
	if (lookup(yymsp[0].minor.yy133.name))
	{
		yyerror("function name conflict");
	}

	sym_t* func = insert(yymsp[0].minor.yy133.name);
	func->category = CATEGORY_FUNC;
	func->type = yymsp[-1].minor.yy67.type;
	func->depth = yymsp[0].minor.yy133.depth;
	func->name = yymsp[0].minor.yy133.name;
	func->nparams = yymsp[0].minor.yy133.nparams;
	func->params = yymsp[0].minor.yy133.params;
	func->variadic = yymsp[0].minor.yy133.variadic;

	next_scope();

	int paramoffset = 8; // bp, retaddr
	for(int i = 0; i < func->nparams; i++)
	{
		param_t p = func->params[i];
		sym_t* param = insert(p.name);

		param->category = CATEGORY_PARAM;
		param->offset = paramoffset;
		paramoffset += get_size(p.type, p.depth);
	
		param->type = p.type;
		param->depth = p.depth;

		if (param->type == TYPE_VOID && param->depth == 0)
		{
			yyerror("illegal type");
		}
	}

	prev_scope();
}
#line 2076 "src\\parser.c"
        break;
      case 28: /* function_definition ::= function_signature compound_statement */
#line 406 "src\\parser.y"
{
	exit_scope();

	// A->stmts = B;
	// A->local_stack_size = -localoffset;
	// localoffset = 0;
}
#line 2087 "src\\parser.c"
        break;
      default:
      /* (29) start ::= */ yytestcase(yyruleno==29);
      /* (30) start ::= translation_unit */ yytestcase(yyruleno==30);
      /* (31) postfix_expression ::= primary_expression (OPTIMIZED OUT) */ assert(yyruleno!=31);
      /* (32) postfix_expression ::= postfix_expression LS expression RS */ yytestcase(yyruleno==32);
      /* (33) postfix_expression ::= postfix_expression LP RP */ yytestcase(yyruleno==33);
      /* (34) postfix_expression ::= postfix_expression LP argument_expression_list RP */ yytestcase(yyruleno==34);
      /* (35) postfix_expression ::= postfix_expression INC_OP */ yytestcase(yyruleno==35);
      /* (36) postfix_expression ::= postfix_expression DEC_OP */ yytestcase(yyruleno==36);
      /* (37) argument_expression_list ::= assignment_expression (OPTIMIZED OUT) */ assert(yyruleno!=37);
      /* (38) argument_expression_list ::= argument_expression_list COM assignment_expression */ yytestcase(yyruleno==38);
      /* (39) unary_expression ::= postfix_expression */ yytestcase(yyruleno==39);
      /* (40) unary_expression ::= INC_OP unary_expression */ yytestcase(yyruleno==40);
      /* (41) unary_expression ::= DEC_OP unary_expression */ yytestcase(yyruleno==41);
      /* (42) unary_expression ::= unary_operator cast_expression */ yytestcase(yyruleno==42);
      /* (43) unary_expression ::= SIZEOF unary_expression */ yytestcase(yyruleno==43);
      /* (44) unary_expression ::= SIZEOF LP type_name RP */ yytestcase(yyruleno==44);
      /* (45) unary_operator ::= AND_OP */ yytestcase(yyruleno==45);
      /* (46) unary_operator ::= MUL_OP */ yytestcase(yyruleno==46);
      /* (47) unary_operator ::= ADD_OP */ yytestcase(yyruleno==47);
      /* (48) unary_operator ::= SUB_OP */ yytestcase(yyruleno==48);
      /* (49) unary_operator ::= NOT_OP */ yytestcase(yyruleno==49);
      /* (50) unary_operator ::= LOGNOT */ yytestcase(yyruleno==50);
      /* (51) cast_expression ::= unary_expression */ yytestcase(yyruleno==51);
      /* (52) cast_expression ::= LP type_name RP cast_expression */ yytestcase(yyruleno==52);
      /* (53) multiplicative_expression ::= cast_expression (OPTIMIZED OUT) */ assert(yyruleno!=53);
      /* (54) multiplicative_expression ::= multiplicative_expression MUL_OP cast_expression */ yytestcase(yyruleno==54);
      /* (55) multiplicative_expression ::= multiplicative_expression DIV_OP cast_expression */ yytestcase(yyruleno==55);
      /* (56) multiplicative_expression ::= multiplicative_expression MOD_OP cast_expression */ yytestcase(yyruleno==56);
      /* (57) additive_expression ::= multiplicative_expression */ yytestcase(yyruleno==57);
      /* (58) additive_expression ::= additive_expression ADD_OP multiplicative_expression */ yytestcase(yyruleno==58);
      /* (59) additive_expression ::= additive_expression SUB_OP multiplicative_expression */ yytestcase(yyruleno==59);
      /* (60) shift_expression ::= additive_expression */ yytestcase(yyruleno==60);
      /* (61) shift_expression ::= shift_expression SHL_OP additive_expression */ yytestcase(yyruleno==61);
      /* (62) shift_expression ::= shift_expression SHR_OP additive_expression */ yytestcase(yyruleno==62);
      /* (63) relational_expression ::= shift_expression */ yytestcase(yyruleno==63);
      /* (64) relational_expression ::= relational_expression LT_OP shift_expression */ yytestcase(yyruleno==64);
      /* (65) relational_expression ::= relational_expression GT_OP shift_expression */ yytestcase(yyruleno==65);
      /* (66) relational_expression ::= relational_expression LE_OP shift_expression */ yytestcase(yyruleno==66);
      /* (67) relational_expression ::= relational_expression GE_OP shift_expression */ yytestcase(yyruleno==67);
      /* (68) equality_expression ::= relational_expression */ yytestcase(yyruleno==68);
      /* (69) equality_expression ::= equality_expression EQ_OP relational_expression */ yytestcase(yyruleno==69);
      /* (70) equality_expression ::= equality_expression NE_OP relational_expression */ yytestcase(yyruleno==70);
      /* (71) and_expression ::= equality_expression */ yytestcase(yyruleno==71);
      /* (72) and_expression ::= and_expression AND_OP equality_expression */ yytestcase(yyruleno==72);
      /* (73) exclusive_or_expression ::= and_expression */ yytestcase(yyruleno==73);
      /* (74) exclusive_or_expression ::= exclusive_or_expression OR_OP and_expression */ yytestcase(yyruleno==74);
      /* (75) inclusive_or_expression ::= exclusive_or_expression */ yytestcase(yyruleno==75);
      /* (76) inclusive_or_expression ::= inclusive_or_expression XOR_OP exclusive_or_expression */ yytestcase(yyruleno==76);
      /* (77) logical_and_expression ::= inclusive_or_expression */ yytestcase(yyruleno==77);
      /* (78) logical_and_expression ::= logical_and_expression LOGAND inclusive_or_expression */ yytestcase(yyruleno==78);
      /* (79) logical_or_expression ::= logical_and_expression */ yytestcase(yyruleno==79);
      /* (80) logical_or_expression ::= logical_or_expression LOGOR logical_and_expression */ yytestcase(yyruleno==80);
      /* (81) conditional_expression ::= logical_or_expression */ yytestcase(yyruleno==81);
      /* (82) conditional_expression ::= logical_or_expression QUE expression COL conditional_expression */ yytestcase(yyruleno==82);
      /* (83) assignment_expression ::= conditional_expression (OPTIMIZED OUT) */ assert(yyruleno!=83);
      /* (84) assignment_expression ::= unary_expression assignment_operator assignment_expression */ yytestcase(yyruleno==84);
      /* (85) assignment_operator ::= ASGN_OP */ yytestcase(yyruleno==85);
      /* (86) assignment_operator ::= MULASGN */ yytestcase(yyruleno==86);
      /* (87) assignment_operator ::= DIVASGN */ yytestcase(yyruleno==87);
      /* (88) assignment_operator ::= MODASGN */ yytestcase(yyruleno==88);
      /* (89) assignment_operator ::= ADDASGN */ yytestcase(yyruleno==89);
      /* (90) assignment_operator ::= SUBASGN */ yytestcase(yyruleno==90);
      /* (91) assignment_operator ::= SHLASGN */ yytestcase(yyruleno==91);
      /* (92) assignment_operator ::= SHRASGN */ yytestcase(yyruleno==92);
      /* (93) assignment_operator ::= ANDASGN */ yytestcase(yyruleno==93);
      /* (94) assignment_operator ::= XORASGN */ yytestcase(yyruleno==94);
      /* (95) assignment_operator ::= ORASGN */ yytestcase(yyruleno==95);
      /* (96) expression ::= assignment_expression (OPTIMIZED OUT) */ assert(yyruleno!=96);
      /* (97) expression ::= expression COM assignment_expression */ yytestcase(yyruleno==97);
      /* (98) type_name ::= declaration_specifiers */ yytestcase(yyruleno==98);
      /* (99) type_name ::= declaration_specifiers pointer */ yytestcase(yyruleno==99);
      /* (100) initializer ::= assignment_expression (OPTIMIZED OUT) */ assert(yyruleno!=100);
      /* (101) statement ::= labeled_statement (OPTIMIZED OUT) */ assert(yyruleno!=101);
      /* (102) statement ::= compound_statement (OPTIMIZED OUT) */ assert(yyruleno!=102);
      /* (103) statement ::= expression_statement (OPTIMIZED OUT) */ assert(yyruleno!=103);
      /* (104) statement ::= selection_statement (OPTIMIZED OUT) */ assert(yyruleno!=104);
      /* (105) statement ::= iteration_statement (OPTIMIZED OUT) */ assert(yyruleno!=105);
      /* (106) statement ::= jump_statement (OPTIMIZED OUT) */ assert(yyruleno!=106);
      /* (107) labeled_statement ::= ID COL statement */ yytestcase(yyruleno==107);
      /* (108) compound_statement ::= LB RB */ yytestcase(yyruleno==108);
      /* (109) compound_statement ::= LB block_item_list RB */ yytestcase(yyruleno==109);
      /* (110) block_item_list ::= block_item (OPTIMIZED OUT) */ assert(yyruleno!=110);
      /* (111) block_item_list ::= block_item_list block_item */ yytestcase(yyruleno==111);
      /* (112) block_item ::= variable_declaration (OPTIMIZED OUT) */ assert(yyruleno!=112);
      /* (113) block_item ::= statement (OPTIMIZED OUT) */ assert(yyruleno!=113);
      /* (114) expression_statement ::= SEM */ yytestcase(yyruleno==114);
      /* (115) expression_statement ::= expression SEM */ yytestcase(yyruleno==115);
      /* (116) selection_statement ::= IF LP expression RP statement */ yytestcase(yyruleno==116);
      /* (117) selection_statement ::= IF LP expression RP statement ELSE statement */ yytestcase(yyruleno==117);
      /* (118) iteration_statement ::= WHILE LP expression RP statement */ yytestcase(yyruleno==118);
      /* (119) iteration_statement ::= DO statement WHILE LP expression RP SEM */ yytestcase(yyruleno==119);
      /* (120) iteration_statement ::= FOR LP expression_statement expression_statement RP statement */ yytestcase(yyruleno==120);
      /* (121) iteration_statement ::= FOR LP expression_statement expression_statement expression RP statement */ yytestcase(yyruleno==121);
      /* (122) iteration_statement ::= FOR LP variable_declaration expression_statement RP statement */ yytestcase(yyruleno==122);
      /* (123) iteration_statement ::= FOR LP variable_declaration expression_statement expression RP statement */ yytestcase(yyruleno==123);
      /* (124) jump_statement ::= GOTO ID SEM */ yytestcase(yyruleno==124);
      /* (125) jump_statement ::= CONTINUE SEM */ yytestcase(yyruleno==125);
      /* (126) jump_statement ::= BREAK SEM */ yytestcase(yyruleno==126);
      /* (127) jump_statement ::= RETURN SEM */ yytestcase(yyruleno==127);
      /* (128) jump_statement ::= RETURN expression SEM */ yytestcase(yyruleno==128);
      /* (129) translation_unit ::= external_declaration (OPTIMIZED OUT) */ assert(yyruleno!=129);
      /* (130) translation_unit ::= translation_unit external_declaration */ yytestcase(yyruleno==130);
      /* (131) external_declaration ::= variable_declaration (OPTIMIZED OUT) */ assert(yyruleno!=131);
      /* (132) external_declaration ::= function_definition (OPTIMIZED OUT) */ assert(yyruleno!=132);
        break;
/********** End reduce actions ************************************************/
  };
  assert( yyruleno<sizeof(yyRuleInfoLhs)/sizeof(yyRuleInfoLhs[0]) );
  yygoto = yyRuleInfoLhs[yyruleno];
  yysize = yyRuleInfoNRhs[yyruleno];
  yyact = yy_find_reduce_action(yymsp[yysize].stateno,(YYCODETYPE)yygoto);

  /* There are no SHIFTREDUCE actions on nonterminals because the table
  ** generator has simplified them to pure REDUCE actions. */
  assert( !(yyact>YY_MAX_SHIFT && yyact<=YY_MAX_SHIFTREDUCE) );

  /* It is not possible for a REDUCE to be followed by an error */
  assert( yyact!=YY_ERROR_ACTION );

  yymsp += yysize+1;
  yypParser->yytos = yymsp;
  yymsp->stateno = (YYACTIONTYPE)yyact;
  yymsp->major = (YYCODETYPE)yygoto;
  yyTraceShift(yypParser, yyact, "... then shift");
  return yyact;
}

/*
** The following code executes when the parse fails
*/
#ifndef YYNOERRORRECOVERY
static void yy_parse_failed(
  yyParser *yypParser           /* The parser */
){
  ParseARG_FETCH
  ParseCTX_FETCH
#ifndef NDEBUG
  if( yyTraceFILE ){
    fprintf(yyTraceFILE,"%sFail!\n",yyTracePrompt);
  }
#endif
  while( yypParser->yytos>yypParser->yystack ) yy_pop_parser_stack(yypParser);
  /* Here code is inserted which will be executed whenever the
  ** parser fails */
/************ Begin %parse_failure code ***************************************/
/************ End %parse_failure code *****************************************/
  ParseARG_STORE /* Suppress warning about unused %extra_argument variable */
  ParseCTX_STORE
}
#endif /* YYNOERRORRECOVERY */

/*
** The following code executes when a syntax error first occurs.
*/
static void yy_syntax_error(
  yyParser *yypParser,           /* The parser */
  int yymajor,                   /* The major type of the error token */
  ParseTOKENTYPE yyminor         /* The minor type of the error token */
){
  ParseARG_FETCH
  ParseCTX_FETCH
#define TOKEN yyminor
/************ Begin %syntax_error code ****************************************/
#line 93 "src\\parser.y"
 yyerror("syntax error"); 
#line 2255 "src\\parser.c"
/************ End %syntax_error code ******************************************/
  ParseARG_STORE /* Suppress warning about unused %extra_argument variable */
  ParseCTX_STORE
}

/*
** The following is executed when the parser accepts
*/
static void yy_accept(
  yyParser *yypParser           /* The parser */
){
  ParseARG_FETCH
  ParseCTX_FETCH
#ifndef NDEBUG
  if( yyTraceFILE ){
    fprintf(yyTraceFILE,"%sAccept!\n",yyTracePrompt);
  }
#endif
#ifndef YYNOERRORRECOVERY
  yypParser->yyerrcnt = -1;
#endif
  assert( yypParser->yytos==yypParser->yystack );
  /* Here code is inserted which will be executed whenever the
  ** parser accepts */
/*********** Begin %parse_accept code *****************************************/
/*********** End %parse_accept code *******************************************/
  ParseARG_STORE /* Suppress warning about unused %extra_argument variable */
  ParseCTX_STORE
}

/* The main parser program.
** The first argument is a pointer to a structure obtained from
** "ParseAlloc" which describes the current state of the parser.
** The second argument is the major token number.  The third is
** the minor token.  The fourth optional argument is whatever the
** user wants (and specified in the grammar) and is available for
** use by the action routines.
**
** Inputs:
** <ul>
** <li> A pointer to the parser (an opaque structure.)
** <li> The major token number.
** <li> The minor token number.
** <li> An option argument of a grammar-specified type.
** </ul>
**
** Outputs:
** None.
*/
void Parse(
  void *yyp,                   /* The parser */
  int yymajor,                 /* The major token code number */
  ParseTOKENTYPE yyminor       /* The value for the token */
  ParseARG_PDECL               /* Optional %extra_argument parameter */
){
  YYMINORTYPE yyminorunion;
  YYACTIONTYPE yyact;   /* The parser action. */
#if !defined(YYERRORSYMBOL) && !defined(YYNOERRORRECOVERY)
  int yyendofinput;     /* True if we are at the end of input */
#endif
#ifdef YYERRORSYMBOL
  int yyerrorhit = 0;   /* True if yymajor has invoked an error */
#endif
  yyParser *yypParser = (yyParser*)yyp;  /* The parser */
  ParseCTX_FETCH
  ParseARG_STORE

  assert( yypParser->yytos!=0 );
#if !defined(YYERRORSYMBOL) && !defined(YYNOERRORRECOVERY)
  yyendofinput = (yymajor==0);
#endif

  yyact = yypParser->yytos->stateno;
#ifndef NDEBUG
  if( yyTraceFILE ){
    if( yyact < YY_MIN_REDUCE ){
      fprintf(yyTraceFILE,"%sInput '%s' in state %d\n",
              yyTracePrompt,yyTokenName[yymajor],yyact);
    }else{
      fprintf(yyTraceFILE,"%sInput '%s' with pending reduce %d\n",
              yyTracePrompt,yyTokenName[yymajor],yyact-YY_MIN_REDUCE);
    }
  }
#endif

  while(1){ /* Exit by "break" */
    assert( yypParser->yytos>=yypParser->yystack );
    assert( yyact==yypParser->yytos->stateno );
    yyact = yy_find_shift_action((YYCODETYPE)yymajor,yyact);
    if( yyact >= YY_MIN_REDUCE ){
      unsigned int yyruleno = yyact - YY_MIN_REDUCE; /* Reduce by this rule */
#ifndef NDEBUG
      assert( yyruleno<(int)(sizeof(yyRuleName)/sizeof(yyRuleName[0])) );
      if( yyTraceFILE ){
        int yysize = yyRuleInfoNRhs[yyruleno];
        if( yysize ){
          fprintf(yyTraceFILE, "%sReduce %d [%s]%s, pop back to state %d.\n",
            yyTracePrompt,
            yyruleno, yyRuleName[yyruleno],
            yyruleno<YYNRULE_WITH_ACTION ? "" : " without external action",
            yypParser->yytos[yysize].stateno);
        }else{
          fprintf(yyTraceFILE, "%sReduce %d [%s]%s.\n",
            yyTracePrompt, yyruleno, yyRuleName[yyruleno],
            yyruleno<YYNRULE_WITH_ACTION ? "" : " without external action");
        }
      }
#endif /* NDEBUG */

      /* Check that the stack is large enough to grow by a single entry
      ** if the RHS of the rule is empty.  This ensures that there is room
      ** enough on the stack to push the LHS value */
      if( yyRuleInfoNRhs[yyruleno]==0 ){
#ifdef YYTRACKMAXSTACKDEPTH
        if( (int)(yypParser->yytos - yypParser->yystack)>yypParser->yyhwm ){
          yypParser->yyhwm++;
          assert( yypParser->yyhwm ==
                  (int)(yypParser->yytos - yypParser->yystack));
        }
#endif
#if YYSTACKDEPTH>0
        if( yypParser->yytos>=yypParser->yystackEnd ){
          yyStackOverflow(yypParser);
          break;
        }
#else
        if( yypParser->yytos>=&yypParser->yystack[yypParser->yystksz-1] ){
          if( yyGrowStack(yypParser) ){
            yyStackOverflow(yypParser);
            break;
          }
        }
#endif
      }
      yyact = yy_reduce(yypParser,yyruleno,yymajor,yyminor ParseCTX_PARAM);
    }else if( yyact <= YY_MAX_SHIFTREDUCE ){
      yy_shift(yypParser,yyact,(YYCODETYPE)yymajor,yyminor);
#ifndef YYNOERRORRECOVERY
      yypParser->yyerrcnt--;
#endif
      break;
    }else if( yyact==YY_ACCEPT_ACTION ){
      yypParser->yytos--;
      yy_accept(yypParser);
      return;
    }else{
      assert( yyact == YY_ERROR_ACTION );
      yyminorunion.yy0 = yyminor;
#ifdef YYERRORSYMBOL
      int yymx;
#endif
#ifndef NDEBUG
      if( yyTraceFILE ){
        fprintf(yyTraceFILE,"%sSyntax Error!\n",yyTracePrompt);
      }
#endif
#ifdef YYERRORSYMBOL
      /* A syntax error has occurred.
      ** The response to an error depends upon whether or not the
      ** grammar defines an error token "ERROR".
      **
      ** This is what we do if the grammar does define ERROR:
      **
      **  * Call the %syntax_error function.
      **
      **  * Begin popping the stack until we enter a state where
      **    it is legal to shift the error symbol, then shift
      **    the error symbol.
      **
      **  * Set the error count to three.
      **
      **  * Begin accepting and shifting new tokens.  No new error
      **    processing will occur until three tokens have been
      **    shifted successfully.
      **
      */
      if( yypParser->yyerrcnt<0 ){
        yy_syntax_error(yypParser,yymajor,yyminor);
      }
      yymx = yypParser->yytos->major;
      if( yymx==YYERRORSYMBOL || yyerrorhit ){
#ifndef NDEBUG
        if( yyTraceFILE ){
          fprintf(yyTraceFILE,"%sDiscard input token %s\n",
             yyTracePrompt,yyTokenName[yymajor]);
        }
#endif
        yy_destructor(yypParser, (YYCODETYPE)yymajor, &yyminorunion);
        yymajor = YYNOCODE;
      }else{
        while( yypParser->yytos > yypParser->yystack ){
          yyact = yy_find_reduce_action(yypParser->yytos->stateno,
                                        YYERRORSYMBOL);
          if( yyact<=YY_MAX_SHIFTREDUCE ) break;
          yy_pop_parser_stack(yypParser);
        }
        if( yypParser->yytos <= yypParser->yystack || yymajor==0 ){
          yy_destructor(yypParser,(YYCODETYPE)yymajor,&yyminorunion);
          yy_parse_failed(yypParser);
#ifndef YYNOERRORRECOVERY
          yypParser->yyerrcnt = -1;
#endif
          yymajor = YYNOCODE;
        }else if( yymx!=YYERRORSYMBOL ){
          yy_shift(yypParser,yyact,YYERRORSYMBOL,yyminor);
        }
      }
      yypParser->yyerrcnt = 3;
      yyerrorhit = 1;
      if( yymajor==YYNOCODE ) break;
      yyact = yypParser->yytos->stateno;
#elif defined(YYNOERRORRECOVERY)
      /* If the YYNOERRORRECOVERY macro is defined, then do not attempt to
      ** do any kind of error recovery.  Instead, simply invoke the syntax
      ** error routine and continue going as if nothing had happened.
      **
      ** Applications can set this macro (for example inside %include) if
      ** they intend to abandon the parse upon the first syntax error seen.
      */
      yy_syntax_error(yypParser,yymajor, yyminor);
      yy_destructor(yypParser,(YYCODETYPE)yymajor,&yyminorunion);
      break;
#else  /* YYERRORSYMBOL is not defined */
      /* This is what we do if the grammar does not define ERROR:
      **
      **  * Report an error message, and throw away the input token.
      **
      **  * If the input token is $, then fail the parse.
      **
      ** As before, subsequent error messages are suppressed until
      ** three input tokens have been successfully shifted.
      */
      if( yypParser->yyerrcnt<=0 ){
        yy_syntax_error(yypParser,yymajor, yyminor);
      }
      yypParser->yyerrcnt = 3;
      yy_destructor(yypParser,(YYCODETYPE)yymajor,&yyminorunion);
      if( yyendofinput ){
        yy_parse_failed(yypParser);
#ifndef YYNOERRORRECOVERY
        yypParser->yyerrcnt = -1;
#endif
      }
      break;
#endif
    }
  }
#ifndef NDEBUG
  if( yyTraceFILE ){
    yyStackEntry *i;
    char cDiv = '[';
    fprintf(yyTraceFILE,"%sReturn. Stack=",yyTracePrompt);
    for(i=&yypParser->yystack[1]; i<=yypParser->yytos; i++){
      fprintf(yyTraceFILE,"%c%s", cDiv, yyTokenName[i->major]);
      cDiv = ' ';
    }
    fprintf(yyTraceFILE,"]\n");
  }
#endif
  return;
}

/*
** Return the fallback token corresponding to canonical token iToken, or
** 0 if iToken has no fallback.
*/
int ParseFallback(int iToken){
#ifdef YYFALLBACK
  assert( iToken<(int)(sizeof(yyFallback)/sizeof(yyFallback[0])) );
  return yyFallback[iToken];
#else
  (void)iToken;
  return 0;
#endif
}
#line 414 "src\\parser.y"


#include <malloc.h>

int yylex(void);
// defined in lexer.l
extern token_value_t yylval;

int main()
{
	void* par = ParseAlloc(malloc);
	ParseInit(par);

	int token;
	while((token = yylex()) > 0)
	{
		Parse(par, token, yylval);
	}

	Parse(par, 0, yylval);
	ParseFree(par, free);
}

#line 2555 "src\\parser.c"
