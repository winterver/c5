/* This file is automatically generated by Lemon from input grammar
** source file "src\parser.y". */
/*
** 2000-05-29
**
** The author disclaims copyright to this source code.  In place of
** a legal notice, here is a blessing:
**
**    May you do good and not evil.
**    May you find forgiveness for yourself and forgive others.
**    May you share freely, never taking more than you give.
**
*************************************************************************
** Driver template for the LEMON parser generator.
**
** The "lemon" program processes an LALR(1) input grammar file, then uses
** this template to construct a parser.  The "lemon" program inserts text
** at each "%%" line.  Also, any "P-a-r-s-e" identifer prefix (without the
** interstitial "-" characters) contained in this template is changed into
** the value of the %name directive from the grammar.  Otherwise, the content
** of this template is copied straight through into the generate parser
** source file.
**
** The following is the concatenation of all %include directives from the
** input grammar file:
*/
/************ Begin %include sections from the grammar ************************/
#include <stdio.h>
#include <string.h>
#include <vector>
#include "symtab.hpp"
#include "semantics.hpp"

#define ZERO(s) memset(&s, 0, sizeof(s))
void yyerror(const char* s);

// states of the parser
int localoffset = 0;
int globaloffset = 0;

struct decl_specif_t {
	int type; 
	int depth; // only used by type_name
};

struct init_decl_t {
	int depth;
	const char* name;
	expr_t* init;
};

typedef std::vector<init_decl_t> init_decl_list_t;

struct func_decl_t {
	int depth;
	const char* name;
	param_list_t* params;
	bool variadic;
};

// helper function
template<class T>
T* extract(std::vector<T>* vec)
{
	auto res = new T[vec->size()];
	std::copy(vec->begin(), vec->end(), res);
	return res;
}

int get_size(int type, int depth)
{
	if (depth)
		return 8;
	switch(type)
	{
	case TYPE_CHAR: return 1;
	case TYPE_SHORT: return 2;
	case TYPE_INT: return 4;
	case TYPE_LONG: return 8;
	case TYPE_VOID: return 0;
	}
	yyerror("illegal type");
	return 0;
}

bool convertible(expr_t* B, decl_specif_t A)
{
	if (B->depth != A.depth)
		return false;
	return true;
}

int hybrid(int t1, int t2)
{
	return t1 > t2 ? t1 : t2;
}

#line 99 "src\\parser.c"
/**************** End of %include directives **********************************/
/* These constants specify the various numeric values for terminal symbols.
***************** Begin token definitions *************************************/
#ifndef NUM
#define NUM                             1
#define DEC                             2
#define ID                              3
#define STR                             4
#define ASGN_OP                         5
#define LT_OP                           6
#define GT_OP                           7
#define ADD_OP                          8
#define SUB_OP                          9
#define MUL_OP                         10
#define DIV_OP                         11
#define MOD_OP                         12
#define AND_OP                         13
#define OR_OP                          14
#define XOR_OP                         15
#define NOT_OP                         16
#define LOGAND                         17
#define LOGOR                          18
#define LOGNOT                         19
#define DOT_OP                         20
#define PTR_OP                         21
#define INC_OP                         22
#define DEC_OP                         23
#define SHL_OP                         24
#define SHR_OP                         25
#define LE_OP                          26
#define GE_OP                          27
#define EQ_OP                          28
#define NE_OP                          29
#define MULASGN                        30
#define DIVASGN                        31
#define MODASGN                        32
#define ADDASGN                        33
#define SUBASGN                        34
#define SHLASGN                        35
#define SHRASGN                        36
#define ANDASGN                        37
#define XORASGN                        38
#define ORASGN                         39
#define SIZEOF                         40
#define ELLIPSIS                       41
#define TYPEDEF                        42
#define STATIC                         43
#define CONST                          44
#define VOID                           45
#define CHAR                           46
#define SHORT                          47
#define INT                            48
#define LONG                           49
#define FLOAT                          50
#define DOUBLE                         51
#define TYPE                           52
#define IF                             53
#define ELSE                           54
#define FOR                            55
#define WHILE                          56
#define DO                             57
#define CONTINUE                       58
#define BREAK                          59
#define RETURN                         60
#define GOTO                           61
#define LP                             62
#define RP                             63
#define LS                             64
#define RS                             65
#define LB                             66
#define RB                             67
#define COM                            68
#define SEM                            69
#define COL                            70
#define QUE                            71
#endif
/**************** End token definitions ***************************************/

/* The next sections is a series of control #defines.
** various aspects of the generated parser.
**    YYCODETYPE         is the data type used to store the integer codes
**                       that represent terminal and non-terminal symbols.
**                       "unsigned char" is used if there are fewer than
**                       256 symbols.  Larger types otherwise.
**    YYNOCODE           is a number of type YYCODETYPE that is not used for
**                       any terminal or nonterminal symbol.
**    YYFALLBACK         If defined, this indicates that one or more tokens
**                       (also known as: "terminal symbols") have fall-back
**                       values which should be used if the original symbol
**                       would not parse.  This permits keywords to sometimes
**                       be used as identifiers, for example.
**    YYACTIONTYPE       is the data type used for "action codes" - numbers
**                       that indicate what to do in response to the next
**                       token.
**    ParseTOKENTYPE     is the data type used for minor type for terminal
**                       symbols.  Background: A "minor type" is a semantic
**                       value associated with a terminal or non-terminal
**                       symbols.  For example, for an "ID" terminal symbol,
**                       the minor type might be the name of the identifier.
**                       Each non-terminal can have a different minor type.
**                       Terminal symbols all have the same minor type, though.
**                       This macros defines the minor type for terminal
**                       symbols.
**    YYMINORTYPE        is the data type used for all minor types.
**                       This is typically a union of many types, one of
**                       which is ParseTOKENTYPE.  The entry in the union
**                       for terminal symbols is called "yy0".
**    YYSTACKDEPTH       is the maximum depth of the parser's stack.  If
**                       zero the stack is dynamically sized using realloc()
**    ParseARG_SDECL     A static variable declaration for the %extra_argument
**    ParseARG_PDECL     A parameter declaration for the %extra_argument
**    ParseARG_PARAM     Code to pass %extra_argument as a subroutine parameter
**    ParseARG_STORE     Code to store %extra_argument into yypParser
**    ParseARG_FETCH     Code to extract %extra_argument from yypParser
**    ParseCTX_*         As ParseARG_ except for %extra_context
**    YYERRORSYMBOL      is the code number of the error symbol.  If not
**                       defined, then do no error processing.
**    YYNSTATE           the combined number of states.
**    YYNRULE            the number of rules in the grammar
**    YYNTOKEN           Number of terminal symbols
**    YY_MAX_SHIFT       Maximum value for shift actions
**    YY_MIN_SHIFTREDUCE Minimum value for shift-reduce actions
**    YY_MAX_SHIFTREDUCE Maximum value for shift-reduce actions
**    YY_ERROR_ACTION    The yy_action[] code for syntax error
**    YY_ACCEPT_ACTION   The yy_action[] code for accept
**    YY_NO_ACTION       The yy_action[] code for no-op
**    YY_MIN_REDUCE      Minimum value for reduce actions
**    YY_MAX_REDUCE      Maximum value for reduce actions
*/
#ifndef INTERFACE
# define INTERFACE 1
#endif
/************* Begin control #defines *****************************************/
#define YYCODETYPE unsigned char
#define YYNOCODE 118
#define YYACTIONTYPE unsigned short int
#define ParseTOKENTYPE  token_value_t 
typedef union {
  int yyinit;
  ParseTOKENTYPE yy0;
  init_decl_t yy7;
  param_t yy33;
  func_decl_t yy47;
  decl_specif_t yy53;
  expr_t* yy69;
  stmt_list_t* yy77;
  param_list_t* yy126;
  init_decl_list_t* yy188;
  int yy228;
  stmt_t yy236;
} YYMINORTYPE;
#ifndef YYSTACKDEPTH
#define YYSTACKDEPTH 100
#endif
#define ParseARG_SDECL
#define ParseARG_PDECL
#define ParseARG_PARAM
#define ParseARG_FETCH
#define ParseARG_STORE
#define ParseCTX_SDECL
#define ParseCTX_PDECL
#define ParseCTX_PARAM
#define ParseCTX_FETCH
#define ParseCTX_STORE
#define YYNSTATE             117
#define YYNRULE              116
#define YYNRULE_WITH_ACTION  85
#define YYNTOKEN             72
#define YY_MAX_SHIFT         116
#define YY_MIN_SHIFTREDUCE   200
#define YY_MAX_SHIFTREDUCE   315
#define YY_ERROR_ACTION      316
#define YY_ACCEPT_ACTION     317
#define YY_NO_ACTION         318
#define YY_MIN_REDUCE        319
#define YY_MAX_REDUCE        434
/************* End control #defines *******************************************/
#define YY_NLOOKAHEAD ((int)(sizeof(yy_lookahead)/sizeof(yy_lookahead[0])))

/* Define the yytestcase() macro to be a no-op if is not already defined
** otherwise.
**
** Applications can choose to define yytestcase() in the %include section
** to a macro that can assist in verifying code coverage.  For production
** code the yytestcase() macro should be turned off.  But it is useful
** for testing.
*/
#ifndef yytestcase
# define yytestcase(X)
#endif


/* Next are the tables used to determine what action to take based on the
** current state and lookahead token.  These tables are used to implement
** functions that take a state number and lookahead value and return an
** action integer.
**
** Suppose the action integer is N.  Then the action is determined as
** follows
**
**   0 <= N <= YY_MAX_SHIFT             Shift N.  That is, push the lookahead
**                                      token onto the stack and goto state N.
**
**   N between YY_MIN_SHIFTREDUCE       Shift to an arbitrary state then
**     and YY_MAX_SHIFTREDUCE           reduce by rule N-YY_MIN_SHIFTREDUCE.
**
**   N == YY_ERROR_ACTION               A syntax error has occurred.
**
**   N == YY_ACCEPT_ACTION              The parser accepts its input.
**
**   N == YY_NO_ACTION                  No such action.  Denotes unused
**                                      slots in the yy_action[] table.
**
**   N between YY_MIN_REDUCE            Reduce by rule N-YY_MIN_REDUCE
**     and YY_MAX_REDUCE
**
** The action table is constructed as a single large table named yy_action[].
** Given state S and lookahead X, the action is computed as either:
**
**    (A)   N = yy_action[ yy_shift_ofst[S] + X ]
**    (B)   N = yy_default[S]
**
** The (A) formula is preferred.  The B formula is used instead if
** yy_lookahead[yy_shift_ofst[S]+X] is not equal to X.
**
** The formulas above are for computing the action when the lookahead is
** a terminal symbol.  If the lookahead is a non-terminal (as occurs after
** a reduce action) then the yy_reduce_ofst[] array is used in place of
** the yy_shift_ofst[] array.
**
** The following are the tables generated in this section:
**
**  yy_action[]        A single table containing all actions.
**  yy_lookahead[]     A table containing the lookahead for each entry in
**                     yy_action.  Used to detect hash collisions.
**  yy_shift_ofst[]    For each state, the offset into yy_action for
**                     shifting terminals.
**  yy_reduce_ofst[]   For each state, the offset into yy_action for
**                     shifting non-terminals after a reduce.
**  yy_default[]       Default action for each state.
**
*********** Begin parsing tables **********************************************/
#define YY_ACTTAB_COUNT (1078)
static const YYACTIONTYPE yy_action[] = {
 /*     0 */   383,  201,  202,   99,  203,  324,   67,  332,  217,  218,
 /*    10 */   216,  403,  266,  215,   39,   38,  219,   56,  373,  220,
 /*    20 */     1,   48,   52,   51,   59,  389,  324,   67,  340,  342,
 /*    30 */    66,   79,   78,   63,   71,  111,  110,  108,  106,  101,
 /*    40 */    50,  377,   48,   56,  373,  259,  260,  261,  262,  263,
 /*    50 */   387,  388,   68,   97,  392,   88,   94,    9,   85,   84,
 /*    60 */    33,   87,   41,  266,   27,   26,  276,  277,  276,  297,
 /*    70 */    59,  201,  202,   99,  203,    5,   43,  373,  217,  218,
 /*    80 */   216,    7,  281,  215,   25,   24,  219,   55,   86,  220,
 /*    90 */    23,   22,   52,   51,  311,  324,   67,  340,  342,   66,
 /*   100 */    79,   78,   63,   71,  111,  110,  108,  106,  104,  404,
 /*   110 */    50,   48,  317,   42,   42,   58,  384,  116,  375,   42,
 /*   120 */    42,   57,  309,   97,  308,   88,   94,    9,   85,   84,
 /*   130 */    33,   87,   41,   49,  373,    3,  276,   31,   30,  297,
 /*   140 */    58,  384,  390,  307,   98,  324,   67,  112,   58,  384,
 /*   150 */   116,  374,   80,   18,  259,  260,  261,  262,  263,  371,
 /*   160 */   405,   48,    2,    2,  393,    2,    2,    2,    2,   54,
 /*   170 */   253,    2,    1,  397,    2,    2,  201,  202,  200,  203,
 /*   180 */   324,   67,  330,  217,  218,  216,  302,   89,  215,   35,
 /*   190 */    91,  219,   53,   36,  220,   10,   48,   52,   51,   11,
 /*   200 */    49,  373,   47,   46,   45,  259,  260,  261,  262,  263,
 /*   210 */    12,   98,  324,   67,  112,   50,   37,  207,  208,  298,
 /*   220 */   259,  260,  261,  262,  263,   13,  371,  282,   48,  413,
 /*   230 */   413,  393,  413,  413,  413,  413,   14,   41,  413,    1,
 /*   240 */   398,   44,  413,   15,  297,   16,  201,  202,  200,  203,
 /*   250 */   324,   67,  329,  217,  218,  216,   17,   19,  215,   40,
 /*   260 */     4,  219,  214,  206,  220,  204,   48,   52,   51,    3,
 /*   270 */   324,   67,  340,  342,   66,   79,   78,   63,   71,  111,
 /*   280 */   110,  108,  103,  318,  318,   50,   48,  318,  318,  318,
 /*   290 */   259,  260,  261,  262,  263,  318,  201,  202,  200,  203,
 /*   300 */   318,  318,  318,  217,  218,  216,  318,   41,  215,  318,
 /*   310 */   318,  219,  318,  318,  220,  318,  318,   52,   51,  201,
 /*   320 */   202,  200,  203,  318,  318,  318,  217,  218,  216,  318,
 /*   330 */   318,  215,  318,  318,  219,   50,  318,  220,  318,  318,
 /*   340 */    52,   51,  318,  324,   67,  340,  342,   64,   98,  324,
 /*   350 */    67,  112,  318,  318,  318,  318,  318,   41,   50,   48,
 /*   360 */   318,  318,  318,  371,  297,   48,  425,  425,  393,  425,
 /*   370 */   425,  425,  425,  318,  318,  318,    1,  318,  318,  318,
 /*   380 */    41,    6,  201,  202,  200,  203,  318,  318,  318,  217,
 /*   390 */   218,  216,  318,  318,  215,  318,  318,  219,  318,  318,
 /*   400 */   220,  318,  318,   52,   51,  201,  202,  200,  203,  318,
 /*   410 */   318,  318,  217,  218,  216,  318,  318,  215,  318,  318,
 /*   420 */   219,   50,  318,  220,  318,  318,   52,   51,  318,  324,
 /*   430 */    67,  340,  342,   65,   98,  324,   67,  112,  318,  318,
 /*   440 */   318,  318,  318,   41,   50,   48,  318,  318,  318,  371,
 /*   450 */   310,   48,  424,  424,  393,  424,  424,  424,  424,  318,
 /*   460 */   318,  318,    1,  318,  318,  318,   41,    8,  201,  202,
 /*   470 */   200,  203,  318,  318,  318,  217,  218,  216,  318,  318,
 /*   480 */   215,  318,  318,  219,  318,  318,  220,   43,  373,   52,
 /*   490 */    51,   98,  324,   67,  112,  318,  318,  318,  318,  318,
 /*   500 */   318,   81,  324,   67,  112,  318,  371,   50,   48,  423,
 /*   510 */   423,  393,  423,  423,  423,  423,  371,  318,   48,    1,
 /*   520 */    98,  324,   67,  112,  318,  432,  318,  318,  318,   21,
 /*   530 */   432,  432,   57,  318,  318,  371,  318,   48,  422,  422,
 /*   540 */   393,  422,  422,  422,  422,  318,  318,  318,    1,  318,
 /*   550 */   318,   98,  324,   67,  112,  318,  318,  318,  318,  318,
 /*   560 */   318,   98,  324,   67,  112,  318,  371,  318,   48,   92,
 /*   570 */    92,  393,   92,   92,   92,   92,  371,  318,   48,    1,
 /*   580 */   100,  318,   32,  318,  259,  260,  261,  262,  263,  318,
 /*   590 */    98,  324,   67,  112,  318,  318,  318,  318,  318,  324,
 /*   600 */    67,  340,  342,   66,   76,  371,  318,   48,  420,  420,
 /*   610 */   393,  420,  420,  420,  420,   48,  318,  318,    1,   98,
 /*   620 */   324,   67,  112,  318,  318,  318,  318,  318,  324,   67,
 /*   630 */   340,  342,   66,   77,  371,  318,   48,  419,  419,  393,
 /*   640 */   419,  419,  419,  419,   48,  318,  318,    1,  318,  318,
 /*   650 */    98,  324,   67,  112,  318,  318,  318,  318,  318,  318,
 /*   660 */    98,  324,   67,  112,  318,  371,  318,   48,   95,   95,
 /*   670 */   393,   95,   95,   95,   95,  371,  318,   48,    1,  318,
 /*   680 */   318,   34,  318,   83,  324,   67,  112,  318,  318,   98,
 /*   690 */   324,   67,  112,  318,  318,  318,  318,  318,  371,  318,
 /*   700 */    48,  318,  318,  318,  371,  318,   48,  394,  394,  393,
 /*   710 */   394,  394,  394,  394,  318,  318,  318,    1,  318,  201,
 /*   720 */   202,  200,  203,  318,  318,  318,  217,  218,  216,  318,
 /*   730 */   318,  215,  318,  318,  219,  318,  318,  220,  318,  318,
 /*   740 */    52,   51,  201,  202,  200,  203,  318,  318,  318,  217,
 /*   750 */   218,  216,  318,  318,  215,  318,  318,  219,   50,  318,
 /*   760 */   220,  318,  318,   52,   51,  318,  318,   82,  324,   67,
 /*   770 */   112,  324,   67,  340,  341,  318,  318,  318,  318,  318,
 /*   780 */    41,   50,  371,  318,   48,  318,  318,   48,  318,  324,
 /*   790 */    67,  340,  342,   66,   79,   78,   63,   71,  111,  110,
 /*   800 */   105,  318,  318,   20,  318,   48,  324,   67,  340,  342,
 /*   810 */    66,   79,   78,   63,   71,  111,  107,  318,  318,  318,
 /*   820 */   318,  318,   48,  318,  318,  318,  324,   67,  340,  342,
 /*   830 */    66,   79,   78,   63,   71,  109,   49,  373,   90,  324,
 /*   840 */    67,  112,   48,  318,  318,  318,  318,   98,  324,   67,
 /*   850 */   112,  318,  318,  371,  318,   48,   58,  384,   69,  374,
 /*   860 */    80,  318,  371,  402,   48,  318,  318,  318,   29,  318,
 /*   870 */   318,  318,  318,  318,   28,  324,   67,  340,  342,   66,
 /*   880 */    79,   78,   63,   70,   60,  373,  113,  318,   60,  373,
 /*   890 */   102,   48,  318,  318,  318,  115,  324,   67,  112,  115,
 /*   900 */   324,   67,  112,  318,  318,  318,  318,  318,  318,  318,
 /*   910 */   371,  318,   48,  318,  371,  318,   48,  324,   67,  340,
 /*   920 */   342,   66,   79,   78,   61,  259,  260,  261,  262,  263,
 /*   930 */   318,  318,  318,   48,  324,   67,  340,  342,   66,   79,
 /*   940 */    78,   62,  318,  280,  318,  318,  318,  318,  318,  318,
 /*   950 */    48,  318,  318,  324,   67,  340,  342,   66,   79,   72,
 /*   960 */   324,   67,  340,  342,   66,   79,   73,  318,  318,   48,
 /*   970 */   318,  318,  318,  318,  318,  318,   48,  318,  318,  318,
 /*   980 */   324,   67,  340,  342,   66,   79,   74,  324,   67,  340,
 /*   990 */   342,   66,   79,   75,  318,  318,   48,  318,   93,  324,
 /*  1000 */    67,  112,  318,   48,   96,  324,   67,  112,  114,  324,
 /*  1010 */    67,  112,  318,  371,  318,   48,  318,  318,  318,  371,
 /*  1020 */   318,   48,  318,  371,  318,   48,  324,   67,  340,  345,
 /*  1030 */   318,  318,  318,  318,  115,  324,   67,  112,  324,   67,
 /*  1040 */   340,  344,   48,  324,   67,  340,  343,  318,  318,  371,
 /*  1050 */   318,   48,  318,  318,   48,  318,  318,  318,  318,   48,
 /*  1060 */   318,  324,   67,  340,  331,  318,  318,  318,  318,  318,
 /*  1070 */   318,  318,  318,  318,  318,  318,  318,   48,
};
static const YYCODETYPE yy_lookahead[] = {
 /*     0 */    76,    1,    2,    3,    4,   84,   85,   86,    8,    9,
 /*    10 */    10,  102,    3,   13,    8,    9,   16,   72,   73,   19,
 /*    20 */   111,  100,   22,   23,   10,   80,   84,   85,   86,   87,
 /*    30 */    88,   89,   90,   91,   92,   93,   94,   95,   96,   97,
 /*    40 */    40,   99,  100,   72,   73,   45,   46,   47,   48,   49,
 /*    50 */    75,   80,   81,   53,   75,   55,   56,   57,   58,   59,
 /*    60 */    60,   61,   62,    3,    6,    7,   66,   67,   66,   69,
 /*    70 */    10,    1,    2,    3,    4,   63,   72,   73,    8,    9,
 /*    80 */    10,   63,   63,   13,   26,   27,   16,   68,    3,   19,
 /*    90 */    28,   29,   22,   23,   69,   84,   85,   86,   87,   88,
 /*   100 */    89,   90,   91,   92,   93,   94,   95,   96,   97,    0,
 /*   110 */    40,  100,  108,  109,  110,   75,   76,   77,   78,  115,
 /*   120 */   116,  117,   69,   53,   69,   55,   56,   57,   58,   59,
 /*   130 */    60,   61,   62,   72,   73,    5,   66,   24,   25,   69,
 /*   140 */    75,   76,   77,   69,   83,   84,   85,   86,   75,   76,
 /*   150 */    77,   78,   79,   62,   45,   46,   47,   48,   49,   98,
 /*   160 */     0,  100,  101,  102,  103,  104,  105,  106,  107,   68,
 /*   170 */    69,  110,  111,  112,  113,  114,    1,    2,    3,    4,
 /*   180 */    84,   85,   86,    8,    9,   10,   69,   63,   13,   62,
 /*   190 */    56,   16,   62,   62,   19,   63,  100,   22,   23,   54,
 /*   200 */    72,   73,   10,   11,   12,   45,   46,   47,   48,   49,
 /*   210 */    63,   83,   84,   85,   86,   40,   62,   22,   23,   69,
 /*   220 */    45,   46,   47,   48,   49,   70,   98,   63,  100,  101,
 /*   230 */   102,  103,  104,  105,  106,  107,   18,   62,  110,  111,
 /*   240 */   112,   63,  114,   17,   69,   15,    1,    2,    3,    4,
 /*   250 */    84,   85,   86,    8,    9,   10,   14,   13,   13,   64,
 /*   260 */     5,   16,   63,   65,   19,   63,  100,   22,   23,    5,
 /*   270 */    84,   85,   86,   87,   88,   89,   90,   91,   92,   93,
 /*   280 */    94,   95,   96,  118,  118,   40,  100,  118,  118,  118,
 /*   290 */    45,   46,   47,   48,   49,  118,    1,    2,    3,    4,
 /*   300 */   118,  118,  118,    8,    9,   10,  118,   62,   13,  118,
 /*   310 */   118,   16,  118,  118,   19,  118,  118,   22,   23,    1,
 /*   320 */     2,    3,    4,  118,  118,  118,    8,    9,   10,  118,
 /*   330 */   118,   13,  118,  118,   16,   40,  118,   19,  118,  118,
 /*   340 */    22,   23,  118,   84,   85,   86,   87,   88,   83,   84,
 /*   350 */    85,   86,  118,  118,  118,  118,  118,   62,   40,  100,
 /*   360 */   118,  118,  118,   98,   69,  100,  101,  102,  103,  104,
 /*   370 */   105,  106,  107,  118,  118,  118,  111,  118,  118,  118,
 /*   380 */    62,   63,    1,    2,    3,    4,  118,  118,  118,    8,
 /*   390 */     9,   10,  118,  118,   13,  118,  118,   16,  118,  118,
 /*   400 */    19,  118,  118,   22,   23,    1,    2,    3,    4,  118,
 /*   410 */   118,  118,    8,    9,   10,  118,  118,   13,  118,  118,
 /*   420 */    16,   40,  118,   19,  118,  118,   22,   23,  118,   84,
 /*   430 */    85,   86,   87,   88,   83,   84,   85,   86,  118,  118,
 /*   440 */   118,  118,  118,   62,   40,  100,  118,  118,  118,   98,
 /*   450 */    69,  100,  101,  102,  103,  104,  105,  106,  107,  118,
 /*   460 */   118,  118,  111,  118,  118,  118,   62,   63,    1,    2,
 /*   470 */     3,    4,  118,  118,  118,    8,    9,   10,  118,  118,
 /*   480 */    13,  118,  118,   16,  118,  118,   19,   72,   73,   22,
 /*   490 */    23,   83,   84,   85,   86,  118,  118,  118,  118,  118,
 /*   500 */   118,   83,   84,   85,   86,  118,   98,   40,  100,  101,
 /*   510 */   102,  103,  104,  105,  106,  107,   98,  118,  100,  111,
 /*   520 */    83,   84,   85,   86,  118,  110,  118,  118,  118,   62,
 /*   530 */   115,  116,  117,  118,  118,   98,  118,  100,  101,  102,
 /*   540 */   103,  104,  105,  106,  107,  118,  118,  118,  111,  118,
 /*   550 */   118,   83,   84,   85,   86,  118,  118,  118,  118,  118,
 /*   560 */   118,   83,   84,   85,   86,  118,   98,  118,  100,  101,
 /*   570 */   102,  103,  104,  105,  106,  107,   98,  118,  100,  111,
 /*   580 */    41,  118,  104,  118,   45,   46,   47,   48,   49,  118,
 /*   590 */    83,   84,   85,   86,  118,  118,  118,  118,  118,   84,
 /*   600 */    85,   86,   87,   88,   89,   98,  118,  100,  101,  102,
 /*   610 */   103,  104,  105,  106,  107,  100,  118,  118,  111,   83,
 /*   620 */    84,   85,   86,  118,  118,  118,  118,  118,   84,   85,
 /*   630 */    86,   87,   88,   89,   98,  118,  100,  101,  102,  103,
 /*   640 */   104,  105,  106,  107,  100,  118,  118,  111,  118,  118,
 /*   650 */    83,   84,   85,   86,  118,  118,  118,  118,  118,  118,
 /*   660 */    83,   84,   85,   86,  118,   98,  118,  100,  101,  102,
 /*   670 */   103,  104,  105,  106,  107,   98,  118,  100,  111,  118,
 /*   680 */   118,  104,  118,   83,   84,   85,   86,  118,  118,   83,
 /*   690 */    84,   85,   86,  118,  118,  118,  118,  118,   98,  118,
 /*   700 */   100,  118,  118,  118,   98,  118,  100,  101,  102,  103,
 /*   710 */   104,  105,  106,  107,  118,  118,  118,  111,  118,    1,
 /*   720 */     2,    3,    4,  118,  118,  118,    8,    9,   10,  118,
 /*   730 */   118,   13,  118,  118,   16,  118,  118,   19,  118,  118,
 /*   740 */    22,   23,    1,    2,    3,    4,  118,  118,  118,    8,
 /*   750 */     9,   10,  118,  118,   13,  118,  118,   16,   40,  118,
 /*   760 */    19,  118,  118,   22,   23,  118,  118,   83,   84,   85,
 /*   770 */    86,   84,   85,   86,   87,  118,  118,  118,  118,  118,
 /*   780 */    62,   40,   98,  118,  100,  118,  118,  100,  118,   84,
 /*   790 */    85,   86,   87,   88,   89,   90,   91,   92,   93,   94,
 /*   800 */    95,  118,  118,   62,  118,  100,   84,   85,   86,   87,
 /*   810 */    88,   89,   90,   91,   92,   93,   94,  118,  118,  118,
 /*   820 */   118,  118,  100,  118,  118,  118,   84,   85,   86,   87,
 /*   830 */    88,   89,   90,   91,   92,   93,   72,   73,   83,   84,
 /*   840 */    85,   86,  100,  118,  118,  118,  118,   83,   84,   85,
 /*   850 */    86,  118,  118,   98,  118,  100,   75,   76,   77,   78,
 /*   860 */    79,  118,   98,   82,  100,  118,  118,  118,  104,  118,
 /*   870 */   118,  118,  118,  118,  110,   84,   85,   86,   87,   88,
 /*   880 */    89,   90,   91,   92,   72,   73,   74,  118,   72,   73,
 /*   890 */    74,  100,  118,  118,  118,   83,   84,   85,   86,   83,
 /*   900 */    84,   85,   86,  118,  118,  118,  118,  118,  118,  118,
 /*   910 */    98,  118,  100,  118,   98,  118,  100,   84,   85,   86,
 /*   920 */    87,   88,   89,   90,   91,   45,   46,   47,   48,   49,
 /*   930 */   118,  118,  118,  100,   84,   85,   86,   87,   88,   89,
 /*   940 */    90,   91,  118,   63,  118,  118,  118,  118,  118,  118,
 /*   950 */   100,  118,  118,   84,   85,   86,   87,   88,   89,   90,
 /*   960 */    84,   85,   86,   87,   88,   89,   90,  118,  118,  100,
 /*   970 */   118,  118,  118,  118,  118,  118,  100,  118,  118,  118,
 /*   980 */    84,   85,   86,   87,   88,   89,   90,   84,   85,   86,
 /*   990 */    87,   88,   89,   90,  118,  118,  100,  118,   83,   84,
 /*  1000 */    85,   86,  118,  100,   83,   84,   85,   86,   83,   84,
 /*  1010 */    85,   86,  118,   98,  118,  100,  118,  118,  118,   98,
 /*  1020 */   118,  100,  118,   98,  118,  100,   84,   85,   86,   87,
 /*  1030 */   118,  118,  118,  118,   83,   84,   85,   86,   84,   85,
 /*  1040 */    86,   87,  100,   84,   85,   86,   87,  118,  118,   98,
 /*  1050 */   118,  100,  118,  118,  100,  118,  118,  118,  118,  100,
 /*  1060 */   118,   84,   85,   86,   87,  118,  118,  118,  118,  118,
 /*  1070 */   118,  118,  118,  118,  118,  118,  118,  100,   72,   72,
 /*  1080 */    72,   72,   72,   72,   72,   72,   72,   72,   72,   72,
 /*  1090 */    72,   72,   72,   72,   72,   72,   72,   72,   72,   72,
 /*  1100 */    72,   72,   72,   72,   72,   72,   72,   72,   72,   72,
 /*  1110 */    72,   72,   72,   72,   72,   72,   72,   72,   72,   72,
 /*  1120 */    72,   72,   72,   72,   72,   72,   72,   72,   72,   72,
 /*  1130 */    72,   72,   72,   72,   72,   72,   72,   72,   72,   72,
 /*  1140 */    72,   72,   72,   72,   72,   72,   72,   72,   72,   72,
};
#define YY_SHIFT_COUNT    (116)
#define YY_SHIFT_MIN      (0)
#define YY_SHIFT_MAX      (880)
static const unsigned short int yy_shift_ofst[] = {
 /*     0 */   109,    0,    0,  467,  467,   70,   70,   70,   70,   70,
 /*    10 */    70,   70,   70,   70,  467,  467,  467,  467,  175,  467,
 /*    20 */   245,  245,  467,  467,  467,  467,  467,  467,  295,  295,
 /*    30 */   467,  467,  318,  381,  404,  718,  718,  718,  467,  467,
 /*    40 */   718,  718,  160,   60,  467,  467,  467,  467,  467,   60,
 /*    50 */   741,  718,  718,  880,   60,  539,   60,    2,    9,   14,
 /*    60 */    14,   58,   58,   58,  192,  192,  192,  195,   19,  130,
 /*    70 */    62,   62,  113,  113,  113,  113,    6,    6,  113,    6,
 /*    80 */   101,   12,   18,   25,   53,   55,   74,   85,   91,  117,
 /*    90 */   124,  127,  134,  132,  131,  145,  147,  154,  150,  155,
 /*   100 */   164,  218,  178,  226,  218,  230,  226,  242,  230,  244,
 /*   110 */   242,  244,  255,  199,  198,  202,  264,
};
#define YY_REDUCE_COUNT (60)
#define YY_REDUCE_MIN   (-91)
#define YY_REDUCE_MAX   (977)
static const short yy_reduce_ofst[] = {
 /*     0 */     4,   61,  128,  -58,   11,  265,  351,  408,  437,  468,
 /*    10 */   507,  536,  567,  606,  186,  705,  722,  742,  764,  791,
 /*    20 */   812,  816,  833,  850,  869,  876,  896,  903,  478,  577,
 /*    30 */   515,  544,  418,  600,  684,  755,  915,  921,  259,  345,
 /*    40 */   925,  951,  415,  781,  687,  942,  954,  959,  977,   73,
 /*    50 */   -79,   96,  166,  -29,   40,  -55,   65,  -91,  -76,  -25,
 /*    60 */   -21,
};
static const YYACTIONTYPE yy_default[] = {
 /*     0 */   316,  316,  316,  316,  316,  316,  316,  316,  316,  316,
 /*    10 */   316,  316,  316,  316,  316,  316,  316,  316,  316,  316,
 /*    20 */   316,  316,  316,  316,  316,  316,  316,  316,  316,  316,
 /*    30 */   316,  316,  316,  316,  316,  316,  316,  316,  316,  316,
 /*    40 */   316,  316,  316,  316,  316,  316,  316,  316,  316,  316,
 /*    50 */   316,  316,  316,  316,  316,  316,  316,  316,  316,  386,
 /*    60 */   391,  359,  358,  357,  348,  347,  346,  328,  316,  376,
 /*    70 */   361,  360,  356,  355,  354,  353,  351,  350,  352,  349,
 /*    80 */   316,  316,  316,  316,  316,  316,  316,  316,  316,  316,
 /*    90 */   316,  316,  316,  316,  316,  418,  316,  316,  316,  319,
 /*   100 */   316,  406,  316,  369,  370,  367,  368,  365,  366,  363,
 /*   110 */   364,  362,  316,  316,  316,  316,  376,
};
/********** End of lemon-generated parsing tables *****************************/

/* The next table maps tokens (terminal symbols) into fallback tokens.
** If a construct like the following:
**
**      %fallback ID X Y Z.
**
** appears in the grammar, then ID becomes a fallback token for X, Y,
** and Z.  Whenever one of the tokens X, Y, or Z is input to the parser
** but it does not parse, the type of the token is changed to ID and
** the parse is retried before an error is thrown.
**
** This feature can be used, for example, to cause some keywords in a language
** to revert to identifiers if they keyword does not apply in the context where
** it appears.
*/
#ifdef YYFALLBACK
static const YYCODETYPE yyFallback[] = {
};
#endif /* YYFALLBACK */

/* The following structure represents a single element of the
** parser's stack.  Information stored includes:
**
**   +  The state number for the parser at this level of the stack.
**
**   +  The value of the token stored at this level of the stack.
**      (In other words, the "major" token.)
**
**   +  The semantic value stored at this level of the stack.  This is
**      the information used by the action routines in the grammar.
**      It is sometimes called the "minor" token.
**
** After the "shift" half of a SHIFTREDUCE action, the stateno field
** actually contains the reduce action for the second half of the
** SHIFTREDUCE.
*/
struct yyStackEntry {
  YYACTIONTYPE stateno;  /* The state-number, or reduce action in SHIFTREDUCE */
  YYCODETYPE major;      /* The major token value.  This is the code
                         ** number for the token at this stack level */
  YYMINORTYPE minor;     /* The user-supplied minor token value.  This
                         ** is the value of the token  */
};
typedef struct yyStackEntry yyStackEntry;

/* The state of the parser is completely contained in an instance of
** the following structure */
struct yyParser {
  yyStackEntry *yytos;          /* Pointer to top element of the stack */
#ifdef YYTRACKMAXSTACKDEPTH
  int yyhwm;                    /* High-water mark of the stack */
#endif
#ifndef YYNOERRORRECOVERY
  int yyerrcnt;                 /* Shifts left before out of the error */
#endif
  ParseARG_SDECL                /* A place to hold %extra_argument */
  ParseCTX_SDECL                /* A place to hold %extra_context */
#if YYSTACKDEPTH<=0
  int yystksz;                  /* Current side of the stack */
  yyStackEntry *yystack;        /* The parser's stack */
  yyStackEntry yystk0;          /* First stack entry */
#else
  yyStackEntry yystack[YYSTACKDEPTH];  /* The parser's stack */
  yyStackEntry *yystackEnd;            /* Last entry in the stack */
#endif
};
typedef struct yyParser yyParser;

#include <assert.h>
#ifndef NDEBUG
#include <stdio.h>
static FILE *yyTraceFILE = 0;
static char *yyTracePrompt = 0;
#endif /* NDEBUG */

#ifndef NDEBUG
/*
** Turn parser tracing on by giving a stream to which to write the trace
** and a prompt to preface each trace message.  Tracing is turned off
** by making either argument NULL
**
** Inputs:
** <ul>
** <li> A FILE* to which trace output should be written.
**      If NULL, then tracing is turned off.
** <li> A prefix string written at the beginning of every
**      line of trace output.  If NULL, then tracing is
**      turned off.
** </ul>
**
** Outputs:
** None.
*/
void ParseTrace(FILE *TraceFILE, char *zTracePrompt){
  yyTraceFILE = TraceFILE;
  yyTracePrompt = zTracePrompt;
  if( yyTraceFILE==0 ) yyTracePrompt = 0;
  else if( yyTracePrompt==0 ) yyTraceFILE = 0;
}
#endif /* NDEBUG */

#if defined(YYCOVERAGE) || !defined(NDEBUG)
/* For tracing shifts, the names of all terminals and nonterminals
** are required.  The following table supplies these names */
static const char *const yyTokenName[] = {
  /*    0 */ "$",
  /*    1 */ "NUM",
  /*    2 */ "DEC",
  /*    3 */ "ID",
  /*    4 */ "STR",
  /*    5 */ "ASGN_OP",
  /*    6 */ "LT_OP",
  /*    7 */ "GT_OP",
  /*    8 */ "ADD_OP",
  /*    9 */ "SUB_OP",
  /*   10 */ "MUL_OP",
  /*   11 */ "DIV_OP",
  /*   12 */ "MOD_OP",
  /*   13 */ "AND_OP",
  /*   14 */ "OR_OP",
  /*   15 */ "XOR_OP",
  /*   16 */ "NOT_OP",
  /*   17 */ "LOGAND",
  /*   18 */ "LOGOR",
  /*   19 */ "LOGNOT",
  /*   20 */ "DOT_OP",
  /*   21 */ "PTR_OP",
  /*   22 */ "INC_OP",
  /*   23 */ "DEC_OP",
  /*   24 */ "SHL_OP",
  /*   25 */ "SHR_OP",
  /*   26 */ "LE_OP",
  /*   27 */ "GE_OP",
  /*   28 */ "EQ_OP",
  /*   29 */ "NE_OP",
  /*   30 */ "MULASGN",
  /*   31 */ "DIVASGN",
  /*   32 */ "MODASGN",
  /*   33 */ "ADDASGN",
  /*   34 */ "SUBASGN",
  /*   35 */ "SHLASGN",
  /*   36 */ "SHRASGN",
  /*   37 */ "ANDASGN",
  /*   38 */ "XORASGN",
  /*   39 */ "ORASGN",
  /*   40 */ "SIZEOF",
  /*   41 */ "ELLIPSIS",
  /*   42 */ "TYPEDEF",
  /*   43 */ "STATIC",
  /*   44 */ "CONST",
  /*   45 */ "VOID",
  /*   46 */ "CHAR",
  /*   47 */ "SHORT",
  /*   48 */ "INT",
  /*   49 */ "LONG",
  /*   50 */ "FLOAT",
  /*   51 */ "DOUBLE",
  /*   52 */ "TYPE",
  /*   53 */ "IF",
  /*   54 */ "ELSE",
  /*   55 */ "FOR",
  /*   56 */ "WHILE",
  /*   57 */ "DO",
  /*   58 */ "CONTINUE",
  /*   59 */ "BREAK",
  /*   60 */ "RETURN",
  /*   61 */ "GOTO",
  /*   62 */ "LP",
  /*   63 */ "RP",
  /*   64 */ "LS",
  /*   65 */ "RS",
  /*   66 */ "LB",
  /*   67 */ "RB",
  /*   68 */ "COM",
  /*   69 */ "SEM",
  /*   70 */ "COL",
  /*   71 */ "QUE",
  /*   72 */ "declaration_specifiers",
  /*   73 */ "type_specifier",
  /*   74 */ "type_name",
  /*   75 */ "pointer",
  /*   76 */ "direct_declarator",
  /*   77 */ "declarator",
  /*   78 */ "init_declarator",
  /*   79 */ "init_declarator_list",
  /*   80 */ "parameter_declaration",
  /*   81 */ "parameter_list",
  /*   82 */ "function_declarator",
  /*   83 */ "expression",
  /*   84 */ "primary_expression",
  /*   85 */ "postfix_expression",
  /*   86 */ "unary_expression",
  /*   87 */ "cast_expression",
  /*   88 */ "multiplicative_expression",
  /*   89 */ "additive_expression",
  /*   90 */ "shift_expression",
  /*   91 */ "relational_expression",
  /*   92 */ "equality_expression",
  /*   93 */ "and_expression",
  /*   94 */ "exclusive_or_expression",
  /*   95 */ "inclusive_or_expression",
  /*   96 */ "logical_and_expression",
  /*   97 */ "logical_or_expression",
  /*   98 */ "assignment_expression",
  /*   99 */ "initializer",
  /*  100 */ "unary_operator",
  /*  101 */ "statement",
  /*  102 */ "compound_statement",
  /*  103 */ "labeled_statement",
  /*  104 */ "expression_statement",
  /*  105 */ "selection_statement",
  /*  106 */ "iteration_statement",
  /*  107 */ "jump_statement",
  /*  108 */ "start",
  /*  109 */ "translation_unit",
  /*  110 */ "variable_declaration",
  /*  111 */ "block_begin",
  /*  112 */ "block_end",
  /*  113 */ "block_item_list",
  /*  114 */ "block_item",
  /*  115 */ "external_declaration",
  /*  116 */ "function_definition",
  /*  117 */ "function_signature",
};
#endif /* defined(YYCOVERAGE) || !defined(NDEBUG) */

#ifndef NDEBUG
/* For tracing reduce actions, the names of all rules are required.
*/
static const char *const yyRuleName[] = {
 /*   0 */ "primary_expression ::= ID",
 /*   1 */ "primary_expression ::= NUM",
 /*   2 */ "primary_expression ::= DEC",
 /*   3 */ "primary_expression ::= STR",
 /*   4 */ "primary_expression ::= LP expression RP",
 /*   5 */ "postfix_expression ::= primary_expression",
 /*   6 */ "postfix_expression ::= postfix_expression LS expression RS",
 /*   7 */ "postfix_expression ::= postfix_expression INC_OP",
 /*   8 */ "postfix_expression ::= postfix_expression DEC_OP",
 /*   9 */ "unary_expression ::= postfix_expression",
 /*  10 */ "unary_expression ::= INC_OP unary_expression",
 /*  11 */ "unary_expression ::= DEC_OP unary_expression",
 /*  12 */ "unary_expression ::= unary_operator cast_expression",
 /*  13 */ "unary_expression ::= SIZEOF unary_expression",
 /*  14 */ "unary_expression ::= SIZEOF LP type_name RP",
 /*  15 */ "unary_operator ::= AND_OP",
 /*  16 */ "unary_operator ::= MUL_OP",
 /*  17 */ "unary_operator ::= ADD_OP",
 /*  18 */ "unary_operator ::= SUB_OP",
 /*  19 */ "unary_operator ::= NOT_OP",
 /*  20 */ "unary_operator ::= LOGNOT",
 /*  21 */ "cast_expression ::= unary_expression",
 /*  22 */ "cast_expression ::= LP type_name RP cast_expression",
 /*  23 */ "multiplicative_expression ::= cast_expression",
 /*  24 */ "multiplicative_expression ::= multiplicative_expression MUL_OP cast_expression",
 /*  25 */ "multiplicative_expression ::= multiplicative_expression DIV_OP cast_expression",
 /*  26 */ "multiplicative_expression ::= multiplicative_expression MOD_OP cast_expression",
 /*  27 */ "additive_expression ::= multiplicative_expression",
 /*  28 */ "additive_expression ::= additive_expression ADD_OP multiplicative_expression",
 /*  29 */ "additive_expression ::= additive_expression SUB_OP multiplicative_expression",
 /*  30 */ "shift_expression ::= additive_expression",
 /*  31 */ "shift_expression ::= shift_expression SHL_OP additive_expression",
 /*  32 */ "shift_expression ::= shift_expression SHR_OP additive_expression",
 /*  33 */ "relational_expression ::= shift_expression",
 /*  34 */ "relational_expression ::= relational_expression LT_OP shift_expression",
 /*  35 */ "relational_expression ::= relational_expression GT_OP shift_expression",
 /*  36 */ "relational_expression ::= relational_expression LE_OP shift_expression",
 /*  37 */ "relational_expression ::= relational_expression GE_OP shift_expression",
 /*  38 */ "equality_expression ::= relational_expression",
 /*  39 */ "equality_expression ::= equality_expression EQ_OP relational_expression",
 /*  40 */ "equality_expression ::= equality_expression NE_OP relational_expression",
 /*  41 */ "and_expression ::= equality_expression",
 /*  42 */ "and_expression ::= and_expression AND_OP equality_expression",
 /*  43 */ "exclusive_or_expression ::= and_expression",
 /*  44 */ "exclusive_or_expression ::= exclusive_or_expression OR_OP and_expression",
 /*  45 */ "inclusive_or_expression ::= exclusive_or_expression",
 /*  46 */ "inclusive_or_expression ::= inclusive_or_expression XOR_OP exclusive_or_expression",
 /*  47 */ "logical_and_expression ::= inclusive_or_expression",
 /*  48 */ "logical_and_expression ::= logical_and_expression LOGAND inclusive_or_expression",
 /*  49 */ "logical_or_expression ::= logical_and_expression",
 /*  50 */ "logical_or_expression ::= logical_or_expression LOGOR logical_and_expression",
 /*  51 */ "assignment_expression ::= unary_expression ASGN_OP logical_or_expression",
 /*  52 */ "expression ::= assignment_expression",
 /*  53 */ "variable_declaration ::= declaration_specifiers init_declarator_list SEM",
 /*  54 */ "declaration_specifiers ::= type_specifier",
 /*  55 */ "init_declarator_list ::= init_declarator",
 /*  56 */ "init_declarator_list ::= init_declarator_list COM init_declarator",
 /*  57 */ "init_declarator ::= declarator",
 /*  58 */ "init_declarator ::= declarator ASGN_OP initializer",
 /*  59 */ "type_specifier ::= VOID",
 /*  60 */ "type_specifier ::= CHAR",
 /*  61 */ "type_specifier ::= SHORT",
 /*  62 */ "type_specifier ::= INT",
 /*  63 */ "type_specifier ::= LONG",
 /*  64 */ "declarator ::= pointer direct_declarator",
 /*  65 */ "declarator ::= direct_declarator",
 /*  66 */ "direct_declarator ::= ID",
 /*  67 */ "pointer ::= MUL_OP",
 /*  68 */ "pointer ::= MUL_OP pointer",
 /*  69 */ "parameter_list ::= parameter_declaration",
 /*  70 */ "parameter_list ::= parameter_list COM parameter_declaration",
 /*  71 */ "parameter_declaration ::= declaration_specifiers declarator",
 /*  72 */ "type_name ::= declaration_specifiers",
 /*  73 */ "type_name ::= declaration_specifiers pointer",
 /*  74 */ "statement ::= labeled_statement",
 /*  75 */ "labeled_statement ::= ID COL statement",
 /*  76 */ "block_begin ::= LB",
 /*  77 */ "block_end ::= RB",
 /*  78 */ "compound_statement ::= block_begin block_end",
 /*  79 */ "compound_statement ::= block_begin block_item_list block_end",
 /*  80 */ "function_declarator ::= declarator LP RP",
 /*  81 */ "function_declarator ::= declarator LP parameter_list RP",
 /*  82 */ "function_declarator ::= declarator LP parameter_list COM ELLIPSIS RP",
 /*  83 */ "function_signature ::= declaration_specifiers function_declarator",
 /*  84 */ "function_definition ::= function_signature compound_statement",
 /*  85 */ "start ::=",
 /*  86 */ "start ::= translation_unit",
 /*  87 */ "initializer ::= logical_or_expression",
 /*  88 */ "statement ::= compound_statement",
 /*  89 */ "statement ::= expression_statement",
 /*  90 */ "statement ::= selection_statement",
 /*  91 */ "statement ::= iteration_statement",
 /*  92 */ "statement ::= jump_statement",
 /*  93 */ "block_item_list ::= block_item",
 /*  94 */ "block_item_list ::= block_item_list block_item",
 /*  95 */ "block_item ::= variable_declaration",
 /*  96 */ "block_item ::= statement",
 /*  97 */ "expression_statement ::= SEM",
 /*  98 */ "expression_statement ::= expression SEM",
 /*  99 */ "selection_statement ::= IF LP expression RP statement",
 /* 100 */ "selection_statement ::= IF LP expression RP statement ELSE statement",
 /* 101 */ "iteration_statement ::= WHILE LP expression RP statement",
 /* 102 */ "iteration_statement ::= DO statement WHILE LP expression RP SEM",
 /* 103 */ "iteration_statement ::= FOR LP expression_statement expression_statement RP statement",
 /* 104 */ "iteration_statement ::= FOR LP expression_statement expression_statement expression RP statement",
 /* 105 */ "iteration_statement ::= FOR LP variable_declaration expression_statement RP statement",
 /* 106 */ "iteration_statement ::= FOR LP variable_declaration expression_statement expression RP statement",
 /* 107 */ "jump_statement ::= GOTO ID SEM",
 /* 108 */ "jump_statement ::= CONTINUE SEM",
 /* 109 */ "jump_statement ::= BREAK SEM",
 /* 110 */ "jump_statement ::= RETURN SEM",
 /* 111 */ "jump_statement ::= RETURN expression SEM",
 /* 112 */ "translation_unit ::= external_declaration",
 /* 113 */ "translation_unit ::= translation_unit external_declaration",
 /* 114 */ "external_declaration ::= variable_declaration",
 /* 115 */ "external_declaration ::= function_definition",
};
#endif /* NDEBUG */


#if YYSTACKDEPTH<=0
/*
** Try to increase the size of the parser stack.  Return the number
** of errors.  Return 0 on success.
*/
static int yyGrowStack(yyParser *p){
  int newSize;
  int idx;
  yyStackEntry *pNew;

  newSize = p->yystksz*2 + 100;
  idx = p->yytos ? (int)(p->yytos - p->yystack) : 0;
  if( p->yystack==&p->yystk0 ){
    pNew = malloc(newSize*sizeof(pNew[0]));
    if( pNew ) pNew[0] = p->yystk0;
  }else{
    pNew = realloc(p->yystack, newSize*sizeof(pNew[0]));
  }
  if( pNew ){
    p->yystack = pNew;
    p->yytos = &p->yystack[idx];
#ifndef NDEBUG
    if( yyTraceFILE ){
      fprintf(yyTraceFILE,"%sStack grows from %d to %d entries.\n",
              yyTracePrompt, p->yystksz, newSize);
    }
#endif
    p->yystksz = newSize;
  }
  return pNew==0;
}
#endif

/* Datatype of the argument to the memory allocated passed as the
** second argument to ParseAlloc() below.  This can be changed by
** putting an appropriate #define in the %include section of the input
** grammar.
*/
#ifndef YYMALLOCARGTYPE
# define YYMALLOCARGTYPE size_t
#endif

/* Initialize a new parser that has already been allocated.
*/
void ParseInit(void *yypRawParser ParseCTX_PDECL){
  yyParser *yypParser = (yyParser*)yypRawParser;
  ParseCTX_STORE
#ifdef YYTRACKMAXSTACKDEPTH
  yypParser->yyhwm = 0;
#endif
#if YYSTACKDEPTH<=0
  yypParser->yytos = NULL;
  yypParser->yystack = NULL;
  yypParser->yystksz = 0;
  if( yyGrowStack(yypParser) ){
    yypParser->yystack = &yypParser->yystk0;
    yypParser->yystksz = 1;
  }
#endif
#ifndef YYNOERRORRECOVERY
  yypParser->yyerrcnt = -1;
#endif
  yypParser->yytos = yypParser->yystack;
  yypParser->yystack[0].stateno = 0;
  yypParser->yystack[0].major = 0;
#if YYSTACKDEPTH>0
  yypParser->yystackEnd = &yypParser->yystack[YYSTACKDEPTH-1];
#endif
}

#ifndef Parse_ENGINEALWAYSONSTACK
/*
** This function allocates a new parser.
** The only argument is a pointer to a function which works like
** malloc.
**
** Inputs:
** A pointer to the function used to allocate memory.
**
** Outputs:
** A pointer to a parser.  This pointer is used in subsequent calls
** to Parse and ParseFree.
*/
void *ParseAlloc(void *(*mallocProc)(YYMALLOCARGTYPE) ParseCTX_PDECL){
  yyParser *yypParser;
  yypParser = (yyParser*)(*mallocProc)( (YYMALLOCARGTYPE)sizeof(yyParser) );
  if( yypParser ){
    ParseCTX_STORE
    ParseInit(yypParser ParseCTX_PARAM);
  }
  return (void*)yypParser;
}
#endif /* Parse_ENGINEALWAYSONSTACK */


/* The following function deletes the "minor type" or semantic value
** associated with a symbol.  The symbol can be either a terminal
** or nonterminal. "yymajor" is the symbol code, and "yypminor" is
** a pointer to the value to be deleted.  The code used to do the
** deletions is derived from the %destructor and/or %token_destructor
** directives of the input grammar.
*/
static void yy_destructor(
  yyParser *yypParser,    /* The parser */
  YYCODETYPE yymajor,     /* Type code for object to destroy */
  YYMINORTYPE *yypminor   /* The object to be destroyed */
){
  ParseARG_FETCH
  ParseCTX_FETCH
  switch( yymajor ){
    /* Here is inserted the actions which take place when a
    ** terminal or non-terminal is destroyed.  This can happen
    ** when the symbol is popped from the stack during a
    ** reduce or during error processing or when a parser is
    ** being destroyed before it is finished parsing.
    **
    ** Note: during a reduce, the only symbols destroyed are those
    ** which appear on the RHS of the rule, but which are *not* used
    ** inside the C code.
    */
/********* Begin destructor definitions ***************************************/
    case 79: /* init_declarator_list */
{
#line 103 "src\\parser.y"
 delete (yypminor->yy188); 
#line 1088 "src\\parser.c"
}
      break;
/********* End destructor definitions *****************************************/
    default:  break;   /* If no destructor action specified: do nothing */
  }
}

/*
** Pop the parser's stack once.
**
** If there is a destructor routine associated with the token which
** is popped from the stack, then call it.
*/
static void yy_pop_parser_stack(yyParser *pParser){
  yyStackEntry *yytos;
  assert( pParser->yytos!=0 );
  assert( pParser->yytos > pParser->yystack );
  yytos = pParser->yytos--;
#ifndef NDEBUG
  if( yyTraceFILE ){
    fprintf(yyTraceFILE,"%sPopping %s\n",
      yyTracePrompt,
      yyTokenName[yytos->major]);
  }
#endif
  yy_destructor(pParser, yytos->major, &yytos->minor);
}

/*
** Clear all secondary memory allocations from the parser
*/
void ParseFinalize(void *p){
  yyParser *pParser = (yyParser*)p;
  while( pParser->yytos>pParser->yystack ) yy_pop_parser_stack(pParser);
#if YYSTACKDEPTH<=0
  if( pParser->yystack!=&pParser->yystk0 ) free(pParser->yystack);
#endif
}

#ifndef Parse_ENGINEALWAYSONSTACK
/*
** Deallocate and destroy a parser.  Destructors are called for
** all stack elements before shutting the parser down.
**
** If the YYPARSEFREENEVERNULL macro exists (for example because it
** is defined in a %include section of the input grammar) then it is
** assumed that the input pointer is never NULL.
*/
void ParseFree(
  void *p,                    /* The parser to be deleted */
  void (*freeProc)(void*)     /* Function used to reclaim memory */
){
#ifndef YYPARSEFREENEVERNULL
  if( p==0 ) return;
#endif
  ParseFinalize(p);
  (*freeProc)(p);
}
#endif /* Parse_ENGINEALWAYSONSTACK */

/*
** Return the peak depth of the stack for a parser.
*/
#ifdef YYTRACKMAXSTACKDEPTH
int ParseStackPeak(void *p){
  yyParser *pParser = (yyParser*)p;
  return pParser->yyhwm;
}
#endif

/* This array of booleans keeps track of the parser statement
** coverage.  The element yycoverage[X][Y] is set when the parser
** is in state X and has a lookahead token Y.  In a well-tested
** systems, every element of this matrix should end up being set.
*/
#if defined(YYCOVERAGE)
static unsigned char yycoverage[YYNSTATE][YYNTOKEN];
#endif

/*
** Write into out a description of every state/lookahead combination that
**
**   (1)  has not been used by the parser, and
**   (2)  is not a syntax error.
**
** Return the number of missed state/lookahead combinations.
*/
#if defined(YYCOVERAGE)
int ParseCoverage(FILE *out){
  int stateno, iLookAhead, i;
  int nMissed = 0;
  for(stateno=0; stateno<YYNSTATE; stateno++){
    i = yy_shift_ofst[stateno];
    for(iLookAhead=0; iLookAhead<YYNTOKEN; iLookAhead++){
      if( yy_lookahead[i+iLookAhead]!=iLookAhead ) continue;
      if( yycoverage[stateno][iLookAhead]==0 ) nMissed++;
      if( out ){
        fprintf(out,"State %d lookahead %s %s\n", stateno,
                yyTokenName[iLookAhead],
                yycoverage[stateno][iLookAhead] ? "ok" : "missed");
      }
    }
  }
  return nMissed;
}
#endif

/*
** Find the appropriate action for a parser given the terminal
** look-ahead token iLookAhead.
*/
static YYACTIONTYPE yy_find_shift_action(
  YYCODETYPE iLookAhead,    /* The look-ahead token */
  YYACTIONTYPE stateno      /* Current state number */
){
  int i;

  if( stateno>YY_MAX_SHIFT ) return stateno;
  assert( stateno <= YY_SHIFT_COUNT );
#if defined(YYCOVERAGE)
  yycoverage[stateno][iLookAhead] = 1;
#endif
  do{
    i = yy_shift_ofst[stateno];
    assert( i>=0 );
    assert( i<=YY_ACTTAB_COUNT );
    assert( i+YYNTOKEN<=(int)YY_NLOOKAHEAD );
    assert( iLookAhead!=YYNOCODE );
    assert( iLookAhead < YYNTOKEN );
    i += iLookAhead;
    assert( i<(int)YY_NLOOKAHEAD );
    if( yy_lookahead[i]!=iLookAhead ){
#ifdef YYFALLBACK
      YYCODETYPE iFallback;            /* Fallback token */
      assert( iLookAhead<sizeof(yyFallback)/sizeof(yyFallback[0]) );
      iFallback = yyFallback[iLookAhead];
      if( iFallback!=0 ){
#ifndef NDEBUG
        if( yyTraceFILE ){
          fprintf(yyTraceFILE, "%sFALLBACK %s => %s\n",
             yyTracePrompt, yyTokenName[iLookAhead], yyTokenName[iFallback]);
        }
#endif
        assert( yyFallback[iFallback]==0 ); /* Fallback loop must terminate */
        iLookAhead = iFallback;
        continue;
      }
#endif
#ifdef YYWILDCARD
      {
        int j = i - iLookAhead + YYWILDCARD;
        assert( j<(int)(sizeof(yy_lookahead)/sizeof(yy_lookahead[0])) );
        if( yy_lookahead[j]==YYWILDCARD && iLookAhead>0 ){
#ifndef NDEBUG
          if( yyTraceFILE ){
            fprintf(yyTraceFILE, "%sWILDCARD %s => %s\n",
               yyTracePrompt, yyTokenName[iLookAhead],
               yyTokenName[YYWILDCARD]);
          }
#endif /* NDEBUG */
          return yy_action[j];
        }
      }
#endif /* YYWILDCARD */
      return yy_default[stateno];
    }else{
      assert( i>=0 && i<(int)(sizeof(yy_action)/sizeof(yy_action[0])) );
      return yy_action[i];
    }
  }while(1);
}

/*
** Find the appropriate action for a parser given the non-terminal
** look-ahead token iLookAhead.
*/
static YYACTIONTYPE yy_find_reduce_action(
  YYACTIONTYPE stateno,     /* Current state number */
  YYCODETYPE iLookAhead     /* The look-ahead token */
){
  int i;
#ifdef YYERRORSYMBOL
  if( stateno>YY_REDUCE_COUNT ){
    return yy_default[stateno];
  }
#else
  assert( stateno<=YY_REDUCE_COUNT );
#endif
  i = yy_reduce_ofst[stateno];
  assert( iLookAhead!=YYNOCODE );
  i += iLookAhead;
#ifdef YYERRORSYMBOL
  if( i<0 || i>=YY_ACTTAB_COUNT || yy_lookahead[i]!=iLookAhead ){
    return yy_default[stateno];
  }
#else
  assert( i>=0 && i<YY_ACTTAB_COUNT );
  assert( yy_lookahead[i]==iLookAhead );
#endif
  return yy_action[i];
}

/*
** The following routine is called if the stack overflows.
*/
static void yyStackOverflow(yyParser *yypParser){
   ParseARG_FETCH
   ParseCTX_FETCH
#ifndef NDEBUG
   if( yyTraceFILE ){
     fprintf(yyTraceFILE,"%sStack Overflow!\n",yyTracePrompt);
   }
#endif
   while( yypParser->yytos>yypParser->yystack ) yy_pop_parser_stack(yypParser);
   /* Here code is inserted which will execute if the parser
   ** stack every overflows */
/******** Begin %stack_overflow code ******************************************/
/******** End %stack_overflow code ********************************************/
   ParseARG_STORE /* Suppress warning about unused %extra_argument var */
   ParseCTX_STORE
}

/*
** Print tracing information for a SHIFT action
*/
#ifndef NDEBUG
static void yyTraceShift(yyParser *yypParser, int yyNewState, const char *zTag){
  if( yyTraceFILE ){
    if( yyNewState<YYNSTATE ){
      fprintf(yyTraceFILE,"%s%s '%s', go to state %d\n",
         yyTracePrompt, zTag, yyTokenName[yypParser->yytos->major],
         yyNewState);
    }else{
      fprintf(yyTraceFILE,"%s%s '%s', pending reduce %d\n",
         yyTracePrompt, zTag, yyTokenName[yypParser->yytos->major],
         yyNewState - YY_MIN_REDUCE);
    }
  }
}
#else
# define yyTraceShift(X,Y,Z)
#endif

/*
** Perform a shift action.
*/
static void yy_shift(
  yyParser *yypParser,          /* The parser to be shifted */
  YYACTIONTYPE yyNewState,      /* The new state to shift in */
  YYCODETYPE yyMajor,           /* The major token to shift in */
  ParseTOKENTYPE yyMinor        /* The minor token to shift in */
){
  yyStackEntry *yytos;
  yypParser->yytos++;
#ifdef YYTRACKMAXSTACKDEPTH
  if( (int)(yypParser->yytos - yypParser->yystack)>yypParser->yyhwm ){
    yypParser->yyhwm++;
    assert( yypParser->yyhwm == (int)(yypParser->yytos - yypParser->yystack) );
  }
#endif
#if YYSTACKDEPTH>0
  if( yypParser->yytos>yypParser->yystackEnd ){
    yypParser->yytos--;
    yyStackOverflow(yypParser);
    return;
  }
#else
  if( yypParser->yytos>=&yypParser->yystack[yypParser->yystksz] ){
    if( yyGrowStack(yypParser) ){
      yypParser->yytos--;
      yyStackOverflow(yypParser);
      return;
    }
  }
#endif
  if( yyNewState > YY_MAX_SHIFT ){
    yyNewState += YY_MIN_REDUCE - YY_MIN_SHIFTREDUCE;
  }
  yytos = yypParser->yytos;
  yytos->stateno = yyNewState;
  yytos->major = yyMajor;
  yytos->minor.yy0 = yyMinor;
  yyTraceShift(yypParser, yyNewState, "Shift");
}

/* For rule J, yyRuleInfoLhs[J] contains the symbol on the left-hand side
** of that rule */
static const YYCODETYPE yyRuleInfoLhs[] = {
    84,  /* (0) primary_expression ::= ID */
    84,  /* (1) primary_expression ::= NUM */
    84,  /* (2) primary_expression ::= DEC */
    84,  /* (3) primary_expression ::= STR */
    84,  /* (4) primary_expression ::= LP expression RP */
    85,  /* (5) postfix_expression ::= primary_expression */
    85,  /* (6) postfix_expression ::= postfix_expression LS expression RS */
    85,  /* (7) postfix_expression ::= postfix_expression INC_OP */
    85,  /* (8) postfix_expression ::= postfix_expression DEC_OP */
    86,  /* (9) unary_expression ::= postfix_expression */
    86,  /* (10) unary_expression ::= INC_OP unary_expression */
    86,  /* (11) unary_expression ::= DEC_OP unary_expression */
    86,  /* (12) unary_expression ::= unary_operator cast_expression */
    86,  /* (13) unary_expression ::= SIZEOF unary_expression */
    86,  /* (14) unary_expression ::= SIZEOF LP type_name RP */
   100,  /* (15) unary_operator ::= AND_OP */
   100,  /* (16) unary_operator ::= MUL_OP */
   100,  /* (17) unary_operator ::= ADD_OP */
   100,  /* (18) unary_operator ::= SUB_OP */
   100,  /* (19) unary_operator ::= NOT_OP */
   100,  /* (20) unary_operator ::= LOGNOT */
    87,  /* (21) cast_expression ::= unary_expression */
    87,  /* (22) cast_expression ::= LP type_name RP cast_expression */
    88,  /* (23) multiplicative_expression ::= cast_expression */
    88,  /* (24) multiplicative_expression ::= multiplicative_expression MUL_OP cast_expression */
    88,  /* (25) multiplicative_expression ::= multiplicative_expression DIV_OP cast_expression */
    88,  /* (26) multiplicative_expression ::= multiplicative_expression MOD_OP cast_expression */
    89,  /* (27) additive_expression ::= multiplicative_expression */
    89,  /* (28) additive_expression ::= additive_expression ADD_OP multiplicative_expression */
    89,  /* (29) additive_expression ::= additive_expression SUB_OP multiplicative_expression */
    90,  /* (30) shift_expression ::= additive_expression */
    90,  /* (31) shift_expression ::= shift_expression SHL_OP additive_expression */
    90,  /* (32) shift_expression ::= shift_expression SHR_OP additive_expression */
    91,  /* (33) relational_expression ::= shift_expression */
    91,  /* (34) relational_expression ::= relational_expression LT_OP shift_expression */
    91,  /* (35) relational_expression ::= relational_expression GT_OP shift_expression */
    91,  /* (36) relational_expression ::= relational_expression LE_OP shift_expression */
    91,  /* (37) relational_expression ::= relational_expression GE_OP shift_expression */
    92,  /* (38) equality_expression ::= relational_expression */
    92,  /* (39) equality_expression ::= equality_expression EQ_OP relational_expression */
    92,  /* (40) equality_expression ::= equality_expression NE_OP relational_expression */
    93,  /* (41) and_expression ::= equality_expression */
    93,  /* (42) and_expression ::= and_expression AND_OP equality_expression */
    94,  /* (43) exclusive_or_expression ::= and_expression */
    94,  /* (44) exclusive_or_expression ::= exclusive_or_expression OR_OP and_expression */
    95,  /* (45) inclusive_or_expression ::= exclusive_or_expression */
    95,  /* (46) inclusive_or_expression ::= inclusive_or_expression XOR_OP exclusive_or_expression */
    96,  /* (47) logical_and_expression ::= inclusive_or_expression */
    96,  /* (48) logical_and_expression ::= logical_and_expression LOGAND inclusive_or_expression */
    97,  /* (49) logical_or_expression ::= logical_and_expression */
    97,  /* (50) logical_or_expression ::= logical_or_expression LOGOR logical_and_expression */
    98,  /* (51) assignment_expression ::= unary_expression ASGN_OP logical_or_expression */
    83,  /* (52) expression ::= assignment_expression */
   110,  /* (53) variable_declaration ::= declaration_specifiers init_declarator_list SEM */
    72,  /* (54) declaration_specifiers ::= type_specifier */
    79,  /* (55) init_declarator_list ::= init_declarator */
    79,  /* (56) init_declarator_list ::= init_declarator_list COM init_declarator */
    78,  /* (57) init_declarator ::= declarator */
    78,  /* (58) init_declarator ::= declarator ASGN_OP initializer */
    73,  /* (59) type_specifier ::= VOID */
    73,  /* (60) type_specifier ::= CHAR */
    73,  /* (61) type_specifier ::= SHORT */
    73,  /* (62) type_specifier ::= INT */
    73,  /* (63) type_specifier ::= LONG */
    77,  /* (64) declarator ::= pointer direct_declarator */
    77,  /* (65) declarator ::= direct_declarator */
    76,  /* (66) direct_declarator ::= ID */
    75,  /* (67) pointer ::= MUL_OP */
    75,  /* (68) pointer ::= MUL_OP pointer */
    81,  /* (69) parameter_list ::= parameter_declaration */
    81,  /* (70) parameter_list ::= parameter_list COM parameter_declaration */
    80,  /* (71) parameter_declaration ::= declaration_specifiers declarator */
    74,  /* (72) type_name ::= declaration_specifiers */
    74,  /* (73) type_name ::= declaration_specifiers pointer */
   101,  /* (74) statement ::= labeled_statement */
   103,  /* (75) labeled_statement ::= ID COL statement */
   111,  /* (76) block_begin ::= LB */
   112,  /* (77) block_end ::= RB */
   102,  /* (78) compound_statement ::= block_begin block_end */
   102,  /* (79) compound_statement ::= block_begin block_item_list block_end */
    82,  /* (80) function_declarator ::= declarator LP RP */
    82,  /* (81) function_declarator ::= declarator LP parameter_list RP */
    82,  /* (82) function_declarator ::= declarator LP parameter_list COM ELLIPSIS RP */
   117,  /* (83) function_signature ::= declaration_specifiers function_declarator */
   116,  /* (84) function_definition ::= function_signature compound_statement */
   108,  /* (85) start ::= */
   108,  /* (86) start ::= translation_unit */
    99,  /* (87) initializer ::= logical_or_expression */
   101,  /* (88) statement ::= compound_statement */
   101,  /* (89) statement ::= expression_statement */
   101,  /* (90) statement ::= selection_statement */
   101,  /* (91) statement ::= iteration_statement */
   101,  /* (92) statement ::= jump_statement */
   113,  /* (93) block_item_list ::= block_item */
   113,  /* (94) block_item_list ::= block_item_list block_item */
   114,  /* (95) block_item ::= variable_declaration */
   114,  /* (96) block_item ::= statement */
   104,  /* (97) expression_statement ::= SEM */
   104,  /* (98) expression_statement ::= expression SEM */
   105,  /* (99) selection_statement ::= IF LP expression RP statement */
   105,  /* (100) selection_statement ::= IF LP expression RP statement ELSE statement */
   106,  /* (101) iteration_statement ::= WHILE LP expression RP statement */
   106,  /* (102) iteration_statement ::= DO statement WHILE LP expression RP SEM */
   106,  /* (103) iteration_statement ::= FOR LP expression_statement expression_statement RP statement */
   106,  /* (104) iteration_statement ::= FOR LP expression_statement expression_statement expression RP statement */
   106,  /* (105) iteration_statement ::= FOR LP variable_declaration expression_statement RP statement */
   106,  /* (106) iteration_statement ::= FOR LP variable_declaration expression_statement expression RP statement */
   107,  /* (107) jump_statement ::= GOTO ID SEM */
   107,  /* (108) jump_statement ::= CONTINUE SEM */
   107,  /* (109) jump_statement ::= BREAK SEM */
   107,  /* (110) jump_statement ::= RETURN SEM */
   107,  /* (111) jump_statement ::= RETURN expression SEM */
   109,  /* (112) translation_unit ::= external_declaration */
   109,  /* (113) translation_unit ::= translation_unit external_declaration */
   115,  /* (114) external_declaration ::= variable_declaration */
   115,  /* (115) external_declaration ::= function_definition */
};

/* For rule J, yyRuleInfoNRhs[J] contains the negative of the number
** of symbols on the right-hand side of that rule. */
static const signed char yyRuleInfoNRhs[] = {
   -1,  /* (0) primary_expression ::= ID */
   -1,  /* (1) primary_expression ::= NUM */
   -1,  /* (2) primary_expression ::= DEC */
   -1,  /* (3) primary_expression ::= STR */
   -3,  /* (4) primary_expression ::= LP expression RP */
   -1,  /* (5) postfix_expression ::= primary_expression */
   -4,  /* (6) postfix_expression ::= postfix_expression LS expression RS */
   -2,  /* (7) postfix_expression ::= postfix_expression INC_OP */
   -2,  /* (8) postfix_expression ::= postfix_expression DEC_OP */
   -1,  /* (9) unary_expression ::= postfix_expression */
   -2,  /* (10) unary_expression ::= INC_OP unary_expression */
   -2,  /* (11) unary_expression ::= DEC_OP unary_expression */
   -2,  /* (12) unary_expression ::= unary_operator cast_expression */
   -2,  /* (13) unary_expression ::= SIZEOF unary_expression */
   -4,  /* (14) unary_expression ::= SIZEOF LP type_name RP */
   -1,  /* (15) unary_operator ::= AND_OP */
   -1,  /* (16) unary_operator ::= MUL_OP */
   -1,  /* (17) unary_operator ::= ADD_OP */
   -1,  /* (18) unary_operator ::= SUB_OP */
   -1,  /* (19) unary_operator ::= NOT_OP */
   -1,  /* (20) unary_operator ::= LOGNOT */
   -1,  /* (21) cast_expression ::= unary_expression */
   -4,  /* (22) cast_expression ::= LP type_name RP cast_expression */
   -1,  /* (23) multiplicative_expression ::= cast_expression */
   -3,  /* (24) multiplicative_expression ::= multiplicative_expression MUL_OP cast_expression */
   -3,  /* (25) multiplicative_expression ::= multiplicative_expression DIV_OP cast_expression */
   -3,  /* (26) multiplicative_expression ::= multiplicative_expression MOD_OP cast_expression */
   -1,  /* (27) additive_expression ::= multiplicative_expression */
   -3,  /* (28) additive_expression ::= additive_expression ADD_OP multiplicative_expression */
   -3,  /* (29) additive_expression ::= additive_expression SUB_OP multiplicative_expression */
   -1,  /* (30) shift_expression ::= additive_expression */
   -3,  /* (31) shift_expression ::= shift_expression SHL_OP additive_expression */
   -3,  /* (32) shift_expression ::= shift_expression SHR_OP additive_expression */
   -1,  /* (33) relational_expression ::= shift_expression */
   -3,  /* (34) relational_expression ::= relational_expression LT_OP shift_expression */
   -3,  /* (35) relational_expression ::= relational_expression GT_OP shift_expression */
   -3,  /* (36) relational_expression ::= relational_expression LE_OP shift_expression */
   -3,  /* (37) relational_expression ::= relational_expression GE_OP shift_expression */
   -1,  /* (38) equality_expression ::= relational_expression */
   -3,  /* (39) equality_expression ::= equality_expression EQ_OP relational_expression */
   -3,  /* (40) equality_expression ::= equality_expression NE_OP relational_expression */
   -1,  /* (41) and_expression ::= equality_expression */
   -3,  /* (42) and_expression ::= and_expression AND_OP equality_expression */
   -1,  /* (43) exclusive_or_expression ::= and_expression */
   -3,  /* (44) exclusive_or_expression ::= exclusive_or_expression OR_OP and_expression */
   -1,  /* (45) inclusive_or_expression ::= exclusive_or_expression */
   -3,  /* (46) inclusive_or_expression ::= inclusive_or_expression XOR_OP exclusive_or_expression */
   -1,  /* (47) logical_and_expression ::= inclusive_or_expression */
   -3,  /* (48) logical_and_expression ::= logical_and_expression LOGAND inclusive_or_expression */
   -1,  /* (49) logical_or_expression ::= logical_and_expression */
   -3,  /* (50) logical_or_expression ::= logical_or_expression LOGOR logical_and_expression */
   -3,  /* (51) assignment_expression ::= unary_expression ASGN_OP logical_or_expression */
   -1,  /* (52) expression ::= assignment_expression */
   -3,  /* (53) variable_declaration ::= declaration_specifiers init_declarator_list SEM */
   -1,  /* (54) declaration_specifiers ::= type_specifier */
   -1,  /* (55) init_declarator_list ::= init_declarator */
   -3,  /* (56) init_declarator_list ::= init_declarator_list COM init_declarator */
   -1,  /* (57) init_declarator ::= declarator */
   -3,  /* (58) init_declarator ::= declarator ASGN_OP initializer */
   -1,  /* (59) type_specifier ::= VOID */
   -1,  /* (60) type_specifier ::= CHAR */
   -1,  /* (61) type_specifier ::= SHORT */
   -1,  /* (62) type_specifier ::= INT */
   -1,  /* (63) type_specifier ::= LONG */
   -2,  /* (64) declarator ::= pointer direct_declarator */
   -1,  /* (65) declarator ::= direct_declarator */
   -1,  /* (66) direct_declarator ::= ID */
   -1,  /* (67) pointer ::= MUL_OP */
   -2,  /* (68) pointer ::= MUL_OP pointer */
   -1,  /* (69) parameter_list ::= parameter_declaration */
   -3,  /* (70) parameter_list ::= parameter_list COM parameter_declaration */
   -2,  /* (71) parameter_declaration ::= declaration_specifiers declarator */
   -1,  /* (72) type_name ::= declaration_specifiers */
   -2,  /* (73) type_name ::= declaration_specifiers pointer */
   -1,  /* (74) statement ::= labeled_statement */
   -3,  /* (75) labeled_statement ::= ID COL statement */
   -1,  /* (76) block_begin ::= LB */
   -1,  /* (77) block_end ::= RB */
   -2,  /* (78) compound_statement ::= block_begin block_end */
   -3,  /* (79) compound_statement ::= block_begin block_item_list block_end */
   -3,  /* (80) function_declarator ::= declarator LP RP */
   -4,  /* (81) function_declarator ::= declarator LP parameter_list RP */
   -6,  /* (82) function_declarator ::= declarator LP parameter_list COM ELLIPSIS RP */
   -2,  /* (83) function_signature ::= declaration_specifiers function_declarator */
   -2,  /* (84) function_definition ::= function_signature compound_statement */
    0,  /* (85) start ::= */
   -1,  /* (86) start ::= translation_unit */
   -1,  /* (87) initializer ::= logical_or_expression */
   -1,  /* (88) statement ::= compound_statement */
   -1,  /* (89) statement ::= expression_statement */
   -1,  /* (90) statement ::= selection_statement */
   -1,  /* (91) statement ::= iteration_statement */
   -1,  /* (92) statement ::= jump_statement */
   -1,  /* (93) block_item_list ::= block_item */
   -2,  /* (94) block_item_list ::= block_item_list block_item */
   -1,  /* (95) block_item ::= variable_declaration */
   -1,  /* (96) block_item ::= statement */
   -1,  /* (97) expression_statement ::= SEM */
   -2,  /* (98) expression_statement ::= expression SEM */
   -5,  /* (99) selection_statement ::= IF LP expression RP statement */
   -7,  /* (100) selection_statement ::= IF LP expression RP statement ELSE statement */
   -5,  /* (101) iteration_statement ::= WHILE LP expression RP statement */
   -7,  /* (102) iteration_statement ::= DO statement WHILE LP expression RP SEM */
   -6,  /* (103) iteration_statement ::= FOR LP expression_statement expression_statement RP statement */
   -7,  /* (104) iteration_statement ::= FOR LP expression_statement expression_statement expression RP statement */
   -6,  /* (105) iteration_statement ::= FOR LP variable_declaration expression_statement RP statement */
   -7,  /* (106) iteration_statement ::= FOR LP variable_declaration expression_statement expression RP statement */
   -3,  /* (107) jump_statement ::= GOTO ID SEM */
   -2,  /* (108) jump_statement ::= CONTINUE SEM */
   -2,  /* (109) jump_statement ::= BREAK SEM */
   -2,  /* (110) jump_statement ::= RETURN SEM */
   -3,  /* (111) jump_statement ::= RETURN expression SEM */
   -1,  /* (112) translation_unit ::= external_declaration */
   -2,  /* (113) translation_unit ::= translation_unit external_declaration */
   -1,  /* (114) external_declaration ::= variable_declaration */
   -1,  /* (115) external_declaration ::= function_definition */
};

static void yy_accept(yyParser*);  /* Forward Declaration */

/*
** Perform a reduce action and the shift that must immediately
** follow the reduce.
**
** The yyLookahead and yyLookaheadToken parameters provide reduce actions
** access to the lookahead token (if any).  The yyLookahead will be YYNOCODE
** if the lookahead token has already been consumed.  As this procedure is
** only called from one place, optimizing compilers will in-line it, which
** means that the extra parameters have no performance impact.
*/
static YYACTIONTYPE yy_reduce(
  yyParser *yypParser,         /* The parser */
  unsigned int yyruleno,       /* Number of the rule by which to reduce */
  int yyLookahead,             /* Lookahead token, or YYNOCODE if none */
  ParseTOKENTYPE yyLookaheadToken  /* Value of the lookahead token */
  ParseCTX_PDECL                   /* %extra_context */
){
  int yygoto;                     /* The next state */
  YYACTIONTYPE yyact;             /* The next action */
  yyStackEntry *yymsp;            /* The top of the parser's stack */
  int yysize;                     /* Amount to pop the stack */
  ParseARG_FETCH
  (void)yyLookahead;
  (void)yyLookaheadToken;
  yymsp = yypParser->yytos;

  switch( yyruleno ){
  /* Beginning here are the reduction cases.  A typical example
  ** follows:
  **   case 0:
  **  #line <lineno> <grammarfile>
  **     { ... }           // User supplied code
  **  #line <lineno> <thisfile>
  **     break;
  */
/********** Begin reduce actions **********************************************/
        YYMINORTYPE yylhsminor;
      case 0: /* primary_expression ::= ID */
#line 139 "src\\parser.y"
{
	yylhsminor.yy69 = new expr_t;
	yylhsminor.yy69->category = CATEGORY_VARREF;
	yylhsminor.yy69->left = true;

	auto sym = lookup(yymsp[0].minor.yy0.sval);
	if (sym == nullptr)
	{
		yyerror("symbol not found");
	}
	yylhsminor.yy69->type = sym->type;
	yylhsminor.yy69->depth = sym->depth;
	yylhsminor.yy69->varref = sym;
}
#line 1671 "src\\parser.c"
  yymsp[0].minor.yy69 = yylhsminor.yy69;
        break;
      case 1: /* primary_expression ::= NUM */
#line 153 "src\\parser.y"
{
	yylhsminor.yy69 = new expr_t;
	yylhsminor.yy69->category = CATEGORY_LITERAL;
	yylhsminor.yy69->left = false;

	yylhsminor.yy69->type = yymsp[0].minor.yy0.type;
	yylhsminor.yy69->depth = 0;
	yylhsminor.yy69->ival = yymsp[0].minor.yy0.ival;
}
#line 1685 "src\\parser.c"
  yymsp[0].minor.yy69 = yylhsminor.yy69;
        break;
      case 2: /* primary_expression ::= DEC */
#line 162 "src\\parser.y"
{
	yylhsminor.yy69 = new expr_t;
	yylhsminor.yy69->category = CATEGORY_LITERAL;
	yylhsminor.yy69->left = false;

	yylhsminor.yy69->type = yymsp[0].minor.yy0.type;
	yylhsminor.yy69->depth = 0;
	yylhsminor.yy69->fval = yymsp[0].minor.yy0.fval;
}
#line 1699 "src\\parser.c"
  yymsp[0].minor.yy69 = yylhsminor.yy69;
        break;
      case 3: /* primary_expression ::= STR */
#line 171 "src\\parser.y"
{
	yylhsminor.yy69 = new expr_t;
	yylhsminor.yy69->category = CATEGORY_LITERAL;
	yylhsminor.yy69->left = false;

	yylhsminor.yy69->type = TYPE_CHAR;
	yylhsminor.yy69->depth = 1;
	yylhsminor.yy69->sval = yymsp[0].minor.yy0.sval;
}
#line 1713 "src\\parser.c"
  yymsp[0].minor.yy69 = yylhsminor.yy69;
        break;
      case 4: /* primary_expression ::= LP expression RP */
#line 180 "src\\parser.y"
{ yymsp[-2].minor.yy69 = yymsp[-1].minor.yy69; }
#line 1719 "src\\parser.c"
        break;
      case 5: /* postfix_expression ::= primary_expression */
      case 9: /* unary_expression ::= postfix_expression */ yytestcase(yyruleno==9);
      case 21: /* cast_expression ::= unary_expression */ yytestcase(yyruleno==21);
      case 23: /* multiplicative_expression ::= cast_expression */ yytestcase(yyruleno==23);
      case 27: /* additive_expression ::= multiplicative_expression */ yytestcase(yyruleno==27);
      case 30: /* shift_expression ::= additive_expression */ yytestcase(yyruleno==30);
      case 33: /* relational_expression ::= shift_expression */ yytestcase(yyruleno==33);
      case 38: /* equality_expression ::= relational_expression */ yytestcase(yyruleno==38);
      case 41: /* and_expression ::= equality_expression */ yytestcase(yyruleno==41);
      case 43: /* exclusive_or_expression ::= and_expression */ yytestcase(yyruleno==43);
      case 45: /* inclusive_or_expression ::= exclusive_or_expression */ yytestcase(yyruleno==45);
      case 47: /* logical_and_expression ::= inclusive_or_expression */ yytestcase(yyruleno==47);
      case 49: /* logical_or_expression ::= logical_and_expression */ yytestcase(yyruleno==49);
      case 52: /* expression ::= assignment_expression */ yytestcase(yyruleno==52);
#line 182 "src\\parser.y"
{ yylhsminor.yy69 = yymsp[0].minor.yy69; }
#line 1737 "src\\parser.c"
  yymsp[0].minor.yy69 = yylhsminor.yy69;
        break;
      case 6: /* postfix_expression ::= postfix_expression LS expression RS */
#line 183 "src\\parser.y"
{
	if (yymsp[-3].minor.yy69->depth == 0)
	{
		yyerror("indexing on non-pointer type");
	}
	if (yymsp[-1].minor.yy69->depth != 0)
	{
		yyerror("attempt to use pointer as RHS");
	}

	int elemsize = get_size(yymsp[-3].minor.yy69->type, yymsp[-3].minor.yy69->depth-1);

	expr_t* index = new expr_t;
	index->category = CATEGORY_COMBINED;
	index->left = true;

	index->type = yymsp[-3].minor.yy69->type;
	index->depth = yymsp[-3].minor.yy69->depth;
	index->op = OP_ADD;
	index->lhs = yymsp[-3].minor.yy69;
	index->rhs = yymsp[-1].minor.yy69;
	yylhsminor.yy69 = index;
}
#line 1765 "src\\parser.c"
  yymsp[-3].minor.yy69 = yylhsminor.yy69;
        break;
      case 7: /* postfix_expression ::= postfix_expression INC_OP */
#line 208 "src\\parser.y"
{
	expr_t* ex = new expr_t;
	ex->category = CATEGORY_COMBINED;
	ex->left = false;
	ex->type = yymsp[-1].minor.yy69->type;
	ex->depth = yymsp[-1].minor.yy69->depth;
	ex->op = OP_POST_INC;
	ex->lhs = yymsp[-1].minor.yy69;
	yylhsminor.yy69 = ex;
}
#line 1780 "src\\parser.c"
  yymsp[-1].minor.yy69 = yylhsminor.yy69;
        break;
      case 8: /* postfix_expression ::= postfix_expression DEC_OP */
#line 218 "src\\parser.y"
{
	expr_t* ex = new expr_t;
	ex->category = CATEGORY_COMBINED;
	ex->left = false;
	ex->type = yymsp[-1].minor.yy69->type;
	ex->depth = yymsp[-1].minor.yy69->depth;
	ex->op = OP_POST_DEC;
	ex->lhs = yymsp[-1].minor.yy69;
	yylhsminor.yy69 = ex;
}
#line 1795 "src\\parser.c"
  yymsp[-1].minor.yy69 = yylhsminor.yy69;
        break;
      case 10: /* unary_expression ::= INC_OP unary_expression */
#line 233 "src\\parser.y"
{
	expr_t* ex = new expr_t;
	ex->category = CATEGORY_COMBINED;
	ex->left = false;
	ex->type = yymsp[0].minor.yy69->type;
	ex->depth = yymsp[0].minor.yy69->depth;
	ex->op = OP_PRE_INC;
	ex->lhs = yymsp[0].minor.yy69;
	yymsp[-1].minor.yy69 = ex;
}
#line 1810 "src\\parser.c"
        break;
      case 11: /* unary_expression ::= DEC_OP unary_expression */
#line 243 "src\\parser.y"
{
	expr_t* ex = new expr_t;
	ex->category = CATEGORY_COMBINED;
	ex->left = false;
	ex->type = yymsp[0].minor.yy69->type;
	ex->depth = yymsp[0].minor.yy69->depth;
	ex->op = OP_PRE_DEC;
	ex->lhs = yymsp[0].minor.yy69;
	yymsp[-1].minor.yy69 = ex;
}
#line 1824 "src\\parser.c"
        break;
      case 12: /* unary_expression ::= unary_operator cast_expression */
#line 253 "src\\parser.y"
{
	if (yymsp[-1].minor.yy228 == OP_ADD)
	{
		yylhsminor.yy69 = yymsp[0].minor.yy69;
	}
	else
	{
		expr_t* ex = new expr_t;
		ex->category = CATEGORY_COMBINED;
		ex->type = yymsp[0].minor.yy69->type;
		ex->op = OP_PRE_DEC;
		ex->lhs = yymsp[0].minor.yy69;
		if (yymsp[-1].minor.yy228 == OP_REF)
		{
			ex->depth = yymsp[0].minor.yy69->depth + 1;
			ex->left = false;
		}
		else if (yymsp[-1].minor.yy228 == OP_DEREF)
		{
			if (yymsp[0].minor.yy69->depth == 0)
			{
				yyerror("attempted to dereference a non-pointer value");
			}
			ex->depth = yymsp[0].minor.yy69->depth - 1;
			ex->left = true;
		}
		else
		{
			ex->depth = yymsp[0].minor.yy69->depth;
			ex->left = false;
		}
		yylhsminor.yy69 = ex;
	}
}
#line 1862 "src\\parser.c"
  yymsp[-1].minor.yy69 = yylhsminor.yy69;
        break;
      case 13: /* unary_expression ::= SIZEOF unary_expression */
#line 287 "src\\parser.y"
{
	int elemsize = get_size(yymsp[0].minor.yy69->type, yymsp[0].minor.yy69->depth);
	//TODO recursively free(yymsp[0].minor.yy69)

	yymsp[-1].minor.yy69 = new expr_t;
	yymsp[-1].minor.yy69->category = CATEGORY_LITERAL;
	yymsp[-1].minor.yy69->left = false;

	yymsp[-1].minor.yy69->type = TYPE_INT;
	yymsp[-1].minor.yy69->depth = 0;
	yymsp[-1].minor.yy69->ival = elemsize;
}
#line 1879 "src\\parser.c"
        break;
      case 14: /* unary_expression ::= SIZEOF LP type_name RP */
#line 299 "src\\parser.y"
{
	yymsp[-3].minor.yy69 = new expr_t;
	yymsp[-3].minor.yy69->category = CATEGORY_LITERAL;
	yymsp[-3].minor.yy69->left = false;

	yymsp[-3].minor.yy69->type = TYPE_INT;
	yymsp[-3].minor.yy69->depth = 0;
	yymsp[-3].minor.yy69->ival = get_size(yymsp[-1].minor.yy53.type, yymsp[-1].minor.yy53.depth);
}
#line 1892 "src\\parser.c"
        break;
      case 15: /* unary_operator ::= AND_OP */
#line 309 "src\\parser.y"
{ yymsp[0].minor.yy228 = OP_REF; }
#line 1897 "src\\parser.c"
        break;
      case 16: /* unary_operator ::= MUL_OP */
#line 310 "src\\parser.y"
{ yymsp[0].minor.yy228 = OP_DEREF; }
#line 1902 "src\\parser.c"
        break;
      case 17: /* unary_operator ::= ADD_OP */
#line 311 "src\\parser.y"
{ yymsp[0].minor.yy228 = OP_ADD; }
#line 1907 "src\\parser.c"
        break;
      case 18: /* unary_operator ::= SUB_OP */
#line 312 "src\\parser.y"
{ yymsp[0].minor.yy228 = OP_SUB; }
#line 1912 "src\\parser.c"
        break;
      case 19: /* unary_operator ::= NOT_OP */
#line 313 "src\\parser.y"
{ yymsp[0].minor.yy228 = OP_NOT; }
#line 1917 "src\\parser.c"
        break;
      case 20: /* unary_operator ::= LOGNOT */
#line 314 "src\\parser.y"
{ yymsp[0].minor.yy228 = OP_LOGNOT; }
#line 1922 "src\\parser.c"
        break;
      case 22: /* cast_expression ::= LP type_name RP cast_expression */
#line 317 "src\\parser.y"
{
	if (convertible(yymsp[0].minor.yy69, yymsp[-2].minor.yy53))
	{
		yymsp[0].minor.yy69->type = yymsp[-2].minor.yy53.type;
		yymsp[0].minor.yy69->depth = yymsp[-2].minor.yy53.depth;
		yymsp[-3].minor.yy69 = yymsp[0].minor.yy69;
	}
	else
	{
		yyerror("bad cast");
	}
}
#line 1938 "src\\parser.c"
        break;
      case 24: /* multiplicative_expression ::= multiplicative_expression MUL_OP cast_expression */
#line 331 "src\\parser.y"
{
	if (yymsp[-2].minor.yy69->depth != 0 || yymsp[0].minor.yy69->depth != 0)
	{
		yyerror("non-add/sub-arithmetic on pointer");
	}
	expr_t* ex = new expr_t;
	ex->category = CATEGORY_COMBINED;
	ex->left = false;
	ex->type = hybrid(yymsp[-2].minor.yy69->type, yymsp[0].minor.yy69->type);
	ex->depth = 0;
	ex->op = OP_MUL;
	ex->lhs = yymsp[-2].minor.yy69;
	ex->rhs = yymsp[0].minor.yy69;
	yylhsminor.yy69 = ex;
}
#line 1957 "src\\parser.c"
  yymsp[-2].minor.yy69 = yylhsminor.yy69;
        break;
      case 25: /* multiplicative_expression ::= multiplicative_expression DIV_OP cast_expression */
#line 346 "src\\parser.y"
{
	if (yymsp[-2].minor.yy69->depth != 0 || yymsp[0].minor.yy69->depth != 0)
	{
		yyerror("non-add/sub-arithmetic on pointer");
	}
	expr_t* ex = new expr_t;
	ex->category = CATEGORY_COMBINED;
	ex->left = false;
	ex->type = hybrid(yymsp[-2].minor.yy69->type, yymsp[0].minor.yy69->type);
	ex->depth = 0;
	ex->op = OP_DIV;
	ex->lhs = yymsp[-2].minor.yy69;
	ex->rhs = yymsp[0].minor.yy69;
	yylhsminor.yy69 = ex;
}
#line 1977 "src\\parser.c"
  yymsp[-2].minor.yy69 = yylhsminor.yy69;
        break;
      case 26: /* multiplicative_expression ::= multiplicative_expression MOD_OP cast_expression */
#line 361 "src\\parser.y"
{
	if (yymsp[-2].minor.yy69->depth != 0 || yymsp[0].minor.yy69->depth != 0)
	{
		yyerror("non-add/sub-arithmetic on pointer");
	}
	expr_t* ex = new expr_t;
	ex->category = CATEGORY_COMBINED;
	ex->left = false;
	ex->type = hybrid(yymsp[-2].minor.yy69->type, yymsp[0].minor.yy69->type);
	ex->depth = 0;
	ex->op = OP_MOD;
	ex->lhs = yymsp[-2].minor.yy69;
	ex->rhs = yymsp[0].minor.yy69;
	yylhsminor.yy69 = ex;
}
#line 1997 "src\\parser.c"
  yymsp[-2].minor.yy69 = yylhsminor.yy69;
        break;
      case 28: /* additive_expression ::= additive_expression ADD_OP multiplicative_expression */
#line 378 "src\\parser.y"
{
	if (yymsp[0].minor.yy69->depth != 0)
	{
		yyerror("attempt to use pointer as RHS");
	}
	expr_t* ex = new expr_t;
	ex->category = CATEGORY_COMBINED;
	ex->left = yymsp[-2].minor.yy69->left;
	ex->type = hybrid(yymsp[-2].minor.yy69->type, yymsp[0].minor.yy69->type);
	ex->depth = yymsp[-2].minor.yy69->depth == 0 ? hybrid(yymsp[-2].minor.yy69->type, yymsp[0].minor.yy69->type) : yymsp[-2].minor.yy69->type;
	ex->op = OP_ADD;
	ex->lhs = yymsp[-2].minor.yy69;
	ex->rhs = yymsp[0].minor.yy69;
	yylhsminor.yy69 = ex;
}
#line 2017 "src\\parser.c"
  yymsp[-2].minor.yy69 = yylhsminor.yy69;
        break;
      case 29: /* additive_expression ::= additive_expression SUB_OP multiplicative_expression */
#line 393 "src\\parser.y"
{
	if (yymsp[0].minor.yy69->depth != 0)
	{
		yyerror("attempt to use pointer as RHS");
	}
	expr_t* ex = new expr_t;
	ex->category = CATEGORY_COMBINED;
	ex->left = yymsp[-2].minor.yy69->left;
	ex->type = yymsp[-2].minor.yy69->depth == 0 ? hybrid(yymsp[-2].minor.yy69->type, yymsp[0].minor.yy69->type) : yymsp[-2].minor.yy69->type;
	ex->depth = yymsp[-2].minor.yy69->depth;
	ex->op = OP_SUB;
	ex->lhs = yymsp[-2].minor.yy69;
	ex->rhs = yymsp[0].minor.yy69;
	yylhsminor.yy69 = ex;
}
#line 2037 "src\\parser.c"
  yymsp[-2].minor.yy69 = yylhsminor.yy69;
        break;
      case 31: /* shift_expression ::= shift_expression SHL_OP additive_expression */
#line 410 "src\\parser.y"
{
	if (yymsp[-2].minor.yy69->depth != 0 || yymsp[0].minor.yy69->depth != 0)
	{
		yyerror("non-add/sub-arithmetic on pointer");
	}
	expr_t* ex = new expr_t;
	ex->category = CATEGORY_COMBINED;
	ex->left = false;
	ex->type = hybrid(yymsp[-2].minor.yy69->type, yymsp[0].minor.yy69->type);
	ex->depth = 0;
	ex->op = OP_SHL;
	ex->lhs = yymsp[-2].minor.yy69;
	ex->rhs = yymsp[0].minor.yy69;
	yylhsminor.yy69 = ex;
}
#line 2057 "src\\parser.c"
  yymsp[-2].minor.yy69 = yylhsminor.yy69;
        break;
      case 32: /* shift_expression ::= shift_expression SHR_OP additive_expression */
#line 425 "src\\parser.y"
{
	if (yymsp[-2].minor.yy69->depth != 0 || yymsp[0].minor.yy69->depth != 0)
	{
		yyerror("non-add/sub-arithmetic on pointer");
	}
	expr_t* ex = new expr_t;
	ex->category = CATEGORY_COMBINED;
	ex->left = false;
	ex->type = hybrid(yymsp[-2].minor.yy69->type, yymsp[0].minor.yy69->type);
	ex->depth = 0;
	ex->op = OP_SHR;
	ex->lhs = yymsp[-2].minor.yy69;
	ex->rhs = yymsp[0].minor.yy69;
	yylhsminor.yy69 = ex;
}
#line 2077 "src\\parser.c"
  yymsp[-2].minor.yy69 = yylhsminor.yy69;
        break;
      case 34: /* relational_expression ::= relational_expression LT_OP shift_expression */
#line 442 "src\\parser.y"
{
	if (yymsp[-2].minor.yy69->depth != 0 || yymsp[0].minor.yy69->depth != 0)
	{
		yyerror("non-add/sub-arithmetic on pointer");
	}
	expr_t* ex = new expr_t;
	ex->category = CATEGORY_COMBINED;
	ex->left = false;
	ex->type = hybrid(yymsp[-2].minor.yy69->type, yymsp[0].minor.yy69->type);
	ex->depth = 0;
	ex->op = OP_LT;
	ex->lhs = yymsp[-2].minor.yy69;
	ex->rhs = yymsp[0].minor.yy69;
	yylhsminor.yy69 = ex;
}
#line 2097 "src\\parser.c"
  yymsp[-2].minor.yy69 = yylhsminor.yy69;
        break;
      case 35: /* relational_expression ::= relational_expression GT_OP shift_expression */
#line 457 "src\\parser.y"
{
	if (yymsp[-2].minor.yy69->depth != 0 || yymsp[0].minor.yy69->depth != 0)
	{
		yyerror("non-add/sub-arithmetic on pointer");
	}
	expr_t* ex = new expr_t;
	ex->category = CATEGORY_COMBINED;
	ex->left = false;
	ex->type = hybrid(yymsp[-2].minor.yy69->type, yymsp[0].minor.yy69->type);
	ex->depth = 0;
	ex->op = OP_GT;
	ex->lhs = yymsp[-2].minor.yy69;
	ex->rhs = yymsp[0].minor.yy69;
	yylhsminor.yy69 = ex;
}
#line 2117 "src\\parser.c"
  yymsp[-2].minor.yy69 = yylhsminor.yy69;
        break;
      case 36: /* relational_expression ::= relational_expression LE_OP shift_expression */
#line 472 "src\\parser.y"
{
	if (yymsp[-2].minor.yy69->depth != 0 || yymsp[0].minor.yy69->depth != 0)
	{
		yyerror("non-add/sub-arithmetic on pointer");
	}
	expr_t* ex = new expr_t;
	ex->category = CATEGORY_COMBINED;
	ex->left = false;
	ex->type = hybrid(yymsp[-2].minor.yy69->type, yymsp[0].minor.yy69->type);
	ex->depth = 0;
	ex->op = OP_LE;
	ex->lhs = yymsp[-2].minor.yy69;
	ex->rhs = yymsp[0].minor.yy69;
	yylhsminor.yy69 = ex;
}
#line 2137 "src\\parser.c"
  yymsp[-2].minor.yy69 = yylhsminor.yy69;
        break;
      case 37: /* relational_expression ::= relational_expression GE_OP shift_expression */
#line 487 "src\\parser.y"
{
	if (yymsp[-2].minor.yy69->depth != 0 || yymsp[0].minor.yy69->depth != 0)
	{
		yyerror("non-add/sub-arithmetic on pointer");
	}
	expr_t* ex = new expr_t;
	ex->category = CATEGORY_COMBINED;
	ex->left = false;
	ex->type = hybrid(yymsp[-2].minor.yy69->type, yymsp[0].minor.yy69->type);
	ex->depth = 0;
	ex->op = OP_GE;
	ex->lhs = yymsp[-2].minor.yy69;
	ex->rhs = yymsp[0].minor.yy69;
	yylhsminor.yy69 = ex;
}
#line 2157 "src\\parser.c"
  yymsp[-2].minor.yy69 = yylhsminor.yy69;
        break;
      case 39: /* equality_expression ::= equality_expression EQ_OP relational_expression */
#line 504 "src\\parser.y"
{
	if (yymsp[-2].minor.yy69->depth != 0 || yymsp[0].minor.yy69->depth != 0)
	{
		yyerror("non-add/sub-arithmetic on pointer");
	}
	expr_t* ex = new expr_t;
	ex->category = CATEGORY_COMBINED;
	ex->left = false;
	ex->type = hybrid(yymsp[-2].minor.yy69->type, yymsp[0].minor.yy69->type);
	ex->depth = 0;
	ex->op = OP_EQ;
	ex->lhs = yymsp[-2].minor.yy69;
	ex->rhs = yymsp[0].minor.yy69;
	yylhsminor.yy69 = ex;
}
#line 2177 "src\\parser.c"
  yymsp[-2].minor.yy69 = yylhsminor.yy69;
        break;
      case 40: /* equality_expression ::= equality_expression NE_OP relational_expression */
#line 519 "src\\parser.y"
{
	if (yymsp[-2].minor.yy69->depth != 0 || yymsp[0].minor.yy69->depth != 0)
	{
		yyerror("non-add/sub-arithmetic on pointer");
	}
	expr_t* ex = new expr_t;
	ex->category = CATEGORY_COMBINED;
	ex->left = false;
	ex->type = hybrid(yymsp[-2].minor.yy69->type, yymsp[0].minor.yy69->type);
	ex->depth = 0;
	ex->op = OP_NE;
	ex->lhs = yymsp[-2].minor.yy69;
	ex->rhs = yymsp[0].minor.yy69;
	yylhsminor.yy69 = ex;
}
#line 2197 "src\\parser.c"
  yymsp[-2].minor.yy69 = yylhsminor.yy69;
        break;
      case 42: /* and_expression ::= and_expression AND_OP equality_expression */
#line 536 "src\\parser.y"
{
	if (yymsp[-2].minor.yy69->depth != 0 || yymsp[0].minor.yy69->depth != 0)
	{
		yyerror("non-add/sub-arithmetic on pointer");
	}
	expr_t* ex = new expr_t;
	ex->category = CATEGORY_COMBINED;
	ex->left = false;
	ex->type = hybrid(yymsp[-2].minor.yy69->type, yymsp[0].minor.yy69->type);
	ex->depth = 0;
	ex->op = OP_AND;
	ex->lhs = yymsp[-2].minor.yy69;
	ex->rhs = yymsp[0].minor.yy69;
	yylhsminor.yy69 = ex;
}
#line 2217 "src\\parser.c"
  yymsp[-2].minor.yy69 = yylhsminor.yy69;
        break;
      case 44: /* exclusive_or_expression ::= exclusive_or_expression OR_OP and_expression */
#line 553 "src\\parser.y"
{
	if (yymsp[-2].minor.yy69->depth != 0 || yymsp[0].minor.yy69->depth != 0)
	{
		yyerror("non-add/sub-arithmetic on pointer");
	}
	expr_t* ex = new expr_t;
	ex->category = CATEGORY_COMBINED;
	ex->left = false;
	ex->type = hybrid(yymsp[-2].minor.yy69->type, yymsp[0].minor.yy69->type);
	ex->depth = 0;
	ex->op = OP_OR;
	ex->lhs = yymsp[-2].minor.yy69;
	ex->rhs = yymsp[0].minor.yy69;
	yylhsminor.yy69 = ex;
}
#line 2237 "src\\parser.c"
  yymsp[-2].minor.yy69 = yylhsminor.yy69;
        break;
      case 46: /* inclusive_or_expression ::= inclusive_or_expression XOR_OP exclusive_or_expression */
#line 570 "src\\parser.y"
{
	if (yymsp[-2].minor.yy69->depth != 0 || yymsp[0].minor.yy69->depth != 0)
	{
		yyerror("non-add/sub-arithmetic on pointer");
	}
	expr_t* ex = new expr_t;
	ex->category = CATEGORY_COMBINED;
	ex->left = false;
	ex->type = hybrid(yymsp[-2].minor.yy69->type, yymsp[0].minor.yy69->type);
	ex->depth = 0;
	ex->op = OP_XOR;
	ex->lhs = yymsp[-2].minor.yy69;
	ex->rhs = yymsp[0].minor.yy69;
	yylhsminor.yy69 = ex;
}
#line 2257 "src\\parser.c"
  yymsp[-2].minor.yy69 = yylhsminor.yy69;
        break;
      case 48: /* logical_and_expression ::= logical_and_expression LOGAND inclusive_or_expression */
#line 587 "src\\parser.y"
{
	if (yymsp[-2].minor.yy69->depth != 0 || yymsp[0].minor.yy69->depth != 0)
	{
		yyerror("non-add/sub-arithmetic on pointer");
	}
	expr_t* ex = new expr_t;
	ex->category = CATEGORY_COMBINED;
	ex->left = false;
	ex->type = hybrid(yymsp[-2].minor.yy69->type, yymsp[0].minor.yy69->type);
	ex->depth = 0;
	ex->op = OP_LOGAND;
	ex->lhs = yymsp[-2].minor.yy69;
	ex->rhs = yymsp[0].minor.yy69;
	yylhsminor.yy69 = ex;
}
#line 2277 "src\\parser.c"
  yymsp[-2].minor.yy69 = yylhsminor.yy69;
        break;
      case 50: /* logical_or_expression ::= logical_or_expression LOGOR logical_and_expression */
#line 604 "src\\parser.y"
{
	if (yymsp[-2].minor.yy69->depth != 0 || yymsp[0].minor.yy69->depth != 0)
	{
		yyerror("non-add/sub-arithmetic on pointer");
	}
	expr_t* ex = new expr_t;
	ex->category = CATEGORY_COMBINED;
	ex->left = false;
	ex->type = hybrid(yymsp[-2].minor.yy69->type, yymsp[0].minor.yy69->type);
	ex->depth = 0;
	ex->op = OP_LOGOR;
	ex->lhs = yymsp[-2].minor.yy69;
	ex->rhs = yymsp[0].minor.yy69;
	yylhsminor.yy69 = ex;
}
#line 2297 "src\\parser.c"
  yymsp[-2].minor.yy69 = yylhsminor.yy69;
        break;
      case 51: /* assignment_expression ::= unary_expression ASGN_OP logical_or_expression */
#line 620 "src\\parser.y"
{
	if (!yymsp[-2].minor.yy69->left)
	{
		yyerror("attempt to assign to a right value");
	}

	if (yymsp[-2].minor.yy69->depth != yymsp[0].minor.yy69->depth)
	{
		yyerror("pointer depth mismatch");
	}
	else
	{
		if (yymsp[-2].minor.yy69->type != yymsp[0].minor.yy69->type)
		{
			yyerror("pointer type mismatch");
		}
	}

	expr_t* ex = new expr_t;
	ex->category = CATEGORY_COMBINED;
	ex->left = false;
	ex->type = yymsp[-2].minor.yy69->depth == 0 ? hybrid(yymsp[-2].minor.yy69->type, yymsp[0].minor.yy69->type) : yymsp[-2].minor.yy69->type;
	ex->depth = yymsp[-2].minor.yy69->depth;
	ex->op = OP_ASGN;
	ex->lhs = yymsp[-2].minor.yy69;
	ex->rhs = yymsp[0].minor.yy69;
	yylhsminor.yy69 = ex;
}
#line 2330 "src\\parser.c"
  yymsp[-2].minor.yy69 = yylhsminor.yy69;
        break;
      case 53: /* variable_declaration ::= declaration_specifiers init_declarator_list SEM */
#line 651 "src\\parser.y"
{
	for (auto& idl : *yymsp[-1].minor.yy188)
	{
		sym_t* var = insert(idl.name);
		var->type = yymsp[-2].minor.yy53.type;
		var->depth = idl.depth;
		if (var->type == TYPE_VOID && var->depth == 0)
		{
			yyerror("illegal type");
		}
		
		if (var->scope == 0)
		{
			var->category = CATEGORY_GLOBAL;
			var->offset = globaloffset;
			globaloffset += get_size(var->type, var->depth);
		}
		else
		{
			var->category = CATEGORY_LOCAL;
			// stack grows downward
			localoffset -= get_size(var->type, var->depth);
			var->offset = localoffset;
		}
	}
}
#line 2361 "src\\parser.c"
        break;
      case 54: /* declaration_specifiers ::= type_specifier */
      case 72: /* type_name ::= declaration_specifiers */ yytestcase(yyruleno==72);
#line 678 "src\\parser.y"
{ yylhsminor.yy53 = yymsp[0].minor.yy53; }
#line 2367 "src\\parser.c"
  yymsp[0].minor.yy53 = yylhsminor.yy53;
        break;
      case 55: /* init_declarator_list ::= init_declarator */
#line 680 "src\\parser.y"
{
	yylhsminor.yy188 = new std::vector<init_decl_t>;
	yylhsminor.yy188->push_back(yymsp[0].minor.yy7);
}
#line 2376 "src\\parser.c"
  yymsp[0].minor.yy188 = yylhsminor.yy188;
        break;
      case 56: /* init_declarator_list ::= init_declarator_list COM init_declarator */
#line 684 "src\\parser.y"
{
	yymsp[-2].minor.yy188->push_back(yymsp[0].minor.yy7);
	yylhsminor.yy188 = yymsp[-2].minor.yy188;
}
#line 2385 "src\\parser.c"
  yymsp[-2].minor.yy188 = yylhsminor.yy188;
        break;
      case 57: /* init_declarator ::= declarator */
      case 65: /* declarator ::= direct_declarator */ yytestcase(yyruleno==65);
#line 689 "src\\parser.y"
{ yylhsminor.yy7 = yymsp[0].minor.yy7; }
#line 2392 "src\\parser.c"
  yymsp[0].minor.yy7 = yylhsminor.yy7;
        break;
      case 58: /* init_declarator ::= declarator ASGN_OP initializer */
#line 690 "src\\parser.y"
{
	//yymsp[-2].minor.yy7.init = yymsp[0].minor.yy69;
	//yylhsminor.yy7 = yymsp[-2].minor.yy7;
	yyerror("initializer is currently not supported");
}
#line 2402 "src\\parser.c"
  yymsp[-2].minor.yy7 = yylhsminor.yy7;
        break;
      case 59: /* type_specifier ::= VOID */
#line 696 "src\\parser.y"
{ ZERO(yymsp[0].minor.yy53); yymsp[0].minor.yy53.type = TYPE_VOID; }
#line 2408 "src\\parser.c"
        break;
      case 60: /* type_specifier ::= CHAR */
#line 697 "src\\parser.y"
{ ZERO(yymsp[0].minor.yy53); yymsp[0].minor.yy53.type = TYPE_CHAR; }
#line 2413 "src\\parser.c"
        break;
      case 61: /* type_specifier ::= SHORT */
#line 698 "src\\parser.y"
{ ZERO(yymsp[0].minor.yy53); yymsp[0].minor.yy53.type = TYPE_SHORT; }
#line 2418 "src\\parser.c"
        break;
      case 62: /* type_specifier ::= INT */
#line 699 "src\\parser.y"
{ ZERO(yymsp[0].minor.yy53); yymsp[0].minor.yy53.type = TYPE_INT; }
#line 2423 "src\\parser.c"
        break;
      case 63: /* type_specifier ::= LONG */
#line 700 "src\\parser.y"
{ ZERO(yymsp[0].minor.yy53); yymsp[0].minor.yy53.type = TYPE_LONG; }
#line 2428 "src\\parser.c"
        break;
      case 64: /* declarator ::= pointer direct_declarator */
#line 702 "src\\parser.y"
{ yymsp[0].minor.yy7.depth = yymsp[-1].minor.yy228; yylhsminor.yy7 = yymsp[0].minor.yy7; }
#line 2433 "src\\parser.c"
  yymsp[-1].minor.yy7 = yylhsminor.yy7;
        break;
      case 66: /* direct_declarator ::= ID */
#line 705 "src\\parser.y"
{ ZERO(yylhsminor.yy7); yylhsminor.yy7.name = yymsp[0].minor.yy0.sval; }
#line 2439 "src\\parser.c"
  yymsp[0].minor.yy7 = yylhsminor.yy7;
        break;
      case 67: /* pointer ::= MUL_OP */
#line 707 "src\\parser.y"
{ yymsp[0].minor.yy228 = 1; }
#line 2445 "src\\parser.c"
        break;
      case 68: /* pointer ::= MUL_OP pointer */
#line 708 "src\\parser.y"
{ yymsp[-1].minor.yy228 = yymsp[0].minor.yy228 + 1; }
#line 2450 "src\\parser.c"
        break;
      case 69: /* parameter_list ::= parameter_declaration */
#line 710 "src\\parser.y"
{
	yylhsminor.yy126 = new std::vector<param_t>;
	yylhsminor.yy126->push_back(yymsp[0].minor.yy33);
}
#line 2458 "src\\parser.c"
  yymsp[0].minor.yy126 = yylhsminor.yy126;
        break;
      case 70: /* parameter_list ::= parameter_list COM parameter_declaration */
#line 714 "src\\parser.y"
{
	yymsp[-2].minor.yy126->push_back(yymsp[0].minor.yy33);
	yylhsminor.yy126 = yymsp[-2].minor.yy126;
}
#line 2467 "src\\parser.c"
  yymsp[-2].minor.yy126 = yylhsminor.yy126;
        break;
      case 71: /* parameter_declaration ::= declaration_specifiers declarator */
#line 719 "src\\parser.y"
{ 
	ZERO(yylhsminor.yy33);
	yylhsminor.yy33.type = yymsp[-1].minor.yy53.type; 
	yylhsminor.yy33.depth = yymsp[0].minor.yy7.depth;
	yylhsminor.yy33.name = yymsp[0].minor.yy7.name;
}
#line 2478 "src\\parser.c"
  yymsp[-1].minor.yy33 = yylhsminor.yy33;
        break;
      case 73: /* type_name ::= declaration_specifiers pointer */
#line 727 "src\\parser.y"
{
	yymsp[-1].minor.yy53.depth = yymsp[0].minor.yy228; 
	yylhsminor.yy53 = yymsp[-1].minor.yy53; 
}
#line 2487 "src\\parser.c"
  yymsp[-1].minor.yy53 = yylhsminor.yy53;
        break;
      case 74: /* statement ::= labeled_statement */
#line 734 "src\\parser.y"
{
	yylhsminor.yy77 = new stmt_list_t;
	yylhsminor.yy77->push_back(yymsp[0].minor.yy236);
}
#line 2496 "src\\parser.c"
  yymsp[0].minor.yy77 = yylhsminor.yy77;
        break;
      case 75: /* labeled_statement ::= ID COL statement */
#line 744 "src\\parser.y"
{
	sym_t* label = insert(yymsp[-2].minor.yy0.sval);
	label->category = CATEGORY_LABEL;

	ZERO(yylhsminor.yy236);
	yylhsminor.yy236.category = CATEGORY_LABEL;
	yylhsminor.yy236.compound = yymsp[0].minor.yy77;
}
#line 2509 "src\\parser.c"
  yymsp[-2].minor.yy236 = yylhsminor.yy236;
        break;
      case 76: /* block_begin ::= LB */
#line 753 "src\\parser.y"
{ next_scope(); }
#line 2515 "src\\parser.c"
        break;
      case 77: /* block_end ::= RB */
#line 754 "src\\parser.y"
{ exit_scope(); }
#line 2520 "src\\parser.c"
        break;
      case 78: /* compound_statement ::= block_begin block_end */
#line 756 "src\\parser.y"
{ yymsp[-1].minor.yy77 = nullptr; }
#line 2525 "src\\parser.c"
        break;
      case 79: /* compound_statement ::= block_begin block_item_list block_end */
#line 757 "src\\parser.y"
{
	
}
#line 2532 "src\\parser.c"
        break;
      case 80: /* function_declarator ::= declarator LP RP */
#line 792 "src\\parser.y"
{
	ZERO(yylhsminor.yy47);
	yylhsminor.yy47.depth = yymsp[-2].minor.yy7.depth;
	yylhsminor.yy47.name = yymsp[-2].minor.yy7.name;
}
#line 2541 "src\\parser.c"
  yymsp[-2].minor.yy47 = yylhsminor.yy47;
        break;
      case 81: /* function_declarator ::= declarator LP parameter_list RP */
#line 798 "src\\parser.y"
{
	ZERO(yylhsminor.yy47);
	yylhsminor.yy47.depth = yymsp[-3].minor.yy7.depth;
	yylhsminor.yy47.name = yymsp[-3].minor.yy7.name;
	yylhsminor.yy47.params = yymsp[-1].minor.yy126;
}
#line 2552 "src\\parser.c"
  yymsp[-3].minor.yy47 = yylhsminor.yy47;
        break;
      case 82: /* function_declarator ::= declarator LP parameter_list COM ELLIPSIS RP */
#line 804 "src\\parser.y"
{
	ZERO(yylhsminor.yy47);
	yylhsminor.yy47.depth = yymsp[-5].minor.yy7.depth;
	yylhsminor.yy47.name = yymsp[-5].minor.yy7.name;
	yylhsminor.yy47.params = yymsp[-3].minor.yy126;
	yylhsminor.yy47.variadic = true;
}
#line 2564 "src\\parser.c"
  yymsp[-5].minor.yy47 = yylhsminor.yy47;
        break;
      case 83: /* function_signature ::= declaration_specifiers function_declarator */
#line 812 "src\\parser.y"
{
	if (lookup(yymsp[0].minor.yy47.name))
	{
		yyerror("function name conflict");
	}

	sym_t* func = insert(yymsp[0].minor.yy47.name);
	func->category = CATEGORY_FUNC;
	func->type = yymsp[-1].minor.yy53.type;
	func->depth = yymsp[0].minor.yy47.depth;
	func->name = yymsp[0].minor.yy47.name;
	func->params = yymsp[0].minor.yy47.params;
	func->variadic = yymsp[0].minor.yy47.variadic;

	next_scope();

	int paramoffset = 8; // bp, retaddr
	for(auto p : *func->params)
	{
		sym_t* param = insert(p.name);

		param->category = CATEGORY_PARAM;
		param->offset = paramoffset;
		paramoffset += get_size(p.type, p.depth);
	
		param->type = p.type;
		param->depth = p.depth;

		if (param->type == TYPE_VOID && param->depth == 0)
		{
			yyerror("illegal type");
		}
	}

	prev_scope();
}
#line 2605 "src\\parser.c"
        break;
      case 84: /* function_definition ::= function_signature compound_statement */
#line 849 "src\\parser.y"
{
	exit_scope();

	// A->stmts = B;
	// A->local_stack_size = -localoffset;
	// localoffset = 0;
}
#line 2616 "src\\parser.c"
        break;
      case 87: /* initializer ::= logical_or_expression */
#line 732 "src\\parser.y"
{
}
#line 2622 "src\\parser.c"
  yymsp[0].minor.yy69 = yylhsminor.yy69;
        break;
      default:
      /* (85) start ::= */ yytestcase(yyruleno==85);
      /* (86) start ::= translation_unit */ yytestcase(yyruleno==86);
      /* (88) statement ::= compound_statement (OPTIMIZED OUT) */ assert(yyruleno!=88);
      /* (89) statement ::= expression_statement (OPTIMIZED OUT) */ assert(yyruleno!=89);
      /* (90) statement ::= selection_statement (OPTIMIZED OUT) */ assert(yyruleno!=90);
      /* (91) statement ::= iteration_statement (OPTIMIZED OUT) */ assert(yyruleno!=91);
      /* (92) statement ::= jump_statement (OPTIMIZED OUT) */ assert(yyruleno!=92);
      /* (93) block_item_list ::= block_item (OPTIMIZED OUT) */ assert(yyruleno!=93);
      /* (94) block_item_list ::= block_item_list block_item */ yytestcase(yyruleno==94);
      /* (95) block_item ::= variable_declaration (OPTIMIZED OUT) */ assert(yyruleno!=95);
      /* (96) block_item ::= statement (OPTIMIZED OUT) */ assert(yyruleno!=96);
      /* (97) expression_statement ::= SEM */ yytestcase(yyruleno==97);
      /* (98) expression_statement ::= expression SEM */ yytestcase(yyruleno==98);
      /* (99) selection_statement ::= IF LP expression RP statement */ yytestcase(yyruleno==99);
      /* (100) selection_statement ::= IF LP expression RP statement ELSE statement */ yytestcase(yyruleno==100);
      /* (101) iteration_statement ::= WHILE LP expression RP statement */ yytestcase(yyruleno==101);
      /* (102) iteration_statement ::= DO statement WHILE LP expression RP SEM */ yytestcase(yyruleno==102);
      /* (103) iteration_statement ::= FOR LP expression_statement expression_statement RP statement */ yytestcase(yyruleno==103);
      /* (104) iteration_statement ::= FOR LP expression_statement expression_statement expression RP statement */ yytestcase(yyruleno==104);
      /* (105) iteration_statement ::= FOR LP variable_declaration expression_statement RP statement */ yytestcase(yyruleno==105);
      /* (106) iteration_statement ::= FOR LP variable_declaration expression_statement expression RP statement */ yytestcase(yyruleno==106);
      /* (107) jump_statement ::= GOTO ID SEM */ yytestcase(yyruleno==107);
      /* (108) jump_statement ::= CONTINUE SEM */ yytestcase(yyruleno==108);
      /* (109) jump_statement ::= BREAK SEM */ yytestcase(yyruleno==109);
      /* (110) jump_statement ::= RETURN SEM */ yytestcase(yyruleno==110);
      /* (111) jump_statement ::= RETURN expression SEM */ yytestcase(yyruleno==111);
      /* (112) translation_unit ::= external_declaration (OPTIMIZED OUT) */ assert(yyruleno!=112);
      /* (113) translation_unit ::= translation_unit external_declaration */ yytestcase(yyruleno==113);
      /* (114) external_declaration ::= variable_declaration (OPTIMIZED OUT) */ assert(yyruleno!=114);
      /* (115) external_declaration ::= function_definition (OPTIMIZED OUT) */ assert(yyruleno!=115);
        break;
/********** End reduce actions ************************************************/
  };
  assert( yyruleno<sizeof(yyRuleInfoLhs)/sizeof(yyRuleInfoLhs[0]) );
  yygoto = yyRuleInfoLhs[yyruleno];
  yysize = yyRuleInfoNRhs[yyruleno];
  yyact = yy_find_reduce_action(yymsp[yysize].stateno,(YYCODETYPE)yygoto);

  /* There are no SHIFTREDUCE actions on nonterminals because the table
  ** generator has simplified them to pure REDUCE actions. */
  assert( !(yyact>YY_MAX_SHIFT && yyact<=YY_MAX_SHIFTREDUCE) );

  /* It is not possible for a REDUCE to be followed by an error */
  assert( yyact!=YY_ERROR_ACTION );

  yymsp += yysize+1;
  yypParser->yytos = yymsp;
  yymsp->stateno = (YYACTIONTYPE)yyact;
  yymsp->major = (YYCODETYPE)yygoto;
  yyTraceShift(yypParser, yyact, "... then shift");
  return yyact;
}

/*
** The following code executes when the parse fails
*/
#ifndef YYNOERRORRECOVERY
static void yy_parse_failed(
  yyParser *yypParser           /* The parser */
){
  ParseARG_FETCH
  ParseCTX_FETCH
#ifndef NDEBUG
  if( yyTraceFILE ){
    fprintf(yyTraceFILE,"%sFail!\n",yyTracePrompt);
  }
#endif
  while( yypParser->yytos>yypParser->yystack ) yy_pop_parser_stack(yypParser);
  /* Here code is inserted which will be executed whenever the
  ** parser fails */
/************ Begin %parse_failure code ***************************************/
/************ End %parse_failure code *****************************************/
  ParseARG_STORE /* Suppress warning about unused %extra_argument variable */
  ParseCTX_STORE
}
#endif /* YYNOERRORRECOVERY */

/*
** The following code executes when a syntax error first occurs.
*/
static void yy_syntax_error(
  yyParser *yypParser,           /* The parser */
  int yymajor,                   /* The major type of the error token */
  ParseTOKENTYPE yyminor         /* The minor type of the error token */
){
  ParseARG_FETCH
  ParseCTX_FETCH
#define TOKEN yyminor
/************ Begin %syntax_error code ****************************************/
#line 133 "src\\parser.y"
 yyerror("syntax error"); 
#line 2717 "src\\parser.c"
/************ End %syntax_error code ******************************************/
  ParseARG_STORE /* Suppress warning about unused %extra_argument variable */
  ParseCTX_STORE
}

/*
** The following is executed when the parser accepts
*/
static void yy_accept(
  yyParser *yypParser           /* The parser */
){
  ParseARG_FETCH
  ParseCTX_FETCH
#ifndef NDEBUG
  if( yyTraceFILE ){
    fprintf(yyTraceFILE,"%sAccept!\n",yyTracePrompt);
  }
#endif
#ifndef YYNOERRORRECOVERY
  yypParser->yyerrcnt = -1;
#endif
  assert( yypParser->yytos==yypParser->yystack );
  /* Here code is inserted which will be executed whenever the
  ** parser accepts */
/*********** Begin %parse_accept code *****************************************/
/*********** End %parse_accept code *******************************************/
  ParseARG_STORE /* Suppress warning about unused %extra_argument variable */
  ParseCTX_STORE
}

/* The main parser program.
** The first argument is a pointer to a structure obtained from
** "ParseAlloc" which describes the current state of the parser.
** The second argument is the major token number.  The third is
** the minor token.  The fourth optional argument is whatever the
** user wants (and specified in the grammar) and is available for
** use by the action routines.
**
** Inputs:
** <ul>
** <li> A pointer to the parser (an opaque structure.)
** <li> The major token number.
** <li> The minor token number.
** <li> An option argument of a grammar-specified type.
** </ul>
**
** Outputs:
** None.
*/
void Parse(
  void *yyp,                   /* The parser */
  int yymajor,                 /* The major token code number */
  ParseTOKENTYPE yyminor       /* The value for the token */
  ParseARG_PDECL               /* Optional %extra_argument parameter */
){
  YYMINORTYPE yyminorunion;
  YYACTIONTYPE yyact;   /* The parser action. */
#if !defined(YYERRORSYMBOL) && !defined(YYNOERRORRECOVERY)
  int yyendofinput;     /* True if we are at the end of input */
#endif
#ifdef YYERRORSYMBOL
  int yyerrorhit = 0;   /* True if yymajor has invoked an error */
#endif
  yyParser *yypParser = (yyParser*)yyp;  /* The parser */
  ParseCTX_FETCH
  ParseARG_STORE

  assert( yypParser->yytos!=0 );
#if !defined(YYERRORSYMBOL) && !defined(YYNOERRORRECOVERY)
  yyendofinput = (yymajor==0);
#endif

  yyact = yypParser->yytos->stateno;
#ifndef NDEBUG
  if( yyTraceFILE ){
    if( yyact < YY_MIN_REDUCE ){
      fprintf(yyTraceFILE,"%sInput '%s' in state %d\n",
              yyTracePrompt,yyTokenName[yymajor],yyact);
    }else{
      fprintf(yyTraceFILE,"%sInput '%s' with pending reduce %d\n",
              yyTracePrompt,yyTokenName[yymajor],yyact-YY_MIN_REDUCE);
    }
  }
#endif

  while(1){ /* Exit by "break" */
    assert( yypParser->yytos>=yypParser->yystack );
    assert( yyact==yypParser->yytos->stateno );
    yyact = yy_find_shift_action((YYCODETYPE)yymajor,yyact);
    if( yyact >= YY_MIN_REDUCE ){
      unsigned int yyruleno = yyact - YY_MIN_REDUCE; /* Reduce by this rule */
#ifndef NDEBUG
      assert( yyruleno<(int)(sizeof(yyRuleName)/sizeof(yyRuleName[0])) );
      if( yyTraceFILE ){
        int yysize = yyRuleInfoNRhs[yyruleno];
        if( yysize ){
          fprintf(yyTraceFILE, "%sReduce %d [%s]%s, pop back to state %d.\n",
            yyTracePrompt,
            yyruleno, yyRuleName[yyruleno],
            yyruleno<YYNRULE_WITH_ACTION ? "" : " without external action",
            yypParser->yytos[yysize].stateno);
        }else{
          fprintf(yyTraceFILE, "%sReduce %d [%s]%s.\n",
            yyTracePrompt, yyruleno, yyRuleName[yyruleno],
            yyruleno<YYNRULE_WITH_ACTION ? "" : " without external action");
        }
      }
#endif /* NDEBUG */

      /* Check that the stack is large enough to grow by a single entry
      ** if the RHS of the rule is empty.  This ensures that there is room
      ** enough on the stack to push the LHS value */
      if( yyRuleInfoNRhs[yyruleno]==0 ){
#ifdef YYTRACKMAXSTACKDEPTH
        if( (int)(yypParser->yytos - yypParser->yystack)>yypParser->yyhwm ){
          yypParser->yyhwm++;
          assert( yypParser->yyhwm ==
                  (int)(yypParser->yytos - yypParser->yystack));
        }
#endif
#if YYSTACKDEPTH>0
        if( yypParser->yytos>=yypParser->yystackEnd ){
          yyStackOverflow(yypParser);
          break;
        }
#else
        if( yypParser->yytos>=&yypParser->yystack[yypParser->yystksz-1] ){
          if( yyGrowStack(yypParser) ){
            yyStackOverflow(yypParser);
            break;
          }
        }
#endif
      }
      yyact = yy_reduce(yypParser,yyruleno,yymajor,yyminor ParseCTX_PARAM);
    }else if( yyact <= YY_MAX_SHIFTREDUCE ){
      yy_shift(yypParser,yyact,(YYCODETYPE)yymajor,yyminor);
#ifndef YYNOERRORRECOVERY
      yypParser->yyerrcnt--;
#endif
      break;
    }else if( yyact==YY_ACCEPT_ACTION ){
      yypParser->yytos--;
      yy_accept(yypParser);
      return;
    }else{
      assert( yyact == YY_ERROR_ACTION );
      yyminorunion.yy0 = yyminor;
#ifdef YYERRORSYMBOL
      int yymx;
#endif
#ifndef NDEBUG
      if( yyTraceFILE ){
        fprintf(yyTraceFILE,"%sSyntax Error!\n",yyTracePrompt);
      }
#endif
#ifdef YYERRORSYMBOL
      /* A syntax error has occurred.
      ** The response to an error depends upon whether or not the
      ** grammar defines an error token "ERROR".
      **
      ** This is what we do if the grammar does define ERROR:
      **
      **  * Call the %syntax_error function.
      **
      **  * Begin popping the stack until we enter a state where
      **    it is legal to shift the error symbol, then shift
      **    the error symbol.
      **
      **  * Set the error count to three.
      **
      **  * Begin accepting and shifting new tokens.  No new error
      **    processing will occur until three tokens have been
      **    shifted successfully.
      **
      */
      if( yypParser->yyerrcnt<0 ){
        yy_syntax_error(yypParser,yymajor,yyminor);
      }
      yymx = yypParser->yytos->major;
      if( yymx==YYERRORSYMBOL || yyerrorhit ){
#ifndef NDEBUG
        if( yyTraceFILE ){
          fprintf(yyTraceFILE,"%sDiscard input token %s\n",
             yyTracePrompt,yyTokenName[yymajor]);
        }
#endif
        yy_destructor(yypParser, (YYCODETYPE)yymajor, &yyminorunion);
        yymajor = YYNOCODE;
      }else{
        while( yypParser->yytos > yypParser->yystack ){
          yyact = yy_find_reduce_action(yypParser->yytos->stateno,
                                        YYERRORSYMBOL);
          if( yyact<=YY_MAX_SHIFTREDUCE ) break;
          yy_pop_parser_stack(yypParser);
        }
        if( yypParser->yytos <= yypParser->yystack || yymajor==0 ){
          yy_destructor(yypParser,(YYCODETYPE)yymajor,&yyminorunion);
          yy_parse_failed(yypParser);
#ifndef YYNOERRORRECOVERY
          yypParser->yyerrcnt = -1;
#endif
          yymajor = YYNOCODE;
        }else if( yymx!=YYERRORSYMBOL ){
          yy_shift(yypParser,yyact,YYERRORSYMBOL,yyminor);
        }
      }
      yypParser->yyerrcnt = 3;
      yyerrorhit = 1;
      if( yymajor==YYNOCODE ) break;
      yyact = yypParser->yytos->stateno;
#elif defined(YYNOERRORRECOVERY)
      /* If the YYNOERRORRECOVERY macro is defined, then do not attempt to
      ** do any kind of error recovery.  Instead, simply invoke the syntax
      ** error routine and continue going as if nothing had happened.
      **
      ** Applications can set this macro (for example inside %include) if
      ** they intend to abandon the parse upon the first syntax error seen.
      */
      yy_syntax_error(yypParser,yymajor, yyminor);
      yy_destructor(yypParser,(YYCODETYPE)yymajor,&yyminorunion);
      break;
#else  /* YYERRORSYMBOL is not defined */
      /* This is what we do if the grammar does not define ERROR:
      **
      **  * Report an error message, and throw away the input token.
      **
      **  * If the input token is $, then fail the parse.
      **
      ** As before, subsequent error messages are suppressed until
      ** three input tokens have been successfully shifted.
      */
      if( yypParser->yyerrcnt<=0 ){
        yy_syntax_error(yypParser,yymajor, yyminor);
      }
      yypParser->yyerrcnt = 3;
      yy_destructor(yypParser,(YYCODETYPE)yymajor,&yyminorunion);
      if( yyendofinput ){
        yy_parse_failed(yypParser);
#ifndef YYNOERRORRECOVERY
        yypParser->yyerrcnt = -1;
#endif
      }
      break;
#endif
    }
  }
#ifndef NDEBUG
  if( yyTraceFILE ){
    yyStackEntry *i;
    char cDiv = '[';
    fprintf(yyTraceFILE,"%sReturn. Stack=",yyTracePrompt);
    for(i=&yypParser->yystack[1]; i<=yypParser->yytos; i++){
      fprintf(yyTraceFILE,"%c%s", cDiv, yyTokenName[i->major]);
      cDiv = ' ';
    }
    fprintf(yyTraceFILE,"]\n");
  }
#endif
  return;
}

/*
** Return the fallback token corresponding to canonical token iToken, or
** 0 if iToken has no fallback.
*/
int ParseFallback(int iToken){
#ifdef YYFALLBACK
  assert( iToken<(int)(sizeof(yyFallback)/sizeof(yyFallback[0])) );
  return yyFallback[iToken];
#else
  (void)iToken;
  return 0;
#endif
}
#line 857 "src\\parser.y"


#include <malloc.h>

int yylex(void);
// defined in lexer.l
extern token_value_t yylval;

int main()
{
	void* par = ParseAlloc(malloc);
	ParseInit(par);

	int token;
	while((token = yylex()) > 0)
	{
		Parse(par, token, yylval);
	}

	Parse(par, 0, yylval);
	ParseFree(par, free);
}

#line 3017 "src\\parser.c"
